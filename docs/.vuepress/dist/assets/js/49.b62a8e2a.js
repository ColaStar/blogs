(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{145:function(e,s,a){"use strict";a.r(s);var t=a(0),r=Object(t.a)({},function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"gulp简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp简介","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp简介")]),e._v(" "),a("p",[a("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/gulp.jpg"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/gulp.jpg",alt:""}})]),e._v("\n官网介绍gulp是一个流构建系统（The streaming build system）")]),e._v(" "),a("p",[e._v("gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成；使用它，我们不仅可以很愉快的编写代码，而且大大提高我们的工作效率。")]),e._v(" "),a("p",[e._v("gulp是基于Nodejs的自动任务运行器， 她能自动化地完成 "),a("code",[e._v("javascript/coffee/sass/less/html/image/css")]),e._v(" 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。")]),e._v(" "),a("p",[e._v("gulp 和 grunt 非常类似，但相比于 grunt 的频繁 IO 操作，gulp 的流操作，能更快地更便捷地完成构建工作。")]),e._v(" "),a("p",[e._v("gulp常用地址：")]),e._v(" "),a("p",[e._v("gulp官方网址：http://gulpjs.com")]),e._v(" "),a("p",[e._v("gulp插件地址：http://gulpjs.com/plugins")]),e._v(" "),a("p",[e._v("gulp 官方API：https://github.com/gulpjs/gulp/tree/master/docs/api")]),e._v(" "),a("p",[e._v("gulp 中文API：http://www.ydcss.com/archives/424")]),e._v(" "),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),a("p",[e._v("步骤一：以全局方式安装gulp,执行gulp任务")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install -g gulp\n")])])]),a("p",[e._v("步骤二：把gulp安装在本地,调用插件的功能")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install --save-dev gulp\n")])])]),a("h2",{attrs:{id:"作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用","aria-hidden":"true"}},[e._v("#")]),e._v(" 作用")]),e._v(" "),a("ul",[a("li",[e._v("Sass/less编译")]),e._v(" "),a("li",[e._v("Css Js 图片压缩")]),e._v(" "),a("li",[e._v("Css Js 合并")]),e._v(" "),a("li",[e._v("Css Js 内联")]),e._v(" "),a("li",[e._v("Html的include功能")]),e._v(" "),a("li",[e._v("Autoprefixer")]),e._v(" "),a("li",[e._v("自动刷新")]),e._v(" "),a("li",[e._v("去缓存")]),e._v(" "),a("li",[e._v("Handlebars模板文件的预编译")]),e._v(" "),a("li",[e._v("雪碧图")]),e._v(" "),a("li",[e._v("ESLint rem移动端适配方案")])]),e._v(" "),a("p",[e._v("gulp有很多插件可以做到你想做的事情,插件"),a("a",{attrs:{href:"http://gulpjs.com/plugins",target:"_blank",rel:"noopener noreferrer"}},[e._v("地址"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用","aria-hidden":"true"}},[e._v("#")]),e._v(" 应用")]),e._v(" "),a("p",[e._v("安装了gulp以后你需要在你的文件夹里边创建一个gulpfile.js文件，它是gulp的配置文件。在这里边你可以创建你要创建的任务，以及应用各种插件，相当于webpack的webpack.config.js")]),e._v(" "),a("p",[e._v("大概就是这样的一份文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("//导入工具包 require('node_modules里对应模块')\nvar gulp = require('gulp'), //本地安装gulp所用到的地方\n    concat = require('gulp-concat'),//合并文件 --合并只是放一起--压缩才会真正合并相同样式\n    less = require('gulp-less'),//编译less文件\n    cssmin = require('gulp-minify-css'),//压缩css文件\n    rename = require('gulp-rename'),//设置压缩后的文件名\n    autoprefixer = require('gulp-autoprefixer'),//给 CSS 增加前缀。解决某些CSS属性不是标准属性，有各种浏览器前缀的情况\n    imagemin = require('gulp-imagemin'),  //图片压缩\n    spriter=require('gulp-css-spriter');//合并图片\n\n//编译less文件   定义一个testLess任务（自定义任务名称）\ngulp.task('testLess', function () {\n    gulp.src('src/less/index.less') //该任务针对的文件\n        .pipe(less()) //该任务调用的模块\n        .pipe(gulp.dest('src/css')); //将会在src/css下生成index.css\n});\n\n//压缩css文件\ngulp.task('minifycss', function() {\n    gulp.src('src/css/index.css')      //压缩的文件\n        .pipe(cssmin())   //执行压缩\n        .pipe(gulp.dest('src/cssmin'))   //输出文件夹\n});\n\ngulp.task('default',['testLess','minifycss'],function(){//定义默认任务  先执行testLess和minifycss 再执行console.log('hello world');\n    console.log('hello world');\n}); \n\n//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数\n//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组) \n//gulp.dest(path[, options]) 处理完后文件生成路径\n")])])]),a("h2",{attrs:{id:"api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api","aria-hidden":"true"}},[e._v("#")]),e._v(" "),a("a",{attrs:{href:"https://github.com/gulpjs/gulp/tree/master/docs/api",target:"_blank",rel:"noopener noreferrer"}},[e._v("API"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"src"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#src","aria-hidden":"true"}},[e._v("#")]),e._v(" src")]),e._v(" "),a("p",[e._v("src用于创建一个流用于读取文件系统里的文件对象")]),e._v(" "),a("blockquote",[a("p",[e._v("语法")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("src(globs, [options])\n")])])]),a("p",[a("code",[e._v("globs")]),e._v("：是用来监控或者找到文件\n"),a("code",[e._v("options")]),e._v(":是你要对你监控文件做的一些事情具")]),e._v(" "),a("h3",{attrs:{id:"dest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dest","aria-hidden":"true"}},[e._v("#")]),e._v(" dest")]),e._v(" "),a("p",[e._v("dest 用于创建一个将文件对象写入文件系统的流，他是一个可以在管道的中间或末尾使用的流")]),e._v(" "),a("blockquote",[a("p",[e._v("语法")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("dest(directory, [options])\n")])])]),a("p",[a("code",[e._v("directory")]),e._v(":将写入文件的输出目录的路径。如果使用函数，将使用每个Vinyl对象调用该函数，并且必须返回字符串目录路径。")]),e._v(" "),a("p",[a("code",[e._v("options")]),e._v(":是你要对你写入文件要做的事情")]),e._v(" "),a("h3",{attrs:{id:"symlink"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symlink","aria-hidden":"true"}},[e._v("#")]),e._v(" symlink")]),e._v(" "),a("p",[e._v("symlink 创建用于将Vinyl对象链接到文件系统的流。就是一个符号链接，即其实就是linux里的软连接，就是副本，但是当删除源文件时，软连接文件也会被删除。")]),e._v(" "),a("blockquote",[a("p",[e._v("语法")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("symlink(directory, [options])\n")])])]),a("p",[a("code",[e._v("directory")]),e._v(":输出目录的路径，其中将创建符号链接。如果使用函数，将使用每个Vinyl对象调用该函数，并且必须返回字符串目录路径。\n"),a("code",[e._v("options")]),e._v(":是你要对你输出目录设置的选项。")]),e._v(" "),a("h3",{attrs:{id:"lastrun"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lastrun","aria-hidden":"true"}},[e._v("#")]),e._v(" lastRun")]),e._v(" "),a("p",[e._v("检索在当前运行过程中上次成功完成任务的时间。在观察程序运行时，对后续任务运行最有用。")]),e._v(" "),a("p",[e._v("与之结合使用时src()，通过跳过自上次成功完成任务以来未发生更改的文件，启用增量构建以加快执行时间。")]),e._v(" "),a("p",[e._v("用法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const { src, dest, lastRun, watch } = require('gulp');\nconst imagemin = require('gulp-imagemin');\n\nfunction images() {\n  return src('src/images/**/*.jpg', { since: lastRun(images) })\n    .pipe(imagemin())\n    .pipe(dest('build/img/'));\n}\n\nfunction watch() {\n  watch('src/images/**/*.jpg', images);\n}\n\nexports.watch = watch;\n")])])]),a("blockquote",[a("p",[e._v("语法")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("lastRun(task, [precision])\n")])])]),a("p",[a("code",[e._v("task")]),e._v(":任务函数或已注册任务的字符串别名。")]),e._v(" "),a("p",[a("code",[e._v("precision")]),e._v(":时间戳精度，默认值：1000")]),e._v(" "),a("h3",{attrs:{id:"series"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#series","aria-hidden":"true"}},[e._v("#")]),e._v(" series")]),e._v(" "),a("p",[e._v("将任务函数和/或组合操作组合成更大的操作，这些操作将"),a("code",[e._v("按顺序依次执行")]),e._v("。使用series()和组合操作的嵌套深度没有强制限制parallel()。")]),e._v(" "),a("blockquote",[a("p",[e._v("语法")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("series(...tasks)\n")])])]),a("p",[a("code",[e._v("...task")]),e._v(":任意数量的任务函数都可以作为单独的参数传递。如果您之前已注册任务，则可以使用字符串，但不建议这样做。")]),e._v(" "),a("blockquote",[a("p",[e._v("用法：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const { series } = require('gulp');\n\nfunction javascript(cb) {\n  // body omitted\n  cb();//相当于回调：官网是这么介绍的应该由一些异步工作调用\n}\n\nfunction css(cb) {\n  // body omitted\n  cb();\n}\n\nexports.build = series(javascript, css);\n")])])]),a("h3",{attrs:{id:"parallel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parallel","aria-hidden":"true"}},[e._v("#")]),e._v(" parallel")]),e._v(" "),a("p",[e._v("将任务函数和/或组合操作组合成将"),a("code",[e._v("同时执行")]),e._v("的更大操作。使用series()和组合操作的嵌套深度没有强制限制parallel()")]),e._v(" "),a("blockquote",[a("p",[e._v("语法")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("parallel(...tasks)\n")])])]),a("p",[a("code",[e._v("...task")]),e._v(":任意数量的任务函数都可以作为单独的参数传递。如果您之前已注册任务，则可以使用字符串，但不建议这样做。")]),e._v(" "),a("h3",{attrs:{id:"watch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#watch","aria-hidden":"true"}},[e._v("#")]),e._v(" watch")]),e._v(" "),a("p",[e._v("允许在发生更改时观看全局并运行任务。任务与任务系统的其余部分统一处理。")]),e._v(" "),a("blockquote",[a("p",[e._v("语法：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("watch(globs, [options], [task])\n")])])]),a("blockquote",[a("p",[e._v("参数")])]),e._v(" "),a("p",[a("code",[e._v("globs")]),e._v(":需要被监控的文件")]),e._v(" "),a("p",[a("code",[e._v("options")]),e._v(":控制监控的选项\n"),a("code",[e._v("task")]),e._v(":需要被监控的任务")]),e._v(" "),a("blockquote",[a("p",[e._v("用法")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const { watch } = require('gulp');\n\nconst watcher = watch(['input/*.js']);\n\nwatcher.on('change', function(path, stats) {\n  console.log(`File ${path} was changed`);\n});\n\nwatcher.on('add', function(path, stats) {\n  console.log(`File ${path} was added`);\n});\n\nwatcher.on('unlink', function(path, stats) {\n  console.log(`File ${path} was removed`);\n});\n\nwatcher.close();//关闭监控\n")])])]),a("h3",{attrs:{id:"task"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#task","aria-hidden":"true"}},[e._v("#")]),e._v(" task")]),e._v(" "),a("p",[e._v("定义任务系统中的任务。任务然后可以通过命令行和访问series()，parallel()以及lastRun()API的。")]),e._v(" "),a("blockquote",[a("p",[e._v("语法")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("task([taskName], taskFunction)\n")])])]),a("p",[e._v("参数")]),e._v(" "),a("p",[a("code",[e._v("taskName")]),e._v("：任务名称")]),e._v(" "),a("p",[a("code",[e._v("taskFunction")]),e._v(": 一个任务功能或组成的工作-通过产生series()和parallel()。理想情况下是命名函数。可以附加任务元数据以向命令行提供额外信息。")]),e._v(" "),a("blockquote",[a("p",[e._v("用法：")])]),e._v(" "),a("p",[e._v("将命名函数注册为任务：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const { task } = require('gulp');\n\nfunction build(cb) {\n  // body omitted\n  cb();\n}\n\ntask(build);\n")])])]),a("p",[e._v("将匿名函数注册为任务：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const { task } = require('gulp');\n\ntask('build', function(cb) {\n  // body omitted\n  cb();\n});\n")])])]),a("p",[e._v("检索先前已注册的任务：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const { task } = require('gulp');\n\ntask('build', function(cb) {\n  // body omitted\n  cb();\n});\n\nconst build = task('build');`\n")])])]),a("h3",{attrs:{id:"registry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#registry","aria-hidden":"true"}},[e._v("#")]),e._v(" registry")]),e._v(" "),a("p",[e._v("允许将自定义注册表插入任务系统，该任务系统可以提供共享任务或增强功能。")]),e._v(" "),a("p",[e._v("未测试（后续更新）")]),e._v(" "),a("h3",{attrs:{id:"tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tree","aria-hidden":"true"}},[e._v("#")]),e._v(" tree")]),e._v(" "),a("p",[e._v("获取当前任务依赖关系树 - 在极少数情况下需要它。")]),e._v(" "),a("p",[e._v("通常，tree()gulp使用者不会使用它，但它是暴露的，因此CLI可以显示gulpfile中定义的任务的依赖关系图")]),e._v(" "),a("h3",{attrs:{id:"vinyl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vinyl","aria-hidden":"true"}},[e._v("#")]),e._v(" Vinyl")]),e._v(" "),a("p",[e._v("虚拟文件格式。读取文件时src()，会生成Vinyl对象来表示文件 - 包括路径，内容和其他元数据。")]),e._v(" "),a("p",[e._v("Vinyl对象可以使用插件进行转换。它们也可以使用持久化到文件系统dest()。")]),e._v(" "),a("p",[e._v("创建自己的Vinyl对象时src()- 使用外部vinyl模块而不是生成- 如下面的用法所示。")]),e._v(" "),a("blockquote",[a("p",[e._v("用法")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const Vinyl = require('vinyl');\n\nconst file = new Vinyl({\n  cwd: '/',\n  base: '/test/',\n  path: '/test/file.js',\n  contents: new Buffer('var x = 123')\n});\n\nfile.relative === 'file.js';\n\nfile.dirname === '/test';\nfile.dirname = '/specs';\nfile.path === '/specs/file.js';\n\nfile.basename === 'file.js';\nfile.basename = 'file.txt';\nfile.path === '/specs/file.txt';\n\nfile.stem === 'file';\nfile.stem = 'foo';\nfile.path === '/specs/foo.txt';\nfile.extname === '.txt';\nfile.extname = '.js';\nfile.path === '/specs/file.js';\n")])])]),a("h2",{attrs:{id:"一些常用的插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些常用的插件","aria-hidden":"true"}},[e._v("#")]),e._v(" 一些常用的插件")]),e._v(" "),a("p",[e._v("官网的插件太多了，下面就是介绍一些常用的插件，"),a("a",{attrs:{href:"http://gulpjs.com/plugins",target:"_blank",rel:"noopener noreferrer"}},[e._v("官网插件地址"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"匹配符-、-、！、"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匹配符-、-、！、","aria-hidden":"true"}},[e._v("#")]),e._v(" 匹配符 *、**、！、{}")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("gulp.src('./js/*.js')               // * 匹配js文件夹下所有.js格式的文件\ngulp.src('./js/**/*.js')            // ** 匹配js文件夹的0个或多个子文件夹\ngulp.src(['./js/*.js','!./js/index.js'])    // ! 匹配除了index.js之外的所有js文件\ngulp.src('./js/**/{omui,common}.js')        // {} 匹配{}里的文件名\n")])])]),a("h3",{attrs:{id:"文件操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件操作","aria-hidden":"true"}},[e._v("#")]),e._v(" 文件操作")]),e._v(" "),a("h4",{attrs:{id:"del-替代gulp-clean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#del-替代gulp-clean","aria-hidden":"true"}},[e._v("#")]),e._v(" del (替代gulp-clean)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var del = require('del');\n\ndel('./dist');                      // 删除整个dist文件夹\n")])])]),a("h4",{attrs:{id:"gulp-rename"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-rename","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-rename")]),e._v(" "),a("p",[a("strong",[e._v("描述")]),e._v("：重命名文件。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var rename = require("gulp-rename");\n\ngulp.src(\'./hello.txt\')\n  .pipe(rename(\'gb/goodbye.md\'))    // 直接修改文件名和路径\n  .pipe(gulp.dest(\'./dist\')); \n \ngulp.src(\'./hello.txt\')\n  .pipe(rename({\n    dirname: "text",                // 路径名\n    basename: "goodbye",            // 主文件名\n    prefix: "pre-",                 // 前缀\n    suffix: "-min",                 // 后缀\n    extname: ".html"                // 扩展名\n  }))\n  .pipe(gulp.dest(\'./dist\'));\n')])])]),a("h4",{attrs:{id:"gulp-concat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-concat","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-concat")]),e._v(" "),a("p",[a("strong",[e._v("描述")]),e._v("：合并文件。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var concat = require('gulp-concat');\n\ngulp.src('./js/*.js')\n    .pipe(concat('all.js'))         // 合并all.js文件\n    .pipe(gulp.dest('./dist'));\n    \ngulp.src(['./js/demo1.js','./js/demo2.js','./js/demo2.js'])\n    .pipe(concat('all.js'))         // 按照[]里的顺序合并文件\n    .pipe(gulp.dest('./dist'));\n")])])]),a("h4",{attrs:{id:"gulp-filter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-filter","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-filter")]),e._v(" "),a("p",[a("strong",[e._v("描述")]),e._v("：在虚拟文件流中过滤文件。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var filter = require('gulp-filter');\n\nconst f = filter(['**', '!*/index.js']);\ngulp.src('js/**/*.js')\n    .pipe(f)                        // 过滤掉index.js这个文件\n    .pipe(gulp.dest('dist'));\n\nconst f1 = filter(['**', '!*/index.js'], {restore: true});\ngulp.src('js/**/*.js')\n    .pipe(f1)                       // 过滤掉index.js这个文件\n    .pipe(uglify())                 // 对其他文件进行压缩\n    .pipe(f1.restore)               // 返回到未过滤执行的所有文件\n    .pipe(gulp.dest('dist'));       // 再对所有文件操作，包括index.js\n")])])]),a("h3",{attrs:{id:"压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#压缩","aria-hidden":"true"}},[e._v("#")]),e._v(" 压缩")]),e._v(" "),a("h4",{attrs:{id:"gulp-uglify"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-uglify","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-uglify")]),e._v(" "),a("p",[a("strong",[e._v("描述")]),e._v("：压缩js文件大小。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var uglify = require(\"gulp-uglify\");\n\ngulp.src('./hello.js')\n    .pipe(uglify())                 // 直接压缩hello.js\n    .pipe(gulp.dest('./dist'))\n    \n gulp.src('./hello.js')\n    .pipe(uglify({\n        mangle: true,               // 是否修改变量名，默认为 true\n        compress: true,             // 是否完全压缩，默认为 true\n        preserveComments: 'all'     // 保留所有注释\n    }))\n    .pipe(gulp.dest('./dist'))\n")])])]),a("h4",{attrs:{id:"gulp-csso-gulp-minify-css"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-csso-gulp-minify-css","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-csso | gulp-minify-css")]),e._v(" "),a("p",[a("strong",[e._v("描述")]),e._v("：压缩优化css。")]),e._v(" "),a("p",[e._v("var csso = require('gulp-csso');")]),e._v(" "),a("p",[e._v("gulp.src('./css/*.css')\n.pipe(csso())\n.pipe(gulp.dest('./dist/css'))")]),e._v(" "),a("h4",{attrs:{id:"gulp-html-minify"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-html-minify","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-html-minify")]),e._v(" "),a("p",[a("strong",[e._v("描述")]),e._v("：压缩HTML。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var htmlminify = require('gulp-html-minify');\n\ngulp.src('index.html')\n    .pipe(htmlminify())\n    .pipe(gulp.dest('./dist'))\n")])])]),a("h4",{attrs:{id:"gulp-imagemin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-imagemin","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-imagemin")]),e._v(" "),a("p",[a("strong",[e._v("描述")]),e._v("：压缩图片。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var imagemin = require('gulp-imagemin');\n\ngulp.src('./img/*.{jpg,png,gif,ico}')\n    .pipe(imagemin())\n    .pipe(gulp.dest('./dist/img'))\n")])])]),a("h4",{attrs:{id:"gulp-zip"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-zip","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-zip")]),e._v(" "),a("p",[a("strong",[e._v("描述")]),e._v("：ZIP压缩文件。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var zip = require('gulp-zip');\n\ngulp.src('./src/*')\n    .pipe(zip('all.zip'))                   // 压缩成all.zip文件\n    .pipe(gulp.dest('./dist'))\n")])])]),a("h4",{attrs:{id:"js-css自动注入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-css自动注入","aria-hidden":"true"}},[e._v("#")]),e._v(" JS/CSS自动注入")]),e._v(" "),a("h4",{attrs:{id:"gulp-autoprefixer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-autoprefixer","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-autoprefixer")]),e._v(" "),a("p",[a("strong",[e._v("描述")]),e._v("：自动为css添加浏览器前缀。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var autoprefixer = require('gulp-autoprefixer');\n\ngulp.src('./css/*.css')\n    .pipe(autoprefixer())           // 直接添加前缀\n    .pipe(gulp.dest('dist'))\n\ngulp.src('./css/*.css')\n    .pipe(autoprefixer({\n        browsers: ['last 2 versions'],      // 浏览器版本\n        cascade：true                       // 美化属性，默认true\n        add: true                           // 是否添加前缀，默认true\n        remove: true                        // 删除过时前缀，默认true\n        flexbox: true                       // 为flexbox属性添加前缀，默认true\n    }))\n    .pipe(gulp.dest('./dist'))\n")])])]),a("p",[e._v("查看更多配置："),a("a",{attrs:{href:"https://github.com/postcss/autoprefixer#options",target:"_blank",rel:"noopener noreferrer"}},[e._v("options"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("更多浏览器版本："),a("a",{attrs:{href:"https://github.com/ai/browserslist#queries",target:"_blank",rel:"noopener noreferrer"}},[e._v("browsers"),a("OutboundLink")],1)]),e._v(" "),a("h4",{attrs:{id:"gulp-useref"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-useref","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-useref")]),e._v(" "),a("p",[a("strong",[e._v("描述")]),e._v("：解析构建块在HTML文件来代替引用未经优化的脚本和样式表。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// index.html\n\n\x3c!-- build:css /css/all.css --\x3e\n<link rel="stylesheet" href="css/normalize.css">\n<link rel="stylesheet" href="css/main.css">\n\x3c!-- endbuild --\x3e\n\n// gulpfile.js\n\nvar useref = require(\'gulp-useref\');\n\ngulp.src(\'index.html\')\n    .pipe(useref())\n    .pipe(gulp.dest(\'./dist\'))\n')])])]),a("p",[e._v("替换之后的index.html中就会变成：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<link rel="stylesheet" href="css/all.css">  // 之前的两个<link>替换成一个了\n')])])]),a("h4",{attrs:{id:"gulp-rev"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-rev","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-rev")]),e._v(" "),a("p",[a("strong",[e._v("描述")]),e._v("：给静态资源文件名添加hash值:unicorn.css => unicorn-d41d8cd98f.css")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var rev = require('gulp-rev');\n\ngulp.src('./css/*.css')\n    .pipe(rev())\n    .pipe(gulp.dest('./dist/css'))\n")])])]),a("h4",{attrs:{id:"gulp-rev-replace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-rev-replace","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-rev-replace")]),e._v(" "),a("p",[a("strong",[e._v("描述")]),e._v("：重写被gulp-rev重命名的文件名。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var rev = require('gulp-rev');\nvar revReplace = require('gulp-rev-replace');\nvar useref = require('gulp-useref');\n\ngulp.src('index.html')\n    .pipe(useref())                         // 替换HTML中引用的css和js\n    .pipe(rev())                            // 给css,js,html加上hash版本号\n    .pipe(revReplace())                     // 把引用的css和js替换成有版本号的名字\n    .pipe(gulp.dest('./dist'))\n")])])]),a("h4",{attrs:{id:"gulp-html-replace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-html-replace","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-html-replace")]),e._v(" "),a("p",[a("strong",[e._v("描述")]),e._v("：替换html中的构建块。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// index.html\n\n\x3c!-- build:css --\x3e                          // css是buildName,可以自己定义\n<link rel=\"stylesheet\" href=\"css/normalize.css\">\n<link rel=\"stylesheet\" href=\"css/main.css\">\n\x3c!-- endbuild --\x3e\n\n// gulpfile.js\n\nvar htmlreplace = require('gulp-html-replace');\n\ngulp.src('index.html')\n    .pipe(htmlreplace({\n        'css':'all.css'                     // css是index.html中定义的buildName\n    }))\n    .pipe(gulp.dest('./dist'))\n")])])]),a("p",[e._v("替换之后的index.html中就会变成：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<link rel="stylesheet" href="all.css">      // 之前的两个<link>替换成一个了\n')])])]),a("h3",{attrs:{id:"流控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流控制","aria-hidden":"true"}},[e._v("#")]),e._v(" 流控制")]),e._v(" "),a("h4",{attrs:{id:"gulp-if"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-if","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-if")]),e._v(" "),a("p",[a("strong",[e._v("描述")]),e._v("：有条件地运行一个任务。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var gulpif = require('gulp-if');\nvar uglify = require('gulp-uglify');\nvar concat = require('gulp-concat');\nvar condition = true; \n\ngulp.src('./js/*.js')\n    .pipe(gulpif(condition, uglify(), concat('all.js')))  // condition为true时执行uglify(), else 执行concat('all.js')\n    .pipe(gulp.dest('./dist/'));\n")])])]),a("h3",{attrs:{id:"工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工具","aria-hidden":"true"}},[e._v("#")]),e._v(" 工具")]),e._v(" "),a("h4",{attrs:{id:"gulp-load-plugins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-load-plugins","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-load-plugins")]),e._v(" "),a("p",[a("strong",[e._v("描述")]),e._v("：从包的依赖和附件里加载gulp插件到一个对象里给你选择。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// package.json \n\n"devDependencies": {\n    "gulp": "^3.9.1",\n    "gulp-concat": "^2.6.1",\n    "gulp-rename": "^1.2.2",\n    "gulp-uglify": "^2.0.1"\n}\n\n// gulpfile.js\n\nvar $ = require(\'gulp-load-plugins\')();     // $ 是一个对象,加载了依赖里的插件\n\ngulp.src(\'./**/*.js\')\n    .pipe($.concat(\'all.js\'))               // 使用插件就可以用$.PluginsName()\n    .pipe($.uglify())\n    .pipe($.rename(\'all.min.js\'))\n    .pipe(gulp.dest(\'./dist\'))\n')])])]),a("h4",{attrs:{id:"gulp-sass"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-sass","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-sass")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var sass = require('gulp-sass');\n\ngulp.src('./sass/**/*.scss')\n    .pipe(sass({\n        outputStyle: 'compressed'           // 配置输出方式,默认为nested\n    }))\n    .pipe(gulp.dest('./dist/css'));\n    \ngulp.watch('./sass/**/*.scss', ['sass']);   // 实时监听sass文件变动,执行sass任务\n")])])]),a("h4",{attrs:{id:"gulp-less"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-less","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-less")]),e._v(" "),a("p",[a("strong",[e._v("描述")]),e._v(" :编译Less")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var gulp = require('gulp'),\n    less = require(\"gulp-less\");\n \ngulp.task('compile-less', function () {\n    gulp.src('less/*.less')\n    .pipe(less())\n    .pipe(gulp.dest('dist/css'));\n});\n")])])]),a("h4",{attrs:{id:"gulp-babel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-babel","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-babel")]),e._v(" "),a("p",[a("strong",[e._v("描述")]),e._v("：将ES6代码编译成ES5。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var babel = require('gulp-babel');\n\ngulp.src('./js/index.js')\n    .pipe(babel({\n        presets: ['es2015']\n    }))\n    .pipe(gulp.dest('./dist'))\n")])])]),a("h4",{attrs:{id:"gulp-jshint-js代码检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-jshint-js代码检查","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-jshint    JS代码检查")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var gulp = require('gulp');\nvar jshint = require(\"gulp-jshint\");\n \ngulp.task('jsLint', function () {\n    gulp.src('js/*.js')\n    .pipe(jshint())\n    .pipe(jshint.reporter()); // 输出检查结果\n});\n")])])]),a("h4",{attrs:{id:"gulp-livereload-自动刷新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gulp-livereload-自动刷新","aria-hidden":"true"}},[e._v("#")]),e._v(" gulp-livereload 自动刷新")]),e._v(" "),a("p",[a("strong",[e._v("描述")]),e._v("：当代码变化时，它可以帮助我们自动刷新页面，该插件最好配合谷歌浏览器，且要安装livereload chrome extension扩展插件，否则无效。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var gulp = require('gulp'),\n    less = require('gulp-less'),\n    livereload = require('gulp-livereload');\n \ngulp.task('less', function() {\n  gulp.src('less/*.less')\n    .pipe(less())\n    .pipe(gulp.dest('css'))\n    .pipe(livereload());\n});\n \ngulp.task('watch', function() {\n  livereload.listen(); //要在这里调用listen()方法\n  gulp.watch('less/*.less', ['less']);  //监听目录下的文件，若文件发生变化，则调用less任务。\n});\n")])])])])},[],!1,null,null,null);s.default=r.exports}}]);