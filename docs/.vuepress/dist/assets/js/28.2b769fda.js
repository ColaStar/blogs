(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{179:function(n,e,t){"use strict";t.r(e);var a=t(0),s=Object(a.a)({},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"new-的模拟实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new-的模拟实现","aria-hidden":"true"}},[n._v("#")]),n._v(" new 的模拟实现")]),n._v(" "),t("blockquote",[t("p",[n._v("new运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一。")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Otaku(name, age) {\n  this.name = name;\n  this.age = age;\n  \n  this.habit = 'Games';\n}\n\nOtaku.prototype.strength = 60;\n\nOtaku.prototype.sayYourName = function() {\n  console.log('I am' + this.name);\n};\n\nvar person = new Otaku('Kevin', '18');\n\nconsole.log(person.name);\t// Kevin\nconsole.log(person.habit);\t// Games\nconsole.log(person.strength);\t// 60\n\nperson.sayYourName();\t// I am Kevin\n")])])]),t("p",[n._v("从这个例子中，我们可以看到，实例 person 可以：")]),n._v(" "),t("ul",[t("li",[n._v("访问到 Otaku 构造函数里的属性")]),n._v(" "),t("li",[n._v("访问到 Otaku.prototype 中的属性")])])])},[],!1,null,null,null);e.default=s.exports}}]);