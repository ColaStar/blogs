(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{163:function(e,a,s){"use strict";s.r(a);var t=s(0),n=Object(t.a)({},function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"rollupjs快速入门"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rollupjs快速入门","aria-hidden":"true"}},[e._v("#")]),e._v(" rollupjs快速入门")]),e._v(" "),s("h2",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念","aria-hidden":"true"}},[e._v("#")]),e._v(" 概念")]),e._v(" "),s("p",[e._v("Rollup是一个JavaScript模块打包工具;")]),e._v(" "),s("p",[e._v("可以将小块代码编译成大块复杂的代码。开发者可以使用ES2015模块和TypeScript，最终打包成一个独立的可运行在浏览器或者Node.js环境的文件（可以生成es6 module、commonjs、umd、amd、iife自执行、system规范的js文件）。")]),e._v(" "),s("h2",{attrs:{id:"安装-rollup"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装-rollup","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装 "),s("code",[e._v("rollup")])]),e._v(" "),s("p",[e._v("使用 "),s("code",[e._v("npm install --global rollup")]),e._v(" 安装。执行 "),s("code",[e._v("rollup --help")]),e._v(" 可以查看可用的选项和参数。")]),e._v(" "),s("h2",{attrs:{id:"命令行编译"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令行编译","aria-hidden":"true"}},[e._v("#")]),e._v(" 命令行编译")]),e._v(" "),s("p",[e._v("假如程序的入口文件是"),s("code",[e._v("main.js")]),e._v(",输出文件是"),s("code",[e._v("bundle.js")]),e._v("。")]),e._v(" "),s("blockquote",[s("p",[e._v("对于浏览器环境")])]),e._v(" "),s("p",[e._v("对于浏览器环境：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("rollup main.js --format iife --output bundle.js\n")])])]),s("blockquote",[s("p",[e._v("对于 Node.js 环境：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("rollup main.js --format cjs --output bundle.js\n")])])]),s("blockquote",[s("p",[e._v("如果要在两种环境中都适用：")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('rollup main.js --format umd --name "myBundle" --output bundle.js\n')])])]),s("h2",{attrs:{id:"tree-shaking"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tree-shaking","aria-hidden":"true"}},[e._v("#")]),e._v(" Tree Shaking")]),e._v(" "),s("p",[e._v("Rollup能让打包文件体积很小，因为内部使用了tree-shaking机制。")]),e._v(" "),s("h3",{attrs:{id:"_2-1-概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-概念","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.1 概念")]),e._v(" "),s("p",[s("code",[e._v("tree-shaking")]),e._v("是能够在模块的层面上做到打包后的代码只包含被引用并被执行的模块，\n而不被引用或者不被执行的模块被删除掉，以达到减包的效果。")]),e._v(" "),s("h3",{attrs:{id:"_2-2-处理范围"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-处理范围","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.2 处理范围")]),e._v(" "),s("ul",[s("li",[e._v("只能处理模块级别，消除引用但没有使用的模块，不能处理函数级别的冗余；")]),e._v(" "),s("li",[e._v("只能处理JavaScript相关冗余代码，不能处理CSS冗余代码")])]),e._v(" "),s("h3",{attrs:{id:"_2-3-严格模式下不能处理函数级别的冗余的原因"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-严格模式下不能处理函数级别的冗余的原因","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.3 严格模式下不能处理函数级别的冗余的原因")]),e._v(" "),s("p",[e._v("类的新方法可以通过Object.assign()添加到prototype对象中，如：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("class Person {\n  public name:String\n  constructor(name:String) {\n    this.name = name\n  }\n\n}\n\nObject.assign(Person.prototype,{\n  getName() {\n    console.log(this.name);\n  },\n  setName(name:String) {\n    this.name = name\n  }\n})\nconsole.log(Person.prototype);\n")])])]),s("p",[e._v("在严格模式下，类内部的方法是不可枚举的，因为babel会将类内部的方法编译成Object.defineProperty()。\n因为识别不到类内部的方法是否存在，也就不能知道究竟有没有用到过类内部的方法，\n所以tree-shaking不能识别类内部的方法是否未被使用而删除掉。")]),e._v(" "),s("h3",{attrs:{id:"_2-4-module特征"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-module特征","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.4 module特征")]),e._v(" "),s("ul",[s("li",[e._v("只能作为模块顶层的语句出现")]),e._v(" "),s("li",[e._v("import的模块名只能是字符串常量")]),e._v(" "),s("li",[e._v("模块依赖关系是确定的，和运行时的状态无关，可以进行可靠的静态分析。")])]),e._v(" "),s("p",[s("strong",[e._v("注意：在es6后才开始关注tree-shaking，是因为es6之前的模块化，是通过require引入一个模块，只有运行后才能知道引用了模块里的哪些方法。")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import {button,tab} from 'element-ui'\nrequire('elememt-ui')\n")])])]),s("h3",{attrs:{id:"_2-5-非严格模式下可以处理函数级别的冗余"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-非严格模式下可以处理函数级别的冗余","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.5 非严格模式下可以处理函数级别的冗余")]),e._v(" "),s("p",[e._v("在非严格模式下，类内部的方法编译后是直接加在原型链上的，变得可枚举，可以被识别并筛选\n"),s("strong",[e._v("但是，不建议使用非严格模式")]),e._v("。")]),e._v(" "),s("h3",{attrs:{id:"_2-6例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-6例子","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.6例子")]),e._v(" "),s("p",[e._v("除了使用 ES6 模块，Rollup 还可以静态分析导入模块，移除没用到的代码。这能尽量减小代码体积。")]),e._v(" "),s("p",[e._v("比如，对于 CommonJS，必须引入整体的工具或库文件：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("var utils = require('utils');\nvar query = 'Rollup';\n\nutils.ajax('https://api.example.com/?search=' + query).then(handleResponse);\n")])])]),s("p",[e._v("如果使用了 ES6 模块，我们可以只导入需要的 ajax 函数：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import {ajax} from 'utils';\nvar query = 'Rollup';\n\najax('https://api.example.com/?search=' + query).then(handleResponse);\n")])])]),s("h2",{attrs:{id:"rollup工程搭建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rollup工程搭建","aria-hidden":"true"}},[e._v("#")]),e._v(" Rollup工程搭建")]),e._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/rollup_工程图.png"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/rollup_%E5%B7%A5%E7%A8%8B%E5%9B%BE.png",alt:""}})])]),e._v(" "),s("h3",{attrs:{id:"_3-2-安装rollup并且创建配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-安装rollup并且创建配置文件","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.2 安装rollup并且创建配置文件")]),e._v(" "),s("h4",{attrs:{id:"_3-2-1-安装rollup"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-安装rollup","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.2.1 安装rollup")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("yarn add rollup --save-dev\n")])])]),s("h4",{attrs:{id:"_3-2-2-创建rollup-config-js"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-2-创建rollup-config-js","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.2.2 创建rollup.config.js")]),e._v(" "),s("p",[e._v("//一份配置过的")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import json from 'rollup-plugin-json';\n\nexport defaut {\n    input: './src/mian.js',  // 入口文件\n    output: [\n        {\n            file: './dist/index.js', // 出口文件\n            name: 'test' // 包的名字,\n            format: 'umd' // 代码打包时的格式，这个格式可以前后端通用，除此之外还有其他格式：cjs，iife，es，amd\n            minify: true // 代码是否压缩\n            sourceMap:'inline'\n        },\n        {\n            // 可同时输出多个文件\n        }\n    ],\n     plugins: [\n        postcss({\n            plugins: [\n                simplevars(),\n                nested(),\n                cssnext({\n                warnForDuplicates: false,\n                }),\n                cssnano(),\n            ],\n            extensions: ['.css','.scss'],\n        }),//处理css/.scss文件\n        rollupTypescript(), //Typescript\n        resolve({\n            jsnext: true,\n            main: true,\n            browser: true,\n            }),\n        commonjs(),\n        json(),\n        babel({\n        exclude: 'node_modules/**' // 只编译我们的源代码\n        }),\n        replace({\n            exclude: 'node_modules/**',\n            ENV: JSON.stringify(process.env.NODE_ENV || 'development'),\n        }),\n        (process.env.NODE_ENV === 'production' && uglify()),\n        serve({\n            // Launch in browser (default: false)\n            open: true,\n\n            // Show server address in console (default: true)\n            verbose: false,\n\n            // Folder to serve files from\n            contentBase: '',\n\n            // Multiple folders to serve from\n            contentBase: ['build'],\n\n            // Set to true to return index.html instead of 404\n            historyApiFallback: true,\n\n            // Options used in setting up server\n            host: 'localhost',\n            port: 10001\n        })\n    ]\n}\n")])])]),s("h3",{attrs:{id:"_3-3配置插件与npm包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3配置插件与npm包","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.3配置插件与npm包")]),e._v(" "),s("blockquote",[s("p",[e._v("3.3.1  rollup-plugin-json 插件")])]),e._v(" "),s("p",[e._v("它允许 Rollup 从 JSON 文件中导入数据。")]),e._v(" "),s("p",[e._v("安装 rollup-plugin-json：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install --save-dev rollup-plugin-json\n")])])]),s("p",[e._v("更新 src/main.js 文件，所以可以从 package.json 中读取数据：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import {version} from '../package.json';\n\nexport default function() {\n    console.log('version: ' + version);\n}\n")])])]),s("p",[e._v("使用 npm run build 运行 Rollup 。结果如下所示：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("'use strict';\n\nvar version = '1.0.0';\n\nvar main = function() {\n    console.log('version ' + version);\n};\n\nmodule.exports = main;\n")])])]),s("blockquote",[s("p",[e._v("rollup-plugin-node-resolve")])]),e._v(" "),s("p",[e._v("有时候，项目会依赖 npm 包。Rollup 和 Webpack、Browserify 不同，默认不知道如何处理包之间的关系\n--- 我们需要做一些配置。")]),e._v(" "),s("p",[e._v("举个例子，我们需要一个简单的依赖：the-answer，它会输出人生、宇宙等终极问题的答案：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install --save the-answer\n# 简写形式：\nnpm i -S the-answer\n")])])]),s("p",[e._v("如果我们更新了 src/main.js 文件...")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import answer from 'the-answer';\n\nexport default function() {\n    console.log('the answer is ' + answer);\n}\n")])])]),s("p",[e._v("然后运行 Rollup ...")]),e._v(" "),s("p",[e._v("我们会看到一条警告：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(" 'the-answer' is imported by src/main.js, but could not be resolved – treating it as an external dependency\n")])])]),s("p",[e._v("输出的结果 bundle.js 依然可以在 Node.js 中使用，因为 import 指令变成了 CommonJS 的 require 指令，但是 the-answer 没有打包到结果中。为此，我们需要一个插件。")]),e._v(" "),s("p",[e._v("rollup-plugin-node-resolve 插件告诉 Rollup 如何搜寻外部依赖。安装命令如下...")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install --save-dev rollup-plugin-node-resolve\n")])])]),s("p",[e._v("然后添加到你的配置文件（最开始的工程图里有）")]),e._v(" "),s("p",[e._v("这次，当你再次运行 npm run build，就没有警告了 --- 输出文件包含引入的模块了。")]),e._v(" "),s("blockquote",[s("p",[e._v("rollup-plugin-commonjs")])]),e._v(" "),s("p",[e._v("有些库象 the-answer 一样，暴露了 ES6 风格的模块，可以如上所示引用。但是，目前 npm 上大多数模块使用了 CommonJS 风格。在此之前，需要将 CommonJS 转换为 ES2015，然后才能供 Rollup 享用。\nrollup-plugin-commonjs 就是这样的插件。\n注意，rollup-plugin-commonjs 需要在其他插件转换代码之前引入，这样可以避免 CommonJS 语法规范被其他插件破坏。")]),e._v(" "),s("blockquote",[s("p",[e._v("rollup-plugin-babel")])]),e._v(" "),s("ul",[s("li",[e._v("安装插件")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("yarn add rollup-plugin-babel babel-preset-latest  --save-dev\n")])])]),s("p",[e._v("使用这个插件要注意版本问题，因为rollup的版本目前和babel的高版本还没有兼容，如果使用babel高版本会出现问题，所以安装插件时，如下：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('\n{\n    "babel-core": "^6.26.3",\n    "babel-plugin-external-helpers": "^6.22.0",\n    "babel-plugin-transform-runtime": "^6.23.0",\n    "babel-preset-env": "^1.7.0",\n    "babel-preset-es2015-rollup": "^3.0.0",\n    "babel-preset-latest": "^6.24.1",\n    "babel-preset-stage-2": "^6.24.1",\n    "babel-register": "^6.26.0",\n    "rimraf": "^2.6.2",\n    "rollup": "^0.65.0",\n    "rollup-plugin-babel": "^3.0.7",\n    "uglify-js": "^3.4.9"\n}\n\n')])])]),s("ul",[s("li",[e._v("作用")])]),e._v(" "),s("p",[e._v("用于在旧版浏览器或者环境中将es2015+转换为向后兼容的JavaScript版本。")]),e._v(" "),s("ul",[s("li",[e._v("babel过程")])]),e._v(" "),s("p",[e._v("1.编译：解析代码生成相同的代码\n2.转换：所有语法的转换工作都是由插件完成的\n3.生成：生成向后兼容的es5")]),e._v(" "),s("ul",[s("li",[e._v(".babelrc文件")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "presets": [\n    ["latest", {\n      "es2015": {\n        "modules": false\n      }\n    }]\n  ],\n  "plugins": [\n    "external-helpers"\n  ]\n}\n')])])]),s("p",[e._v("更新rollup.config.js文件")]),e._v(" "),s("blockquote",[s("p",[e._v("配置TypeScript")])]),e._v(" "),s("ul",[s("li",[e._v("安装TypeScript")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("yarn add typescript ts-loader rollup-plugin-typescript2 --save-dev\nyarn add awesome-typescript-loader --save\n")])])]),s("ul",[s("li",[e._v("tsconfig.json文件")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('{\n  "compilerOptions": {\n      "sourceMap": true, //代码映射\n      "noImplicitAny": true, //强类型检查\n      "module": "es2015", //组织代码方式\n      "target": "es2015", //编译目标平台\n      "allowJs": true, //允许使用js\n      "allowSyntheticDefaultImports": true //允许从没有设置默认导出的模块中默认导入。这并不影响代码的显示，仅为了类型检查。\n  },\n  "include": [\n      "./src/**/*"\n  ]\n}\n')])])]),s("ul",[s("li",[e._v("更新rollup.config.js文件")])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import rollupTypescript from 'rollup-plugin-typescript2'\n...\n  plugins: [\n    ...\n    rollupTypescript(),\n  ]\n...\n")])])]),s("blockquote",[s("p",[e._v("其他插件")])]),e._v(" "),s("ul",[s("li",[s("p",[e._v("rollup-plugin-postcss ------rollup中集成PostCSS")])]),e._v(" "),s("li",[s("p",[e._v("rollup-plugin-serve ---------提供静态服务器能力")])]),e._v(" "),s("li",[s("p",[e._v("rollup-plugin-replace------- 可在源码中通过process.env.NODE_ENV用于构建区分Development与Production环境")])]),e._v(" "),s("li",[s("p",[e._v("rollup-plugin-uglify---------压缩bundle文件")])]),e._v(" "),s("li",[s("p",[e._v("rollup-watch")])])]),e._v(" "),s("p",[e._v("实时监听rollup代码更改，当代码发生变化时，会自动编译文件更新内容。\n在配置文件中不需要配置该插件，只需要：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('"scripts": {\n    "build": "rollup -c",\n    "dev": "rollup -c --watch",\n    "pro": "SET NODE_ENV=production",\n    "run": "npm run pro && npm run build",\n    "test": "jest"\n  },\n')])])])])},[],!1,null,null,null);a.default=n.exports}}]);