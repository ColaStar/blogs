(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{393:function(s,a,n){"use strict";n.r(a);var e=n(42),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"es5简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#es5简介","aria-hidden":"true"}},[s._v("#")]),s._v(" es5简介")]),s._v(" "),n("hr"),s._v(" "),n("h2",{attrs:{id:"对象的一些方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象的一些方法","aria-hidden":"true"}},[s._v("#")]),s._v(" 对象的一些方法")]),s._v(" "),n("h3",{attrs:{id:"复制合并对象-assign"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#复制合并对象-assign","aria-hidden":"true"}},[s._v("#")]),s._v(" 复制合并对象（assign）")]),s._v(" "),n("p",[n("strong",[s._v("Object.assign()")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const obj = {a:1};\nconst copy = Object.assign({},obj)\nconsole.log(copy)   //{a:1}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("blockquote",[n("p",[s._v("深拷贝问题\n针对深拷贝，需要使用其他办法，因为 Object.assign()拷贝的是属性值。假如源对象的属性值是一个对象的引用，那么它也只指向那个引用。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var a1 = {a:0,b:{c:0}};\nvar a2 = Object.assign({},a1) //{a:0,b:{c:0}}\n\na1.a = 1\n//a1 => {a:1,b:{c:0}};\n//a2 => {a:0,b:{c:0}};\na2.a = 2\n//a1 => {a:1,b:{c:0}};\n//a2 => {a:2,b:{c:0}};\na1.b.c = 10\n//a1 => {a:1,b:{c:10}};\n//a2 => {a:1,b:{c:10}};\na2.b.c = 20;\n//a1 => {a:1,b:{c:20}};\n//a2 => {a:1,b:{c:20}};\n所以assign是浅拷贝，因为他拷贝的只有第一层的属性值，如果想要深拷贝需要换别的方法\nvar a2 = JSON.parse.(JSON.stringify(a1))\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("blockquote",[n("p",[s._v("合并对象\n合并后目标对象自身也会改变\n如果具有相同属性，前边的属性会被后续参数中具有相同属性的其他对象覆盖。")])]),s._v(" "),n("blockquote",[n("p",[s._v("拷贝 symbol 类型的属性")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const o1 = { a: 1 };\nconst o2 = { [Symbol('foo')]: 2 };\n\nconst obj = Object.assign({}, o1, o2);\nconsole.log(obj); // { a : 1, [Symbol(\"foo\")]: 2 } (cf. bug 1207182 on Firefox)\nObject.getOwnPropertySymbols(obj); // [Symbol(foo)]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("blockquote",[n("p",[s._v("继承属性和不可枚举属性是不能拷贝的")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const obj = Object.create({foo: 1}, { // foo 是个继承属性。\n    bar: {\n        value: 2  // bar 是个不可枚举属性。\n    },\n    baz: {\n        value: 3,\n        enumerable: true  // baz 是个自身可枚举属性。\n    }\n});\n\nconst copy = Object.assign({}, obj);\nconsole.log(copy); // { baz: 3 }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h3",{attrs:{id:"创建对象-create"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建对象-create","aria-hidden":"true"}},[s._v("#")]),s._v(" 创建对象 create")]),s._v(" "),n("p",[n("strong",[s._v("Object.create()")]),n("br"),s._v("\n创建一个新对象，使用现有的对象来提供新创建的对象的__proto__")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// Shape - 父类(superclass)\nfunction Shape() {\n  this.x = 0;\n  this.y = 0;\n}\n\n// 父类的方法\nShape.prototype.move = function(x, y) {\n  this.x += x;\n  this.y += y;\n  console.info('Shape moved.');\n};\n\n// Rectangle - 子类(subclass)\nfunction Rectangle() {\n  Shape.call(this); // call super constructor.\n}\n\n// 子类续承父类\nRectangle.prototype = Object.create(Shape.prototype);\nRectangle.prototype.constructor = Rectangle;\n\nvar rect = new Rectangle();\n\nconsole.log('Is rect an instance of Rectangle?',\n  rect instanceof Rectangle); // true\nconsole.log('Is rect an instance of Shape?',\n  rect instanceof Shape); // true\nrect.move(1, 1); // Outputs, 'Shape moved.'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("blockquote",[n("p",[s._v("使用 Object.create 的 property Object参数")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var o;\n\n// 创建一个原型为null的空对象\no = Object.create(null);\n\n\no = {};\n// 以字面量方式创建的空对象就相当于:\no = Object.create(Object.prototype);\n\n\no = Object.create(Object.prototype, {\n  // foo会成为所创建对象的数据属性\n  foo: { \n    writable:true,\n    configurable:true,\n    value: "hello" \n  },\n  // bar会成为所创建对象的访问器属性\n  bar: {\n    configurable: false,\n    get: function() { return 10 },\n    set: function(value) {\n      console.log("Setting `o.bar` to", value);\n    }\n  }\n});\n\n\nfunction Constructor(){}\no = new Constructor();\n// 上面的一句就相当于:\no = Object.create(Constructor.prototype);\n// 当然,如果在Constructor函数中有一些初始化代码,Object.create不能执行那些代码\n\n\n// 创建一个以另一个空对象为原型,且拥有一个属性p的对象\no = Object.create({}, { p: { value: 42 } })\n\n// 省略了的属性特性默认为false,所以属性p是不可写,不可枚举,不可配置的:\no.p = 24\no.p\n//42\n\no.q = 12\nfor (var prop in o) {\n   console.log(prop)\n}\n//"q"\n\ndelete o.p\n//false\n\n//创建一个可写的,可枚举的,可配置的属性p\no2 = Object.create({}, {\n  p: {\n    value: 42, \n    writable: true,\n    enumerable: true,\n    configurable: true \n  } \n});\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br")])]),n("h3",{attrs:{id:"object-defineproperty"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-defineproperty","aria-hidden":"true"}},[s._v("#")]),s._v(" Object.defineProperty")]),s._v(" "),n("p",[s._v("Object.defineProperty(obj, prop, descriptor)")]),s._v(" "),n("p",[n("strong",[s._v("描述")]),s._v("：该方法允许精确添加或修改对象的属性。通过赋值操作添加的普通属性是可枚举的，能够在属性枚举期间呈现出来（for...in 或 Object.keys 方法）， 这些属性的值可以被改变，也可以被删除。这个方法允许修改默认的额外选项（或配置）。默认情况下，使用 Object.defineProperty() 添加的属性值是不可修改的。")]),s._v(" "),n("h2",{attrs:{id:"额外的数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#额外的数组","aria-hidden":"true"}},[s._v("#")]),s._v(" 额外的数组")]),s._v(" "),n("blockquote",[n("p",[n("strong",[s._v("Array.isArray()")])])]),s._v(" "),n("p",[n("strong",[s._v("判断是不是数组")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//语法\nArray.isArray(obj)\n\nArray.isArray([1, 2, 3]);  \n// true\nArray.isArray(new Array());\n// 鲜为人知的事实：其实 true\nArray.prototype 也是一个数组。\nArray.isArray(Array.prototype); \n// true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[n("strong",[s._v("注意")]),s._v("：当检测Array实例时, Array.isArray 优于 instanceof,因为Array.isArray能检测iframes."),n("br"),s._v(" "),n("strong",[s._v("原生方法写")]),s._v("：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function isArray (obj) {\n  return Object.prototype.toString.call(obj) === '[object Array]';\n}\nfunction isArray (obj) {\n  return obj instanceof Array;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"array-form"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-form","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.form")]),s._v(" "),n("p",[s._v("从一个类似数组或可迭代对象中创建一个新的数组实例")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//语法\nArray.from(arrayLike[, mapFn[, thisArg]])\n\n返回值是一个新的数组实例\n参数：\narratLike：想要转换为数组的伪数组（拥有一个 length 属性和若干索引属性的任意对象，如字符串等）和可迭代对象（可以获取对象中的元素,如 Map和 Set 等）\nmapFn（可选）如果指定了这个参数，新数组的每个元素都会执行该回调函数。\nthisArg（可选）执行回调函数是的this对象\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("用法：数组去重")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const newarr = Array.from(new Set([1,2,3,5,6,7,8,2,1]))\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("在Array.from中使用箭头函数")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Array.from('123456',x=>x+1)     ==>['11','21','31','41','51','61']\n相当于\nArray.from('123456').map(ele=>{\n  return ele+1\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h3",{attrs:{id:"array-of"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-of","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.of()")]),s._v(" "),n("p",[s._v("创建一个具有可变数量参数的新数组实例，而不考虑参数的数量和类型\n返回一个新的Array实例")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//语法\nArray.of(arr[0],arr[1],arr[2])\n//与Array()的区别\nArray(7)  //[,,,,,,]   7个空位元素数组不是undefined\nArray(1,2,3)   //[1,2,3]\n\nArray.of(7)   //[7]\nArray.of(1,2,3)   //7\nArray.of() 和 Array 构造函数之间的区别在于处理整数参\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[n("strong",[s._v("原生js实现")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Array.prototype.of = function() {\n    return Array.prototype.slice.call(arguments);\n  };\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h3",{attrs:{id:"array-concat"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-concat","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.concat()")]),s._v(" "),n("p",[s._v("合并俩个或多个数组，不会改变现有数组，会返回一个新的数组")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//语法\nconst newarr = oldArr.concat(arr1,arr2,arr3,···)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[n("strong",[s._v("注意")]),s._v("："),n("br"),s._v("\n如果用concat方法创建一个数组,返回数组是一个浅拷贝\n[].concat(arr)\n"),n("strong",[s._v("实例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//链接n个数组\narr.concat(arr1,arr2,arr3···)\n\n//链接值到数组中\narr.concat(1,[2,3,4])\n\n//合并嵌套数组并保留引用浅拷贝\nvar num1 = [[1]];\nvar num2 = [2, [3]];\n\nvar nums = num1.concat(num2);\n\nconsole.log(nums);\n// results in [[1], 2, [3]]\n\n// modify the first element of num1\nnum1[0].push(4);\n\nconsole.log(nums);\n// results in [[1, 4], 2, [3]]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("h3",{attrs:{id:"array-copywithin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-copywithin","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.copyWithin()")]),s._v(" "),n("p",[s._v("浅复制数组的一部分到同一数组中的另一个位置，并返回它，而不修改其大小。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//语法\narr.copyWithin(target[, start[, end]])\n\ntarget\n0 为基底的索引，复制序列到该位置。如果是负数，target 将从末尾开始计算。\n如果 target 大于等于 arr.length，将会不发生拷贝。如果 target 在 start 之后，复制的序列将被修改以符合 arr.length。\nstart\n0 为基底的索引，开始复制元素的起始位置。如果是负数，start 将从末尾开始计算。\n如果 start 被忽略，copyWithin 将会从0开始复制。\nend\n0 为基底的索引，开始复制元素的结束位置。copyWithin 将会拷贝到该位置，但不包括 end 这个位置的元素。如果是负数， end 将从末尾开始计算。\n如果 end 被忽略，copyWithin 方法将会一直复制至数组结尾（默认为 arr.length）。\n\n返回值：改变后的数组\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[n("strong",[s._v("例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let numbers = [1, 2, 3, 4, 5];\nnumbers.copyWithin(-2);\n//[1,2,3,1,2]\nnumbers.copyWithin(0, 3);\n//[4,5,3,4,5]\nnumbers.copyWithin(0, 3, 4);\n//[4,2,3,4,5]\nnumbers.copyWithin(-2, -3, -1);\n//[1,2,3,3,4]\n[].copyWithin.call({length: 5, 3: 1}, 0, 3);\n// {0: 1, 3: 1, length: 5}？？？\n// ES2015 Typed Arrays are subclasses of Array\nvar i32a = new Int32Array([1, 2, 3, 4, 5]);\n\ni32a.copyWithin(0, 2);\n// Int32Array [3, 4, 5, 4, 5]\n\n// On platforms that are not yet ES2015 compliant: \n[].copyWithin.call(new Int32Array([1, 2, 3, 4, 5]), 0, 3, 4);\n// Int32Array [4, 2, 3, 4, 5]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("h3",{attrs:{id:"array-entries"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-entries","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.entries()")]),s._v(" "),n("p",[s._v("返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('//语法\narr.entries()\n返回值：返回一个新的Array迭代器对象，Array Iterator对象的原型上有一个next()方法可用于遍历迭代器取得原数组的[key:value]\n\n//next()方法\nvar arr = ["a", "b", "c"]; \nvar iterator = arr.entries();\nconsole.log(iterator.next());\n\n/*{value: Array(2), done: false}\n          done:false\n          value:(2) [0, "a"]\n           __proto__: Object\n*/\n// iterator.next()返回一个对象，对于有元素的数组，\n// 是next{ value: Array(2), done: false }；\n// next.done 用于指示迭代器是否完成：在每次迭代时进行更新而且都是false，\n// 直到迭代器结束done才是true。\n// next.value是一个["key":"value"]的数组，是返回的迭代器中的元素值。\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("p",[n("strong",[s._v("例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const arr = [1,2,3]\narr.entries().next().value  //[0,1] \narr.entries().next().value  //[1,2] \narr.entries().next().value  //[2,3] \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("二维数组按行排序")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function sortArr(arr) {\n    var goNext = true;\n    var entries = arr.entries();\n    while (goNext) {\n        var result = entries.next();\n        if (result.done !== true) {\n            result.value[1].sort((a, b) => a - b);\n            goNext = true;\n        } else {\n            goNext = false;\n        }\n    }\n    return arr;\n}\n\nvar arr = [[1,34],[456,2,3,44,234],[4567,1,4,5,6],[34,78,23,1]];\nsortArr(arr);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("h3",{attrs:{id:"array-prototype-fill"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-fill","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.prototype.fill()")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//语法\narr.fill(value[, start[, end]])\nvalue:用来填充数组的值\nstar:t起始索引默认为0\nend:结束索引默认为this.length\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("strong",[s._v("例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('[1, 2, 3].fill(4);               //[4,4,4]\n[1, 2, 3].fill(4, 1);            //[1,4,4]\n[1, 2, 3].fill(4, 1, 2);         //[1,4,3]\n[1, 2, 3].fill(4, 1, 1);         // [1,2,3]\n[1, 2, 3].fill(4, 3, 3);         // [1,2,3]\n[1, 2, 3].fill(4, -3, -2);       // [4,2,3]\n[1, 2, 3].fill(4, NaN, NaN);     // [1,2,3]\n[1, 2, 3].fill(4, 3, 5);         // [1,2,3]\nArray(3).fill(4);                // [4,4,4]\n[].fill.call({ length: 3 }, 4);  // {0: 4, 1: 4, 2: 4, length: 3}\n\n// Objects by reference.\nvar arr = Array(3).fill({}) // [{}, {}, {}];\narr[0].hi = "hi"; // [{ hi: "hi" }, { hi: "hi" }, { hi: "hi" }]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h3",{attrs:{id:"array-prototype-find"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-find","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.prototype.find()")]),s._v(" "),n("p",[n("strong",[s._v("ie浏览器不兼容")])]),s._v(" "),n("p",[s._v("返回数组中满足测试函数的第一个元素的值，否则返回undefined")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//语法\narr.find(callback[, thisArg])\n//参数\ncallback\n在数组每一项上执行的函数，接收 3 个参数：\n   item 当前便利的元素\n   index 当前便利的索引值\n   arr 数组本身\nthisArg 执行回调时用做的this对象\n//返回值数组中第一个满足测试函数的元素的值，否则返回undefined\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[n("strong",[s._v("例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//用对象的属性查找数组里的对象\nvar inventory = [\n    {name: 'apples', quantity: 2},\n    {name: 'bananas', quantity: 0},\n    {name: 'cherries', quantity: 5}\n];\n\nfunction findCherries(fruit) { \n    return fruit.name === 'cherries';\n}\n\nconsole.log(inventory.find(findCherries));\n//寻找数组中的质数\nfunction isPrime(element, index, array) {\n  var start = 2;\n  while (start <= Math.sqrt(element)) {\n    if (element % start++ < 1) {\n      return false;\n    }\n  }\n  return element > 1;\n}\n\nconsole.log([4, 6, 8, 12].find(isPrime)); // undefined, not found\nconsole.log([4, 5, 8, 12].find(isPrime)); // 5\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("h3",{attrs:{id:"array-prototype-findindex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-findindex","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.prototype.findIndex")]),s._v(" "),n("p",[s._v("返回数组中中第一个满足测试函数的元素的索引值，否则返回-1")]),s._v(" "),n("p",[n("strong",[s._v("ie浏览器不兼容")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//语法\narr.find(callback[, thisArg])\n//参数\ncallback\n在数组每一项上执行的函数，接收 3 个参数：\n   item 当前便利的元素\n   index 当前便利的索引值\n   arr 数组本身\nthisArg 执行回调时用做的this对象\n//返回值数组中第一个满足测试函数的元素的索引值，否则返回-1\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[n("strong",[s._v("例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//查找数组中首个质数元素的索引\nfunction isPrime(element, index, array) {\n  var start = 2;\n  while (start <= Math.sqrt(element)) {\n    if (element % start++ < 1) {\n      return false;\n    }\n  }\n  return element > 1;\n}\n\nconsole.log([4, 6, 8, 12].findIndex(isPrime)); // -1, not found\nconsole.log([4, 6, 7, 12].findIndex(isPrime)); // 2\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h3",{attrs:{id:"array-prototype-flat"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-flat","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.prototype.flat()")]),s._v(" "),n("p",[s._v("会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。")]),s._v(" "),n("p",[s._v("//不兼容ie，Samsung Internet")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//语法\nvar newArray = arr.flat(depth)\n//参数\n指定要提取嵌套数组的结构深度，默认值为 1\n//返回值\n一个包含将数组与子数组中所有元素的新数组。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[n("strong",[s._v("例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//扁平化嵌套数组\nvar arr1 = [1, 2, [3, 4]];\narr1.flat(); \n// [1, 2, 3, 4]\n\nvar arr2 = [1, 2, [3, 4, [5, 6]]];\narr2.flat();\n// [1, 2, 3, 4, [5, 6]]\n\nvar arr3 = [1, 2, [3, 4, [5, 6]]];\narr3.flat(2);\n// [1, 2, 3, 4, 5, 6]\n\n//使用 Infinity 作为深度，展开任意深度的嵌套数组\narr3.flat(Infinity); \n// [1, 2, 3, 4, 5, 6]\n\n\n//扁平化与空项\nflat() 方法会移除数组中的空项:\nvar arr4 = [1, 2, , 4, 5];\narr4.flat();\n// [1, 2, 4, 5]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("p",[n("strong",[s._v("代替方案")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var arr1 = [1, 2, [3, 4]];\narr1.flat();\n\n// 反嵌套一层数组\narr1.reduce((acc, val) => acc.concat(val), []);// [1, 2, 3, 4]\n\n// 或使用 ...\nconst flatSingle = arr => [].concat(...arr);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 使用 reduce、concat 和递归无限反嵌套多层嵌套的数组\nvar arr1 = [1,2,3,[1,2,3,4, [2,3,4]]];\n\nfunction flattenDeep(arr1) {\n   return arr1.reduce((acc, val) => Array.isArray(val) ? acc.concat(flattenDeep(val)) : acc.concat(val), []);\n}\nflattenDeep(arr1);\n// [1, 2, 3, 1, 2, 3, 4, 2, 3, 4]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 不使用递归，使用 stack 无限反嵌套多层嵌套数组\nvar arr1 = [1,2,3,[1,2,3,4, [2,3,4]]];\nfunction flatten(input) {\n  const stack = [...input];\n  const res = [];\n  while (stack.length) {\n    // 使用 pop 从 stack 中取出并移除值\n    const next = stack.pop();\n    if (Array.isArray(next)) {\n      // 使用 push 送回内层数组中的元素，不会改动原始输入 original input\n      stack.push(...next);\n    } else {\n      res.push(next);\n    }\n  }\n  // 使用 reverse 恢复原数组的顺序\n  return res.reverse();\n}\nflatten(arr1);// [1, 2, 3, 1, 2, 3, 4, 2, 3, 4]\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("h3",{attrs:{id:"array-prototype-some"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-some","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.prototype.some")]),s._v(" "),n("p",[s._v("判断是否至少有一个元素通过由提供的函数实现的测试。不会改变原数组")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//语法\narr.some(callback[, thisArg])\n//参数\ncallback\n在数组每一项上执行的函数，接收 3 个参数：\n   item 当前便利的元素\n   index 当前便利的索引值\n   arr 数组本身\nthisArg 执行回调时用做的this对象\n//返回值:至少有一个元素通过指定函数的测试，返回true，否则false\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[n("strong",[s._v("例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//测试数组元素的值\n//使用箭头函数测试数组元素的值\n//判断数组元素中是否存在某个值\n//使用箭头函数判断数组元素中是否存在某个值\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"array-prototype-every"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-every","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.prototype.every()")]),s._v(" "),n("p",[s._v("判断是否所有元素通过指定函数的测试,不会改变原数组")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//语法\narr.every(callback[, thisArg])\n//参数\ncallback\n在数组每一项上执行的函数，接收 3 个参数：\n   item 当前便利的元素\n   index 当前便利的索引值\n   arr 数组本身\nthisArg 执行回调时用做的this对象\n//返回值:如果所有元素通过指定函数的测试，返回true，否则false\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[n("strong",[s._v("例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//检测所有数组元素的大小----\x3e数组中的所有元素是否都大于 10\nfunction isBigEnough(element, index, array) {\n  return (element >= 10);\n}\nvar passed = [12, 5, 8, 130, 44].every(isBigEnough);\n// passed is false\npassed = [12, 54, 18, 130, 44].every(isBigEnough);\n// passed is true\n//原生js实现\nif (!Array.prototype.every)\n{\n  Array.prototype.every = function(fun /*, thisArg */)\n  {\n    'use strict';\n\n    if (this === void 0 || this === null)\n      throw new TypeError();\n\n    var t = Object(this);\n    var len = t.length >>> 0;\n    if (typeof fun !== 'function')\n        throw new TypeError();\n\n    var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n    for (var i = 0; i < len; i++)\n    {\n      if (i in t && !fun.call(thisArg, t[i], i, t))\n        return false;\n    }\n\n    return true;\n  };\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br")])]),n("h3",{attrs:{id:"array-prototype-filter"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-filter","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.prototype.filter()")]),s._v(" "),n("p",[s._v("filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素，不会改变原素组")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//语法\narr.every(callback[, thisArg])\n//参数\ncallback\n在数组每一项上执行的函数，接收 3 个参数：\n   item 当前便利的元素\n   index 当前便利的索引值\n   arr 数组本身\nthisArg 执行回调时用做的this对象\n//返回值：一个新的、由通过测试的元素组成的数组，如果没有任何数组元素通过测试，则返回空数组\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[n("strong",[s._v("例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//筛选排除所有较小的值\n//过滤 JSON 中的无效条目\n//在数组中搜索\n//ES方法实现\nconst fruits = ['apple', 'banana', 'grapes', 'mango', 'orange'];\n\n/**\n * Array filters items based on search criteria (query)\n */\nconst filterItems = (query) => {\n  return fruits.filter((el) =>\n    el.toLowerCase().indexOf(query.toLowerCase()) > -1\n  );\n}\n\nconsole.log(filterItems('ap')); // ['apple', 'grapes']\nconsole.log(filterItems('an')); // ['banana', 'mango', 'orange']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("h3",{attrs:{id:"array-prototype-includes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-includes","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.prototype.includes()")]),s._v(" "),n("p",[n("strong",[s._v("兼容性")]),s._v("：\n不兼容IE")]),s._v(" "),n("p",[s._v("includes方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//语法\narr.includes(valueToFind[, fromIndex])\n//参数\nvalueToFind：需要查找的元素值。\nfromIndex 可选：\n从fromIndex 索引处开始查找 valueToFind。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜 （即使从末尾开始往前跳 fromIndex 的绝对值个索引，然后往后搜寻）。默认为 0。\n//返回值\n如果包含则返回 true，否则返回false。\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[n("strong",[s._v("例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//fromIndex 大于等于数组长度\n//计算出的索引小于 0\n//在函数的 arguments 对象上调用的 includes() 方法。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("Polfill")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("待补充\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"array-foreach"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-foreach","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.forEach()")]),s._v(" "),n("p",[s._v("对数组的每个元素执行一次提供的函数")]),s._v(" "),n("p",[n("strong",[s._v("兼容")]),s._v("：IE9")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//语法\narr.forEach(callback[, thisArg]);\n\n//参数\ncallback为数组每个元素执行的函数，该函数接收3个参数\n    item数组中正在处理的当前元素\n    index数组中正在处理的当前元素的索引值\n    arr：正在操作的数组\n\n//返回值：undefined\n\nArray.forEach((item,index,arr)=>{\n\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[n("strong",[s._v("例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//for 循环转换为 forEach\n//打印出数组的内容\n//使用 thisArg\n//对象复制函数\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"array-indexof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-indexof","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.indexOf()")]),s._v(" "),n("p",[s._v("返回数组中可以找到一个给定元素的第一个索引，如果不存在，返回-1；")]),s._v(" "),n("p",[n("strong",[s._v("兼容IE9")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//语法\narr.indexOf(searchEle,formIndex)\n//参数\nsearchEle要查询的元素\nformIndex开始查找的位置，如果大于数组长度就不会在该数组中寻找返回-1，如果是负数，从后往前查找。如果大于数组的长度，从整个数组中查找，默认为0\n//返回值:返回数组中可以找到一个给定元素的第一个索引，如果不存在则返回-1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[n("strong",[s._v("例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//找出指定元素出现的所有位置\nconst newarr = [];\nconst index = arr.indexOf(ele);\nwhile(index != -1){\n  newarr.push(index)\n  index = (index > 0 ? array.indexOf(ele, index + 1) : -1);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"array-lastindexof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-lastindexof","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.lastIndexOf()")]),s._v(" "),n("p",[s._v("返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 fromIndex 处开始。")]),s._v(" "),n("p",[n("strong",[s._v("语法")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("arr.lastIndexOf(ele,index)\n//参数\nele:要查找的元素\nindex:从此位置开始逆向查找。默认为数组的长度减 1，即整个数组都被查找。如果该值大于或等于数组的长度，则整个数组会被查找。如果为负值，将其视为从数组末尾向前的偏移。即使该值为负，数组仍然会被从后向前查找。如果该值为负时，其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。\n//返回值\n数组中最后一个元素的索引，如未找到返回-1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"array-map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-map","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.map()")]),s._v(" "),n("p",[s._v("创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。")]),s._v(" "),n("p",[n("strong",[s._v("语法")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var new_array = arr.map(function callback(currentValue[, index[, array]]) {\n// Return element for new_array }[, \nthisArg])\n//参数\ncallback回调函数\n  value数组中正在处理的当前元素\n  index 数组中正在处理的当前元素的索引值\n  array 当前数组\nthisArg:执行 callback 函数时使用的this 值。\n//返回一个新数组，每个元素都是回调函数的结果。不修改原数组\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[n("strong",[s._v("例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("[1,2,3,4,5,6,7,8].map(parseInt)\nparseInt可传2个参数第二值是进制，所以把索引值传入后得到以下结果\n//1,NaN,NaN,NaN,NaN,NaN,NaN,NaN\n[1,2,3,4,5,6,7,8].map(Number)\n//1,2,3,4,5,6,7,8\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"array-reduceright"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-reduceright","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.reduceRight()")]),s._v(" "),n("p",[s._v("接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。")]),s._v(" "),n("p",[n("strong",[s._v("语法")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("arr.reduceRight(callback[, initialValue])\n//参数\n  callback\n       prev:上一次调用回调的结果\n       cur：当前被处理的元素\n       index：当前处理元素的索引\n       array：调用reduceRight的数组\n  initialValue：可作为第一次调用回调 callback 的第一个参数\n  返回值：函数累计执行之后的返回值\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[n("strong",[s._v("例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//扁平化一个元素为数组的数组\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduceRight(function(a, b) {\n    return a.concat(b);\n}, []);\n// flattened is [4, 5, 2, 3, 0, 1]\n\n//与reduce的区别\nvar a = ['1', '2', '3', '4', '5']; \nvar left  = a.reduce(function(prev, cur)      { return prev + cur; }); \nvar right = a.reduceRight(function(prev, cur) { return prev + cur; }); \n\nconsole.log(left);  // \"12345\"\nconsole.log(right); // \"54321\"\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h3",{attrs:{id:"array-reduce"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-reduce","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.reduce()")]),s._v(" "),n("p",[n("strong",[s._v("兼容到IE9")])]),s._v(" "),n("p",[s._v("接受一个函数作为累加器（accumulator）和数组的每个值（从左到右）将其减少为单个值。")]),s._v(" "),n("p",[n("strong",[s._v("语法")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("arr.reduce(callback[, initialValue])\n//参数\n  callback\n       prev:上一次调用回调的结果\n       cur：当前被处理的元素\n       index：当前处理元素的索引\n       array：调用reduceRight的数组\n  initialValue：可作为第一次调用回调 callback 的第一个参数\n  返回值：函数累计执行之后的结果\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[n("strong",[s._v("例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//数组去重\nlet arr = [1,2,1,2,3,5,4,5,3,4,4,4,4];\nlet result = arr.sort().reduce((init, current)=>{\n    if(init.length===0 || init[init.length-1]!==current){\n        init.push(current);\n    }\n    return init;\n}, []);\nconsole.log(result); //[1,2,3,4,5]\n\n//用map实现一个reduce\nvar initItem = []\nfunction mapReduce(arr,fn,initItem){\n    var sum = initItem ? initItem : 0;  \n    arr.map((item,index,arr)=>{\n        sum = fn(sum,item)\n        console.log(sum)\n    })\n    return sum\n}\nfunction fn(a,b){\n  return a+b\n}\nmapReduce(arr,initItem)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("h3",{attrs:{id:"arr-join"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arr-join","aria-hidden":"true"}},[s._v("#")]),s._v(" arr.join()")]),s._v(" "),n("p",[n("strong",[s._v("兼容IE5")]),s._v("\n将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。")]),s._v(" "),n("p",[n("strong",[s._v("语法")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('arr.join([separator])\n//参数：指定一个字符串来分隔数组的每个元素。如果需要，将分隔符转换为字符串。如果省略()，数组元素用逗号分隔。默认为 ","。如果separator是空字符串("")，则所有元素之间都没有任何字符。\n//返回值：一个所有数组元素连接的字符串。如果 arr.length 为0，则返回空字符串。如果其中一个元素是null或undefined返回空字符串\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("strong",[s._v("例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//通过不同连接符连接数组元素（为空默认使用，''转换为'1256'）\n//连接类数组\nArray.prototype.join.call(arguments)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h3",{attrs:{id:"object-keys"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object-keys","aria-hidden":"true"}},[s._v("#")]),s._v(" Object.keys()")]),s._v(" "),n("p",[n("strong",[s._v("不兼容IE")])]),s._v(" "),n("p",[s._v("返回一个包含数组中每个索引键的Array Iterator对象。")]),s._v(" "),n("p",[n("strong",[s._v("示例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var arr = [\"a\", , \"c\"];\nvar sparseKeys = Object.keys(arr);\nvar denseKeys = [...arr.keys()];\nconsole.log(sparseKeys); // ['0', '2']\nconsole.log(denseKeys);  // [0, 1, 2]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h3",{attrs:{id:"array-shift"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-shift","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.shift()")]),s._v(" "),n("p",[n("strong",[s._v("兼容到IE5")])]),s._v(" "),n("p",[s._v("从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。")]),s._v(" "),n("p",[n("strong",[s._v("注意")]),s._v(" "),n("strong",[s._v("返回值")]),s._v("：从数组中"),n("strong",[s._v("删除的元素")]),s._v("; 如果数组为空则返回undefined 。")]),s._v(" "),n("h3",{attrs:{id:"array-pop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-pop","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.pop()")]),s._v(" "),n("p",[n("strong",[s._v("兼容到IE5")]),s._v("\n删除数组中最后一个元素并返回该元素的值，此方法改变原数组")]),s._v(" "),n("p",[n("strong",[s._v("注意")]),n("br"),s._v("\n从数组中删除的元素(当数组为空时返回undefined)。")]),s._v(" "),n("h3",{attrs:{id:"array-push"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-push","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.push()")]),s._v(" "),n("p",[n("strong",[s._v("兼容到IE5")])]),s._v(" "),n("p",[s._v("一个或多个元素添加到数组的末尾，并返回该数组的新长度")]),s._v(" "),n("h3",{attrs:{id:"array-unshift"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-unshift","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.unshift()")]),s._v(" "),n("p",[n("strong",[s._v("兼容到IE5")])]),s._v(" "),n("p",[s._v("将一个或多个元素添加到数组的开头，并返回该数组的新长度")]),s._v(" "),n("h3",{attrs:{id:"array-slice"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-slice","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.slice()")]),s._v(" "),n("p",[s._v("返回一个新的数组对象，这一对象是一个由 begin和 end（不包括end）决定的原数组的浅拷贝。原始数组"),n("strong",[s._v("不会被改变")])]),s._v(" "),n("p",[n("strong",[s._v("语法")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("arr.slice();\n// [0, end]\n\narr.slice(begin);\n// [begin, end]\n\narr.slice(begin, end);\n// [begin, end)\n\n参数\nbegin\n1.从该索引处开始提取原数组中的元素（从0开始）。\n2.如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取，slice(-2)表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。\n3.如果省略 begin，则 slice 从索引 0 开始。\nend\n1.在该索引处结束提取原数组元素（从0开始）。slice会提取原数组中索引从 begin 到 end 的所有元素（包含begin，但不包含end）。\nslice(1,4) 提取原数组中的第二个元素开始直到第四个元素的所有元素 （索引为 1, 2, 3的元素）。\n2.如果该参数为负数， 则它表示在原数组中的倒数第几个元素结束抽取。 slice(-2,-1)表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。\n3.如果 end 被省略，则slice 会一直提取到原数组末尾。\n4.如果 end 大于数组长度，slice 也会一直提取到原数组末尾。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("h3",{attrs:{id:"array-splice"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-splice","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.splice()")]),s._v(" "),n("p",[s._v("通过删除或替换现有元素来修改数组,并以数组形式返回被修改的内容。此方法会"),n("strong",[s._v("改变原数组")]),s._v("。\n"),n("strong",[s._v("语法")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("array.splice(start[, deleteCount[, item1[, item2[, ...]]]])\n\n//参数\nstart​\n  指定修改的开始位置（从0计数）。如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从-1计数）；如果负数的绝对值大于数组的长度，则表示开始位置为第0位。\ndeleteCount 可选\n  整数，表示要移除的数组元素的个数。\n  如果 deleteCount 大于 start 之后的元素的总数，则从 start 后面的元素都将被删除（含第 start 位）。\n  如果 deleteCount 被省略，则其相当于 array.length - start。\n  如果 deleteCount 被省略了，或者它的值大于等于array.length - start(也就是说，如果它大于或者等于start之后的所有元素的数量)，那么start之后数组的所有元素都会被删除。\n  如果 deleteCount 是 0 或者负数，则不移除元素。这种情况下，至少应添加一个新元素。\n  item1, item2, ... 可选\n  要添加进数组的元素,从start 位置开始。如果不指定，则 splice() 将只删除数组元素。\n返回值\n  由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h3",{attrs:{id:"array-reverse"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-reverse","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.reverse()")]),s._v(" "),n("p",[n("strong",[s._v("兼容到IE5")])]),s._v(" "),n("p",[s._v("将数组中元素的位置颠倒,并返回该数组。该方法会改变原数组。")]),s._v(" "),n("h3",{attrs:{id:"array-sort"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-sort","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.sort()")]),s._v(" "),n("p",[s._v("用原地算法对数组的元素进行排序，并返回数组。排序算法现在是稳定的。默认排序顺序是根据字符串Unicode码点。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("语法：arr.sort([compareFunction])\ncompareFunction 可选\n用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的各个字符的Unicode位点进行排序。\nfirstEl\n第一个用于比较的元素。\nsecondEl\n第二个用于比较的元素。\n返回值：\n排序后的数组。请注意，数组已原地排序，并且不进行复制。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[n("strong",[s._v("注意")]),s._v('：1.由于它取决于具体实现，因此无法保证排序的时间和空间复杂性\n2.如果没有指明 compareFunction ，那么元素会按照转换为的字符串的诸个字符的Unicode位点进行排序。例如 "Banana" 会被排列到 "cherry" 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 compareFunction），比较的数字会先被转换为字符串，所以在Unicode顺序上 "80" 要比 "9" 要靠前。')]),s._v(" "),n("p",[s._v("如果指明了 compareFunction ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：")]),s._v(" "),n("p",[s._v("如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；\n如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；\n如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。\ncompareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。")]),s._v(" "),n("h3",{attrs:{id:"array-tolocalestring"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-tolocalestring","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.toLocaleString()")]),s._v(" "),n("p",[s._v('返回一个字符串表示数组中的元素。数组中的元素将使用各自的 toLocaleString 方法转成字符串，这些字符串将使用一个特定语言环境的字符串（例如一个逗号 ","）隔开。')]),s._v(" "),n("p",[n("strong",[s._v("语法")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//参数\nlocales 可选\n带有BCP 47语言标记的字符串或字符串数组，关于locales参数的形式与解释，请看Intl页面。\noptions 可选\n一个可配置属性的对象，对于数字 Number.prototype.toLocaleString()，对于日期Date.prototype.toLocaleString().\n\n数组中的元素将会使用各自的 toLocaleString 方法\n\nvar prices = ['￥7', 500, 8123, 12];\nprices.toLocaleString('ja-JP', { style: 'currency', currency: 'JPY' });\n\n// \"￥7,￥500,￥8,123,￥12\"\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h3",{attrs:{id:"array-tostring"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-tostring","aria-hidden":"true"}},[s._v("#")]),s._v(" Array.toString")]),s._v(" "),n("p",[s._v("返回一个字符串，表示指定的数组及其元素。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("[1, 2, 'a', '1a'].toString()   //1,2,a,1a")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"})])])}),[],!1,null,null,null);a.default=r.exports}}]);