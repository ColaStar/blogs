(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{137:function(t,_,v){"use strict";v.r(_);var a=v(0),r=Object(a.a)({},function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"数据结构与算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据结构与算法")]),t._v(" "),v("p",[t._v("数据结构和算法是程序员的基本功，值得每一个程序员好好学习。数据结构表示计算机存储数据的方式，算法是完成某个特定任务的过程。")]),t._v(" "),v("ul",[v("li",[t._v("数据结构")]),t._v(" "),v("li",[t._v("算法")]),t._v(" "),v("li",[t._v("前端中的数据结构和算法\n"),v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%BD%93%E7%B3%BB%E5%9B%BE.png",alt:""}})])]),t._v(" "),v("h2",{attrs:{id:"什么是数据结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是数据结构","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是数据结构")]),t._v(" "),v("p",[t._v("数据结构起源于程序设计，是用计算机来存储、组织数据的方式。数据结\n构不是使我们学会编码，而是为我们提供一种编程的思想，具有更好的思路。")]),t._v(" "),v("ul",[v("li",[t._v("广义的说法:数据结构 = 数据存储 + 算法")]),t._v(" "),v("li",[t._v("狭义的说法:数据结构 = 数据的存储;")])]),t._v(" "),v("h3",{attrs:{id:"数据结构中的概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据结构中的概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据结构中的概念")]),t._v(" "),v("ul",[v("li",[t._v("数据：统称")]),t._v(" "),v("li",[t._v("数据元素：相当于是视频文件")]),t._v(" "),v("li",[t._v("数据项：相当于视频的每一帧")]),t._v(" "),v("li",[t._v("数据对象：相当于像素点")]),t._v(" "),v("li",[t._v("数据结构：数据元素相互之间")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E7%AE%97%E6%B3%951.png",alt:""}})]),t._v(" "),v("h2",{attrs:{id:"数据结构分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据结构分类","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据结构分类")]),t._v(" "),v("p",[t._v("在计算机科学中，数据结构（data structure）是计算机中存储、组织数据的方式。通常我们可以从逻辑结构和存储结构这两个维度进行分类。")]),t._v(" "),v("ul",[v("li",[t._v("逻辑结构:反映数据元素之间的逻辑关系。在设计层面上讲,是面向问题的；")]),t._v(" "),v("li",[t._v("存储结构:数据结构在计算机中的表示。在实现层面上讲,面向计算机的，其基本的目标就是将数据及其逻辑关系存储到计算机的内存中；")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E7%AE%97%E6%B3%952.png",alt:""}})]),t._v(" "),v("h2",{attrs:{id:"按逻辑结构分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#按逻辑结构分类","aria-hidden":"true"}},[t._v("#")]),t._v(" 按逻辑结构分类")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("集合（无逻辑关系）")])]),t._v(" "),v("li",[v("p",[t._v("线性结构（线性表）")]),t._v(" "),v("ul",[v("li",[t._v("一维数组。")]),t._v(" "),v("li",[t._v("队列。")]),t._v(" "),v("li",[t._v("栈。\n数据结构中的元素存在"),v("strong",[t._v("一对一")]),t._v("的相互关系；打个比方，我要高考了，但是我数学不好，所以我请了一个数学老师给我单独补课，并且规定在我补课期间，该数学老师不能跟其他人补课，那么我和这个数学老师就是一对一的关系，我们之间的关系就是他跟我补课。还比如排队，每列只站一个人，每列总共十个人，那么他们每个人之间有先后关系，但是都是"),v("strong",[t._v("一对一")]),t._v("的先后关系。像内存就属于线性结构。他可以使用一元一次方程表示，是连续的，而且前后石油依赖关系的，前后只能一个")])])]),t._v(" "),v("li",[v("p",[t._v("非线性结构。")]),t._v(" "),v("ul",[v("li",[t._v("树。\n数据结构中的元素存在"),v("strong",[t._v("一对多")]),t._v("的相互关系；比如，一个数学老师给两个或者多个学生补课，那么老师和学生之间就是一对多的关系。")]),t._v(" "),v("li",[t._v("图。\n数据结构中的元素存在"),v("strong",[t._v("多对多")]),t._v("的相互关系。\n比如我们的交通网，长沙有n条高速公路到达上海，同时上海也有k条高速公路到达长沙，长沙到上海是一对三n的关系，上海到长沙也是一对k的关系，所以长沙和上海是多对多的关系。")]),t._v(" "),v("li",[t._v("多维数组。")])])])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84%E5%9B%BE%E8%A7%A3.png",alt:""}})]),t._v(" "),v("h3",{attrs:{id:"集合"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集合","aria-hidden":"true"}},[t._v("#")]),t._v(" 集合")]),t._v(" "),v("p",[t._v("数据结构中的集合关系就类似于数学中的集合。")]),t._v(" "),v("ul",[v("li",[t._v("集合中的数据成员是无序的。")]),t._v(" "),v("li",[t._v("每个数据成员在集合中不能重复，仅且只出现一次。\n"),v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E9%9B%86%E5%90%88.png",alt:""}})])]),t._v(" "),v("p",[t._v("例子：数据结构中的元素之间除了“同属一个集合” 的相互关系外，别无其他关系。打个比方，我有一个篮子，篮子里面放了一个苹果，一个香蕉，一个梨子。这三种水果除了放在一个篮子里面，他们没有其它联系。这篮子里三种水果就属于一个集合，他们老死不相往来。JS中的Set其实就是一种集合。")]),t._v(" "),v("h3",{attrs:{id:"线性结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线性结构","aria-hidden":"true"}},[t._v("#")]),t._v(" 线性结构")]),t._v(" "),v("p",[t._v("线性结构中的数据元素之间是"),v("strong",[t._v("一对一")]),t._v("的关系。也就是数据元素一个连接一个\n地排列。")]),t._v(" "),v("ul",[v("li",[t._v("用来存放特定的某一个类型的元素")]),t._v(" "),v("li",[t._v("物理结构为顺序表（原生数组）和链表（数据在内存中表示）\n")])]),t._v(" "),v("blockquote",[v("p",[t._v("线性表\n对于线性表来说，第一个元素叫首元素，最后一个元素叫尾元素，除了首元素与尾元素外，中间的元素前边都有一个元素，叫前驱元素，后边也有一个元素叫后继元素，尾元素只有后继元素，首元素只有前驱元素。")])]),t._v(" "),v("p",[t._v("注意⚠️：Array可能是顺序表也可能是链表，链表维护是动态的，需要多大申请多大内存\n"),v("strong",[t._v("线性表的一些操作")])]),t._v(" "),v("ul",[v("li",[t._v("可以对线性表进行创建、添加、删除、查找，遍历、读、销毁线性表\n链表\n"),v("strong",[t._v("线性表优点：")])]),t._v(" "),v("li",[t._v("插入删除速度快（因为有next指针指向其下一个节点，通过改变指针的指向可以方便的增加删除元素）")]),t._v(" "),v("li",[t._v("内存利用率高，不会浪费内存（可以使用内存中细小的不连续空间（大于node节点的大小），并且在需要空间的时候才创建空间）")]),t._v(" "),v("li",[t._v("大小没有固定，拓展很灵活。")])]),t._v(" "),v("p",[v("strong",[t._v("线性表缺点：")])]),t._v(" "),v("ul",[v("li",[t._v("不能随机查找，必须从第一个开始遍历，查找效率低")])]),t._v(" "),v("blockquote",[v("p",[t._v("一维数组\n"),v("strong",[t._v("特点")]),t._v("：")])]),t._v(" "),v("ul",[v("li",[t._v("1.静态分配内存（固定需要向内存申请的位置，而且需要给预留位置，这样可能出现：你额外请求的位置可能根本用不上，这将浪费内存。你没有使用，别人也用不了。）")]),t._v(" "),v("li",[t._v("2.在内存中连续（当需要添加元素的时候，如果申请的位置占满了，就需要转移）")]),t._v(" "),v("li",[t._v("3.查找快，数组利用下标定位，时间复杂度为O(1)")]),t._v(" "),v("li",[t._v("4.数组插入或删除元素的时间复杂度O(n)（删除时必须要将后面的元素都向前移动，插入时必须将后面的元素都向后移动。如果空间不足，还要重新复制新的空间。）")])]),t._v(" "),v("p",[t._v("以下来自算法图解\n"),v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png",alt:""}}),t._v(" "),v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%841.png",alt:""}})]),t._v(" "),v("p",[v("strong",[t._v("优势：")]),t._v("\n数组，则很方便读取每一个元素的内容。因为知道第一个，就知道了所有的地址。它们是连在一起的。\n"),v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842.png",alt:""}})]),t._v(" "),v("blockquote",[v("p",[t._v("链表")])]),t._v(" "),v("p",[v("strong",[t._v("特点：")])]),t._v(" "),v("ul",[v("li",[t._v("1.动态分配内存")]),t._v(" "),v("li",[t._v("2.在内存中是不连续的（内存利用率高，不会浪费内存（可以使用内存中细小的不连续空间（大于node节点的大小），并且在需要空间的时候才创建空间）")]),t._v(" "),v("li",[t._v("3.链表定位元素")]),t._v(" "),v("li",[t._v("4.大小没有固定，拓展很灵活。")])]),t._v(" "),v("p",[v("strong",[t._v("缺点：")])]),t._v(" "),v("p",[t._v("不能随机查找，必须从第一个开始遍历，查找效率低")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E9%93%BE%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png",alt:""}}),t._v(" "),v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E9%93%BE%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%841.png",alt:""}})]),t._v(" "),v("p",[t._v("链表插入元素只需要修改它前面的那个元素指向的地址就可以了。\n链表删除元素也是只需要修改它前面的那个元素指向的地址就可以了。")]),t._v(" "),v("p",[v("strong",[t._v("分类")]),t._v("：链表分为单向链表和双向链表，")]),t._v(" "),v("p",[t._v("单链表与双链表的结构图如下：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84%E5%9B%BE.png",alt:"单链表"}})]),t._v(" "),v("p",[t._v("只能朝一个方向进行遍历（接着后继元素一个一个的遍历，结构相对简单只有后继指针，操作时只需要断一个）")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84.png",alt:"双向链表"}})]),t._v(" "),v("p",[t._v("可以从俩个方向遍历，因为有俩个指针，操作起来麻烦，需要操作俩次")]),t._v(" "),v("blockquote",[v("p",[t._v("数组与链表时间复杂度比较")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E6%95%B0%E7%BB%84%E4%B8%8E%E9%93%BE%E8%A1%A8%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%AF%94%E8%BE%83.png",alt:""}})]),t._v(" "),v("blockquote",[v("p",[t._v("一些常见的问题\n"),v("strong",[t._v("为什么市面上单链表应用比多链表应用广泛一些呢？")])])]),t._v(" "),v("p",[t._v("在时间复杂度上来考虑，如果进行查询的话，双链表可以通过二分法查找（从首尾元素开始遍历），时间复杂度是log(n)而单链表只能朝一个方向遍历所以时间复杂度n，事实证明双链表的时间复杂度低，但是双链表每个节点都会比单链表多一个指针（这个指针的length在32位系统中是4字节，在64位系统中是8个字节），占用空间也就大了，这时设计者就会采用以时间换空间的做法，这时一种工程总体上的衡量。")]),t._v(" "),v("p",[v("strong",[t._v("总结：")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("插入删除多，读取少。用链表。")])]),t._v(" "),v("li",[v("p",[t._v("插入删除少，读取多。用数组。")])])]),t._v(" "),v("p",[t._v("接下来我们看一下线性结构的衍生结构")]),t._v(" "),v("h4",{attrs:{id:"栈"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#栈","aria-hidden":"true"}},[t._v("#")]),t._v(" 栈")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E6%A0%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png",alt:""}}),t._v(" "),v("strong",[t._v("栈")]),t._v("是一种只在一端进行删除、插入操作的线性表，\n"),v("strong",[t._v("栈顶")]),t._v("进行删除、插入的一端，\n"),v("strong",[t._v("栈底")]),t._v("不能进行删除、插入的那一端，")]),t._v(" "),v("blockquote",[v("p",[t._v("栈是一种先入后出表、LIFO(Last In First Out)")])]),t._v(" "),v("h5",{attrs:{id:"栈的几种操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#栈的几种操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 栈的几种操作")]),t._v(" "),v("p",[t._v("其实也是一个栈的生命周期")]),t._v(" "),v("ul",[v("li",[t._v("1.创建栈结构（空栈）：没有东西的栈（这个时候栈顶就是栈底）")]),t._v(" "),v("li",[t._v("2.进栈：在栈顶压入元素（只压一个元素，这个时候栈顶就是栈底）")]),t._v(" "),v("li",[t._v("3.退栈：删除或弹出栈顶的元素")]),t._v(" "),v("li",[t._v("4.读取栈顶：只看看栈顶的东西，不拿，相当与你舔一舔（有点邪恶了。。）")]),t._v(" "),v("li",[t._v("5.清空栈")]),t._v(" "),v("li",[t._v("6.销毁栈")])]),t._v(" "),v("h5",{attrs:{id:"栈应用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#栈应用","aria-hidden":"true"}},[t._v("#")]),t._v(" 栈应用")]),t._v(" "),v("p",[t._v("下边举几个例子：")]),t._v(" "),v("ul",[v("li",[t._v("1."),v("strong",[t._v("解决括号匹配检查")]),t._v("：检查html标签是否闭合或者简单点就是检查js里括号有没有闭合，具体过程就是查到左括号入栈，查到右括号出栈，最后的结果应该是空栈。")]),t._v(" "),v("li",[t._v("2."),v("strong",[t._v("浏览器的后退或编辑器的undo功能")])])]),t._v(" "),v("h4",{attrs:{id:"队列"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#队列","aria-hidden":"true"}},[t._v("#")]),t._v(" 队列")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E9%98%9F%E5%88%97%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png",alt:""}})]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("队列")]),t._v("是一种只允许在表的一端进行插入，而在另一端删除的线性表")]),t._v(" "),v("li",[v("strong",[t._v("队头")]),t._v("：允许删除的一端")]),t._v(" "),v("li",[v("strong",[t._v("队尾")]),t._v("：允许插入的一端先进先出表")])]),t._v(" "),v("blockquote",[v("p",[t._v("队列是一种先入先出表、FIFO(First In First Out)")])]),t._v(" "),v("h5",{attrs:{id:"队列的几种操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#队列的几种操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 队列的几种操作")]),t._v(" "),v("p",[t._v("其实也是一个队列的生命周期")]),t._v(" "),v("ul",[v("li",[t._v("创建一个空队列")]),t._v(" "),v("li",[t._v("判断队列是否是空队列")]),t._v(" "),v("li",[t._v("入队：往队列中插入元素")]),t._v(" "),v("li",[t._v("出队：从队列中删除元素")]),t._v(" "),v("li",[t._v("求队列头部的值")])]),t._v(" "),v("blockquote",[v("p",[t._v("注意⚠️")])]),t._v(" "),v("ul",[v("li",[t._v("队尾的位置一直在变")]),t._v(" "),v("li",[t._v("只有一个元素的队列或者空队列队头就是队尾。")]),t._v(" "),v("li",[t._v("有急事的元素可以优先出队列，这是一个可以插队的队列叫"),v("code",[t._v("优先队列")])]),t._v(" "),v("li",[t._v("环形队列：无队头与队尾，需要指定，最好用链式结构实现，用顺序表结构也可以实现，但是维护起来麻烦，因为队头队尾一直在变。")])]),t._v(" "),v("h5",{attrs:{id:"队列的一些应用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#队列的一些应用","aria-hidden":"true"}},[t._v("#")]),t._v(" 队列的一些应用")]),t._v(" "),v("ul",[v("li",[t._v("排队")]),t._v(" "),v("li",[t._v("消息队列")]),t._v(" "),v("li",[t._v("任务队列")]),t._v(" "),v("li",[t._v("维护打印机任务")])]),t._v(" "),v("h4",{attrs:{id:"串"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#串","aria-hidden":"true"}},[t._v("#")]),t._v(" 串")]),t._v(" "),v("p",[t._v("stream（流）")]),t._v(" "),v("h3",{attrs:{id:"树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#树","aria-hidden":"true"}},[t._v("#")]),t._v(" 树")]),t._v(" "),v("h4",{attrs:{id:"基本概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("树")]),t._v("是由结点或顶点和边组成的(可能是非线性的)且不存在着任何环的一种数据结构。没有结点的树称为空(null或empty)树。一棵非空的树包括一个根结点，还(很可能)有多个附加结点，所有结点构成一个多级分层结构。简单点说他就是一个由若干个有限节点组成的一个具有层次关系的集合")])]),t._v(" "),v("p",[t._v("他是一种操作效率比较高的的数据结构，是一个一对多的关系，和家谱一样")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("节点")]),t._v(":树的每个元素；")]),t._v(" "),v("li",[v("code",[t._v("父节点")]),t._v("：有子节点的节点是子节点的父节点")]),t._v(" "),v("li",[v("code",[t._v("根节点")]),t._v("：最上边的父节点")]),t._v(" "),v("li",[v("code",[t._v("边或权")]),t._v(":任意两个节点是被边连起来的；")]),t._v(" "),v("li",[v("code",[t._v("路径")]),t._v(":任意两个节点是被边连起来的所有边组成路径；")]),t._v(" "),v("li",[v("code",[t._v("叶子节点")]),t._v(":没有分叉的节点")]),t._v(" "),v("li",[v("code",[t._v("兄弟节点")]),t._v("：兄弟节点的前提他们有一个共同的父节点")]),t._v(" "),v("li",[v("code",[t._v("度")]),t._v("：有几个分叉就是几度，度为0的节点就是叶子节点")]),t._v(" "),v("li",[v("code",[t._v("深")]),t._v(":有n层就是n-1深，如果只有一个节点深就为0")]),t._v(" "),v("li",[v("code",[t._v("熵")]),t._v(":信息的混乱程度。文本格式较有序，好压，png就不好压")])]),t._v(" "),v("p",[t._v("注意⚠️")]),t._v(" "),v("ul",[v("li",[t._v("一棵树中每两个点之间都有且只有一条路")]),t._v(" "),v("li",[t._v("有N个节点就有N-1条边")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E6%A0%91%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png",alt:""}})]),t._v(" "),v("h4",{attrs:{id:"如何分辨是不是树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何分辨是不是树","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何分辨是不是树")]),t._v(" "),v("ul",[v("li",[t._v("单个节点可以看成树；")]),t._v(" "),v("li",[t._v("可以有空树")]),t._v(" "),v("li",[t._v("树不能形成环路，形成环路就称为图了\n"),v("img",{attrs:{src:"%E5%88%86%E8%BE%A8%E6%98%AF%E4%B8%8D%E6%98%AF%E6%A0%91.png",alt:""}})])]),t._v(" "),v("h4",{attrs:{id:"遍历树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#遍历树","aria-hidden":"true"}},[t._v("#")]),t._v(" 遍历树")]),t._v(" "),v("p",[t._v("按照某种规则，不重复地访问某种树的所有节点。我们可以分为")]),t._v(" "),v("ul",[v("li",[t._v("深度优先遍历\n"),v("ul",[v("li",[t._v("先序遍历（深度优先）")]),t._v(" "),v("li",[t._v("中序遍历（深度优先）")]),t._v(" "),v("li",[t._v("后序遍历（深度优先）")])])]),t._v(" "),v("li",[t._v("广度优先遍历（层序遍历）")])]),t._v(" "),v("blockquote",[v("p",[t._v("核心")])]),t._v(" "),v("ul",[v("li",[t._v("按照递归的思路")]),t._v(" "),v("li",[t._v("什么时候遍历到根节点")])]),t._v(" "),v("blockquote",[v("p",[t._v("先序遍历\n即根-左-右遍历，对于给定的二叉树根，从根节点开始。然后遍历左子节点i，如果i有左子节点一直递归遍历到最左边的叶子节点，而后遍历其右子节点，随着递归的逐渐出栈，遍历到最右边的叶子节点，最终完成遍历。\n"),v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86.png",alt:""}}),t._v(" "),v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%861.png",alt:""}})])]),t._v(" "),v("p",[t._v("从根节点开始。")]),t._v(" "),v("blockquote",[v("p",[t._v("中序遍历")])]),t._v(" "),v("p",[t._v("即左-根-右遍历，对于给定的二叉树根，从最左边的叶子节点开始。然后父节点i，再遍历i的右子节点，在遍历i（i 必然是其父节点的左子节点）的父节点，再遍历父节点的右子节点，随后遍历父节点的父节点，直到遍历到根节点后，遍历右子树的最左边的节点，随着递归的逐渐出栈，遍历到最右边的叶子节点，最终完成遍历。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.png",alt:""}}),t._v(" "),v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%861.png",alt:""}})]),t._v(" "),v("blockquote",[v("p",[t._v("后序遍历\n从最左边的叶子节点开始。\n即左-右-根遍历，对于给定的二叉树根，从最左边的叶子节点开始，然后遍历其兄弟节点，然后遍历其父节点i，再遍历i的右子节点，再遍历i的父节点，直到遍历到根节点的左子节点（即根节点的左子节点遍历完后），再遍历右子树的最小层的最左边的节点，随着递归的逐渐出栈，遍历到根节点，最终完成遍历。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.png",alt:""}}),t._v(" "),v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%861.png",alt:""}})]),t._v(" "),v("blockquote",[v("p",[t._v("层序遍历（广度优先遍历）\n对于给定的二叉树根，从根节点开始，遍历下一层的所有节点从左往右，然后又遍历下一层，随着递归的逐渐出栈，遍历到最右边的叶子节点，最终完成遍历。\n"),v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.png",alt:""}}),t._v("\n应用：react的domdiff就是用的广度优先遍历，时间复杂度是O(n),最多遍历到O(1),但是如果遍历围棋这种东西的话，千万不要用，需要遍历360！实在太多了，所以使用深度优先。")])]),t._v(" "),v("h4",{attrs:{id:"树的实现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#树的实现","aria-hidden":"true"}},[t._v("#")]),t._v(" 树的实现")]),t._v(" "),v("p",[t._v("通过链式实现，在储存的时候可以把树按照一种规则存到线性表里")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://raw.githubusercontent.com/ColaStar/static/master/images/https://blog.51cto.com/11134889/2140088",target:"_blank",rel:"noopener noreferrer"}},[t._v("通用树的实现"),v("OutboundLink")],1)]),t._v(" "),v("h4",{attrs:{id:"树的衍生"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#树的衍生","aria-hidden":"true"}},[t._v("#")]),t._v(" 树的衍生")]),t._v(" "),v("ul",[v("li",[t._v("无序树:树中任意节点的子结点之间没有顺序关系，这种树称为无序树,也称为自由树 ，")]),t._v(" "),v("li",[t._v("有序树（二叉查找树）:树中任意节点的子结点之间有顺序关系（缺点：有可能退化为线性链）\n1.任意节点左子树不为空,则左子树的值均小于根节点的值\n2.任意节点右子树不为空,则右子树的值均大于于根节点的值\n4.任意节点的左右子树也分别是二叉查找树\n3.没有键值相等的节点）")]),t._v(" "),v("li",[t._v("二叉树:每个节点最多含有两个子树的树称为二叉树")]),t._v(" "),v("li",[t._v("完全二叉树:除了最后一层，其它各层节点数都达到最大")]),t._v(" "),v("li",[t._v("满二叉树:每一层上的结点数都是最大结点数")]),t._v(" "),v("li",[t._v("霍夫曼树:带权路径最短的二叉树，也叫最优二叉树，一般用来减少程序整体运行时间的，讲权重大的放在前边。")])]),t._v(" "),v("p",[v("a",{attrs:{href:"https://www.jianshu.com/p/912357993486",target:"_blank",rel:"noopener noreferrer"}},[t._v("常用数据结构---树"),v("OutboundLink")],1)]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91.png",alt:"哈夫曼树(数字大小代表权重)"}})]),t._v(" "),v("h3",{attrs:{id:"图"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#图","aria-hidden":"true"}},[t._v("#")]),t._v(" 图")]),t._v(" "),v("p",[t._v("概念：\n在计算机科学里，一个图就是一些顶点的集合，这些顶点通过一系列边结对连接。它是一种多对多的关系，没有空图的概念。")]),t._v(" "),v("ul",[v("li",[v("code",[t._v("顶点")]),t._v("：代表对象")]),t._v(" "),v("li",[v("code",[t._v("边")]),t._v("：连接顶点与顶点，建立起对象之间的关系或关联")]),t._v(" "),v("li",[v("code",[t._v("权")])]),t._v(" "),v("li",[v("code",[t._v("有向图与无向图")]),t._v("：有向图就是按照一个方向走，无向图没有方向的概念。")])]),t._v(" "),v("h2",{attrs:{id:"按存储结构分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#按存储结构分类","aria-hidden":"true"}},[t._v("#")]),t._v(" 按存储结构分类")]),t._v(" "),v("p",[v("strong",[t._v("存储结构分四类")]),t._v("：顺序存储、链接存储、索引存储 和 散列存储。")]),t._v(" "),v("ul",[v("li",[t._v("顺序结构和链接结构适用在内存结构中。")]),t._v(" "),v("li",[t._v("索引结构和散列结构适用在外存与内存交互结构。")])]),t._v(" "),v("h3",{attrs:{id:"顺序存储"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#顺序存储","aria-hidden":"true"}},[t._v("#")]),t._v(" 顺序存储")]),t._v(" "),v("p",[t._v("在计算机中用一组地址连续的存储单元依次存储线性表的各个数据元素,称作线性表的顺序存储结构。就比如一维数组")]),t._v(" "),v("blockquote",[v("p",[t._v("特点：")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("1、随机存取表中元素(有下标)。")])]),t._v(" "),v("li",[v("p",[t._v("2、插入和删除操作需要移动元素。\n"),v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84.png",alt:""}})])])]),t._v(" "),v("h3",{attrs:{id:"链接存储"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#链接存储","aria-hidden":"true"}},[t._v("#")]),t._v(" 链接存储")]),t._v(" "),v("p",[t._v("在计算机中用一组任意的存储单元存储线性表的数据元素(这组存储单元可以是连续的,也可以是不连续的)。它不要求逻辑上相邻的元素在物理位置上也相邻.因此它没有顺序存储结构所具有的弱点,但也同时失去了顺序表可随机存取的优点。(像链表一样)")]),t._v(" "),v("blockquote",[v("p",[t._v("特点：")])]),t._v(" "),v("ul",[v("li",[t._v("1、比顺序存储结构的存储密度小 (每个节点都由数据域和指针域组成，所以相同空间内假设全存满的话顺序比链式存储更多)。")]),t._v(" "),v("li",[t._v("2、逻辑上相邻的节点物理上不必相邻。")]),t._v(" "),v("li",[t._v("3、插入、删除灵活 (不必移动节点，只要改变节点中的指针)。")]),t._v(" "),v("li",[t._v("4、查找结点时链式存储要比顺序存储慢。")]),t._v(" "),v("li",[t._v("5、每个结点是由数据域和指针域组成。\n"),v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E9%93%BE%E6%8E%A5%E5%AD%98%E5%82%A8.png",alt:""}})])]),t._v(" "),v("h3",{attrs:{id:"索引存储"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#索引存储","aria-hidden":"true"}},[t._v("#")]),t._v(" 索引存储")]),t._v(" "),v("p",[t._v("除建立存储结点信息外，还建立附加的索引表来标识结点的地址。索引表由若干索引项组成。")]),t._v(" "),v("p",[t._v("除建立存储结点信息外，还建立附加的索引表来标识结点的地址。索引表由若干索引项组成，如果每个节点在索引表中都有一个索引项，则该索引表就被称为稠密索引。若一组节点在索引表中只对应于一个索引项，则该索引表就成为稀疏索引。索引项的一般形式一般是关键字、地址。在搜索引擎中，需要按某些关键字的值来查找记录，为此可以按关键字建立索引，这种索引就叫做倒排索引(因为是根据关键词来找链接地址，而不是通过某个链接搜索关键词，这里反过来了，所以称为倒排索引)，带有倒排索引的文件就叫做倒排索引文件，又称为倒排文件。倒排文件可以实现快速检索，这种索引存储方法是目前搜索引擎最常用的存储方法。")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E7%B4%A2%E5%BC%95%E5%AD%98%E5%82%A8.png",alt:""}})]),t._v(" "),v("p",[t._v("存储单词的过程：先在某个地址空间存储单词，然后把该单词的关键词和存储地址存到附加的索引表。")]),t._v(" "),v("p",[t._v("查找某个单词的过程：先根据关键词找索引表，得到数据存储地址。然后再通过存储地址得到数据。")]),t._v(" "),v("blockquote",[v("p",[t._v("特点：")])]),t._v(" "),v("p",[t._v("索引存储结构是用结点的索引号来确定结点存储地址，其优点是检索速度快，缺点是增加了附加的索引表,会占用较多的存储空间。")]),t._v(" "),v("h3",{attrs:{id:"散列存储"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#散列存储","aria-hidden":"true"}},[t._v("#")]),t._v(" 散列存储")]),t._v(" "),v("p",[t._v("散列存储，又称hash存储，是一种力图将数据元素的存储位置与关键码之间建立确定对应关系的查找技术。")]),t._v(" "),v("p",[t._v("散列法存储的"),v("strong",[t._v("基本思想")]),t._v("是：由节点的关键码值。\n散列法存储的基本思想是：它通过把关键码值映射到表中一个位置来访问记录(决定节点的存储地址)，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表,散列技术除了可以用于查找外，还可以用于存储。\n"),v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E6%95%A3%E5%88%97%E5%AD%98%E5%82%A8.png",alt:""}})]),t._v(" "),v("blockquote",[v("p",[t._v("特点：")])]),t._v(" "),v("p",[t._v("散列是数组存储方式的一种发展，相比数组，散列的数据访问速度要高于数组，因为可以依据存储数据的部分内容找到数据在数组中的存储位置，进而能够快速实现数据的访问，理想的散列访问速度是非常迅速的，而不像在数组中的遍历过程，采用存储数组中内容的部分元素作为映射函数的输入，映射函数的输出就是存储数据的位置，这样的访问速度就省去了遍历数组的实现，因此时间复杂度可以认为为O(1)，而数组遍历的时间复杂度为O(n)。")]),t._v(" "),v("h2",{attrs:{id:"什么是算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是算法","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是算法")]),t._v(" "),v("p",[t._v("算法（algorithm），在数学和计算机科学之中，为任何良定义的具体计算步骤的一个序列，常用于计算、数据处理和自动推理。精确而言，算法是一个表示为有限长列表的有效方法。算法应包含清晰定义的指令用于计算函数。")]),t._v(" "),v("ul",[v("li",[t._v("算法不是数学，但是可以用数学来描述")]),t._v(" "),v("li",[t._v("我们要做一件事情，这个过程本身就是算法")]),t._v(" "),v("li",[t._v("我们最常用的增删改查是算法的一部分")]),t._v(" "),v("li",[t._v("算法可以用自然语言、流程图、伪代码和计算机语言等手段来表示")]),t._v(" "),v("li",[t._v("在面向对象语言中，算法通常通过类的方法实现")])]),t._v(" "),v("h2",{attrs:{id:"算法的特征"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#算法的特征","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法的特征")]),t._v(" "),v("ul",[v("li",[t._v("有穷性:算法必须能在执行有限个步骤之后终止")]),t._v(" "),v("li",[t._v("确切性:每一步骤必须有确切的定义")]),t._v(" "),v("li",[t._v("输入项:有0个或多个输入，用来规定初始情况，所谓0个输入是指算法本身定出了 初始条件")]),t._v(" "),v("li",[t._v("输出项:有一个或多个输出，是对输入数据处理后的结果。没有输出的算法毫无意义")]),t._v(" "),v("li",[t._v("可行性:算法中执行的任何计算步骤都是可以被分解为基本的可执行的操作步，每个计算步都可以在有限时间内完成(也称之为有效性)。")])]),t._v(" "),v("h2",{attrs:{id:"算法分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#算法分类","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法分类")]),t._v(" "),v("p",[t._v("算法可以分为以下几类：")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("分治法")]),t._v(" "),v("ul",[v("li",[t._v("递归（式），将大问题分解成子问题（子问题相互独立，且与原问题相同）、合并（将子问题得解合并成原问题的解）。")])])]),t._v(" "),v("li",[v("p",[t._v("动态规划法")]),t._v(" "),v("ul",[v("li",[t._v("递归，记录已解决的子问题的答案，根据子问题求解原问题的解（子问题不独立）。")])])]),t._v(" "),v("li",[v("p",[t._v("贪心算法")]),t._v(" "),v("ul",[v("li",[t._v("局部最优，根据当前信息做选择。（花钱找钱）")])])]),t._v(" "),v("li",[v("p",[t._v("回溯法(暴力法)\n通用的解题法，解空间树（深度优先遍历），找出满足条件的所有解。")]),t._v(" "),v("ul",[v("li",[t._v("枚举算法")])])]),t._v(" "),v("li",[v("p",[t._v("分支界限法")]),t._v(" "),v("ul",[v("li",[t._v("解空间（广度优先、最小耗费优先）、界限函数（队列式、优先队列式）。")])])]),t._v(" "),v("li",[v("p",[t._v("概率算法")]),t._v(" "),v("ul",[v("li",[t._v("随机性选择，小概率错误（运行时间大幅减少），对同一问题求解两次，可能得到完全不同的解，且所需时间、结果可能会有相当大的差别。")])])]),t._v(" "),v("li",[v("p",[t._v("近似算法")]),t._v(" "),v("ul",[v("li",[t._v("求近似解，定义容错界。")])])])]),t._v(" "),v("p",[v("a",{attrs:{href:"https://www.cnblogs.com/panpanwelcome/p/5978526.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("算法分类"),v("OutboundLink")],1)]),t._v(" "),v("h2",{attrs:{id:"衡量算法的好坏"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#衡量算法的好坏","aria-hidden":"true"}},[t._v("#")]),t._v(" 衡量算法的好坏")]),t._v(" "),v("blockquote",[v("p",[t._v("时间复杂度\n简单点说就是描述了该算法的运行时间，一个算法的质量优劣将影响到算法乃至程序的效率。\n"),v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6.png",alt:""}})])]),t._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("O(1)，哈希查找。\nO(n)，单层循环。\nO(lgn)，二分法。将一个数据集分成两半，然后将分开的每一半再分成两半，依此类推。\nO(nlgn)，归并排序。将一个数据集分成两半，然后将分开的每一半再分成两半，依此类推，在此过程中同时遍历每一半数据。\nO(n²)，双重循环。\nO(n³)，三层循环。\nO(2^n)，穷举查找，检查所有子集。\nO(n!)，菲波那切数列。\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br"),v("span",{staticClass:"line-number"},[t._v("8")]),v("br")])]),v("p",[t._v("图形越陡数据规模越大\n从上图可以看出，常数阶是最好的，指数阶是最差的")]),t._v(" "),v("blockquote",[v("p",[t._v("空间复杂度\n简单点说就是用的内存多少，或cpu，也就是对一个算法在运行过程中临时占用存储空间大小的量度。\n正确性\n想要的结果是正确的\n可读性"),v("br"),t._v("\n让别人可以验证，可以看懂。\n健壮性")])]),t._v(" "),v("h2",{attrs:{id:"如何计算算法的复杂度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何计算算法的复杂度","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何计算算法的复杂度")]),t._v(" "),v("ul",[v("li",[t._v("随着问题规模 n 的不断增大，时间复杂度不断增大，算法的执行效率越 低。")]),t._v(" "),v("li",[t._v("一般做算法复杂度分析的时候，遵循下面的技巧: 有几重循环，一般来说一重就是O(n)，两重就是 O(n^2)，以此类推 如果有二分，则为O(logN)")]),t._v(" "),v("li",[t._v("保留最高项，去除常数项\n"),v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E8%AE%A1%E7%AE%97%E5%A4%8D%E6%9D%82%E5%BA%A6.png",alt:""}})])]),t._v(" "),v("h2",{attrs:{id:"基本算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本算法","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本算法")]),t._v(" "),v("ul",[v("li",[t._v("枚举")]),t._v(" "),v("li",[t._v("递归")]),t._v(" "),v("li",[t._v("基本排序")]),t._v(" "),v("li",[t._v("基本查找")])]),t._v(" "),v("h3",{attrs:{id:"枚举算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#枚举算法","aria-hidden":"true"}},[t._v("#")]),t._v(" 枚举算法")]),t._v(" "),v("blockquote",[v("p",[t._v("核心思想:")])]),t._v(" "),v("p",[t._v("枚举所有的可能。 本质:就是从所有候选答案中去搜索正确的解,使用该算法需要满足两个条件")]),t._v(" "),v("ul",[v("li",[t._v("(1)可预先确定候选答案的数量;")]),t._v(" "),v("li",[t._v("(2)候选答案的范围在求解之前必须有一个确定的集合。")])]),t._v(" "),v("blockquote",[v("p",[t._v("特点:\n枚举算法简单粗暴，暴力的枚举所有可能，尽可能地尝试所有的方法。\n速度可能很慢，却是我们最应该优先考虑的。\n实现最简单，并且得到的结果总是正确的。")])]),t._v(" "),v("h3",{attrs:{id:"递归算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#递归算法","aria-hidden":"true"}},[t._v("#")]),t._v(" 递归算法")]),t._v(" "),v("blockquote",[v("p",[t._v("核心思想:通过重复将问题分解为同类的子问题而解决问题的方法。\n特点:")])]),t._v(" "),v("ul",[v("li",[t._v("函数可以通过调用自身来进行递归")]),t._v(" "),v("li",[t._v("递归可以完全取代循环")])]),t._v(" "),v("blockquote",[v("p",[t._v("递归由下面两部分组成:")])]),t._v(" "),v("ul",[v("li",[t._v("(1)递归主体，就是要循环解决问题的代码")]),t._v(" "),v("li",[t._v("(2)递归的跳出条件，递归不能一直递归下去，需要完成一定条件后跳出")])]),t._v(" "),v("blockquote",[v("p",[t._v("排序算法\n"),v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.png",alt:""}}),t._v("\n查找算法\n"),v("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95.png",alt:""}})])]),t._v(" "),v("h2",{attrs:{id:"算法解题思路"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#算法解题思路","aria-hidden":"true"}},[t._v("#")]),t._v(" 算法解题思路")]),t._v(" "),v("p",[t._v("当我们在遇到一个算法的问题时，可以按照以下步骤进行思考，避免走弯路。")]),t._v(" "),v("ul",[v("li",[t._v("枚举法：先不考虑算法复杂度，先用枚举法（暴力法）完成需求。")]),t._v(" "),v("li",[t._v("想办法优化，例如猜生日算法：\n"),v("ul",[v("li",[t._v("穷举法，从 1 月 1 日开始比对，比对到 12 月 31 日。要比对 366 次。")]),t._v(" "),v("li",[t._v("优化 1：先比对 12 次月份，确定完月份，再比对日期，最多要比对 12 + 31 次。")]),t._v(" "),v("li",[t._v("优化 2：使用二分法，先比对 6 月是大是小，确认完月份以后，再用同样的方法比对日期。")])])]),t._v(" "),v("li",[t._v("递归算法\n"),v("ul",[v("li",[t._v("化繁为简：将一个大事情，分解成 1 步 1 步的小事情。")]),t._v(" "),v("li",[t._v("分而治之：把问题分成多个模块，一块一块的解决。")]),t._v(" "),v("li",[t._v("化虚为实：将不明白的业务，转换成我们熟悉的业务，先理清逻辑，然后再替换回去。")])])])]),t._v(" "),v("h2",{attrs:{id:"如何养成算法思维"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何养成算法思维","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何养成算法思维")]),t._v(" "),v("ul",[v("li",[t._v("化繁为简\n"),v("ul",[v("li",[t._v("很难在第一时间内得到正确的思路的，这时候可以尝试一种由简至繁的思路。首先把问题规模缩小到非常容易解答\n的地步。用来解决动态规划问题")])])]),t._v(" "),v("li",[t._v("分而治之\n"),v("ul",[v("li",[t._v("把问题分为两半，变成两个与原来问题同构的问题")]),t._v(" "),v("li",[t._v("当尝试这种思路时，其实只需要考虑两个问题:")]),t._v(" "),v("li",[t._v("1.一分为二以后，问题是否被简化了?")]),t._v(" "),v("li",[t._v("2.根据一分为二的两个问题的解，能否方便地得出整个问题的解?")])])]),t._v(" "),v("li",[t._v("化虚为实\n"),v("ul",[v("li",[t._v("使用另外一种形式进行替换")])])])])])},[],!1,null,null,null);_.default=r.exports}}]);