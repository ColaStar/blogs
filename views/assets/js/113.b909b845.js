(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{139:function(s,n,a){"use strict";a.r(n);var e=a(0),t=Object(e.a)({},function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"node-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js","aria-hidden":"true"}},[s._v("#")]),s._v(" node.js")]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"走进node-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#走进node-js","aria-hidden":"true"}},[s._v("#")]),s._v(" 走进node.js")]),s._v(" "),a("hr"),s._v(" "),a("ul",[a("li",[s._v("1.什么是nodejs？")]),s._v(" "),a("li",[s._v("2.为什么要用Nodejs?")]),s._v(" "),a("li",[s._v("3.Nodejs的优势?")]),s._v(" "),a("li",[s._v("4.学习node.js的前置知识?")]),s._v(" "),a("li",[s._v("5.相关的资源与学习资料?")])]),s._v(" "),a("blockquote",[a("p",[s._v("1.什么是nodejs？")])]),s._v(" "),a("p",[a("strong",[s._v("Node.js是一个基于Chrome JavaScript运行时建立的平台。用于方便地搭建响应速度快、易于扩展的网络应用。Node.js使用事件驱动，非阻塞I/O模型而得以轻量和高效。非常适合在分布式设备上运行的数据密集型的实时应用。")])]),s._v(" "),a("ul",[a("li",[s._v("Node.js本质是javascript的一个解析器")]),s._v(" "),a("li",[s._v("Node.js是JavaScript的一个运行环境")]),s._v(" "),a("li",[s._v("Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台")]),s._v(" "),a("li",[s._v("Node.js是一个服务器的程序,就是运行在服务端的 JavaScript")]),s._v(" "),a("li",[s._v("Node.js本身使用的是v8引擎")]),s._v(" "),a("li",[s._v("Node不是web服务器")])]),s._v(" "),a("blockquote",[a("p",[s._v("2.为什么要用Nodejs?")])]),s._v(" "),a("ul",[a("li",[s._v("为了提供高性能的Web服务")]),s._v(" "),a("li",[s._v("IO性能强大（输入输出强大，就是为了强大的IO而创建的）")]),s._v(" "),a("li",[s._v("事件处理机制完善")]),s._v(" "),a("li",[s._v("天然能够处理dom")]),s._v(" "),a("li",[s._v("社区非常活跃，生态圈日趋完善")])]),s._v(" "),a("blockquote",[a("p",[s._v("3.Nodejs的优势?")])]),s._v(" "),a("ul",[a("li",[s._v("处理大流量数据")]),s._v(" "),a("li",[s._v("适合实时交互的应用")]),s._v(" "),a("li",[s._v("完美的支持对象型的数据库（像mogodb）")]),s._v(" "),a("li",[s._v("异步处理大量的并发连接")])]),s._v(" "),a("blockquote",[a("p",[s._v("4.学习node.js的前置知识?")])]),s._v(" "),a("ul",[a("li",[s._v("Javascript")]),s._v(" "),a("li",[s._v("ES6")]),s._v(" "),a("li",[s._v("一些服务器方面的知识（http等）")]),s._v(" "),a("li",[s._v("最好在Linux系统下进行开发")])]),s._v(" "),a("blockquote",[a("p",[s._v("5.相关的资源与学习资料?")])]),s._v(" "),a("ul",[a("li",[s._v("官方网站")]),s._v(" "),a("li",[s._v("中文社区")]),s._v(" "),a("li",[s._v("手册")]),s._v(" "),a("li",[s._v("开源代码 issues")])]),s._v(" "),a("h2",{attrs:{id:"node-js入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js入门","aria-hidden":"true"}},[s._v("#")]),s._v(" Node.js入门")]),s._v(" "),a("hr"),s._v(" "),a("h4",{attrs:{id:"安装-node-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装-node-js","aria-hidden":"true"}},[s._v("#")]),s._v(" 安装  Node.js")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("LFS 长期支持的版本\n//安装后检测是否安装成功\nnode -v\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h4",{attrs:{id:"npm包管理器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm包管理器","aria-hidden":"true"}},[s._v("#")]),s._v(" Npm包管理器")]),s._v(" "),a("ul",[a("li",[s._v("1.允许用户从NPM服务器上下载别人写好的三方包到本地使用")]),s._v(" "),a("li",[s._v("2.允许用户从NPM服务器上下载并安装别人编写的命令行程序到本地使用")]),s._v(" "),a("li",[s._v("3.允许用户将自己编写好的包或命令行程序上传到NPM服务器供别人使用。")])]),s._v(" "),a("p",[s._v("CNPM是NPM在中国的NPM服务器"),a("br"),s._v("\n跟npm一样"),a("br"),s._v("\n通过npm i cnpm")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(" npm install -g cnpm --registry=https://registry.npm.taobao.org\n\n//使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm\n\n\n淘宝 NPM 镜像   http://npm.taobao.org/\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var http = require('http');\n\nhttp.createServer(function(req, res) {\n  res.writeHead(200, {\n    'Content-Type': 'text/plain'\n  });\n  res.send('Hello World\\n');\n}).listen(1337, \"127.0.0.1\");\n\nconsole.log('Server running at http://127.0.0.1:1337/')\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h4",{attrs:{id:"node-js-repl-交互式解释器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js-repl-交互式解释器","aria-hidden":"true"}},[s._v("#")]),s._v(" Node.js REPL(交互式解释器)")]),s._v(" "),a("p",[a("strong",[s._v("Node.js REPL(Read Eval Print Loop:交互式解释器) 表示一个电脑的环境，类似 Window 系统的终端或 Unix/Linux shell，我们可以在终端中输入命令，并接收系统的响应。")])]),s._v(" "),a("ul",[a("li",[s._v("常用的一些REPL的命令")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\nnode - 启动 Node 的终端\n\n//简单的表达式运算\n\n//可以使用变量\n\n//多行表达式会出现...符号，... 三个点的符号是系统自动生成的，你回车换行后即可。Node 会自动检测是否为连续的表达式。\n\nctrl + c - 退出当前终端。\n\nctrl + c 按下两次 - 退出 Node REPL。\n\nctrl + d - 退出 Node REPL.\n\n向上/向下 键 - 查看输入的历史命令\n\ntab 键 - 列出当前命令\n\n.help - 列出使用命令\n\n.break - 退出多行表达式\n\n.clear - 退出多行表达式\n\n.save filename - 保存当前的 Node REPL 会话到指定文件\n\n.load filename - 载入当前 Node REPL 会话的文件内容。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("h4",{attrs:{id:"npm的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm的使用","aria-hidden":"true"}},[s._v("#")]),s._v(" NPM的使用")]),s._v(" "),a("ul",[a("li",[s._v("查看")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm -v  # 查看NPM的版本\n\nnpm install <Module Name> # 安装模块\n\nnpm list -g  # 查看所有全局安装的模块\n\nnpm list grunt # 查看某个模块的版本号\n\nnpm ls  # 查看所有安装到 /node_modules/ 目录下的模块包\n\nnpm search express # 搜索模块\n\nnpm outdated # 检查包是否已经过时\n\nnpm view 模块名 dependencies # 查看某个包对于各种包的依赖关系\n\nnpm view 模块名 repository.url # 查看包的源文件地址\n\nnpm view 模块名 engines # 查看当前模块依赖的node最低版本号\n\nnpm view webpack version # 查看模块当前包版本\n\nnpm view 模块名 versions # 查看模块的历史版本和当前版本\n\nnpm view 模块名 # 查看一个模块的所有信息\n\nnpm list # 查看当前已经安装的模块\n\nnpm list --depth=0  //限制输入的模块层级\n\nnpm root -g # 查看全局的包的安装路径\n\nnpm info webpack  # 查看模块包信息\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])]),a("ul",[a("li",[s._v("安装更新与卸载模块")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm install express          # 本地安装\n\nnpm install express -g   # 全局安装\n\nnpm install express@latest  # 安装最新版本的npm包\n\nnpm install 模块名 模块名\t # 一次性安装多个\n \nnpm install 模块名 --save-dev # - 安装开发时依赖包\n\nnpm install 模块名 --save  # 安装运行时依赖包\n\nnpm uninstall express #卸载npm模块包\n\nnpm update 模块名 # 更新模块\n\nnpm update 模块名 # @版本号 更新到指定版本\n\nnpm update 模块名 # @latest\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("ul",[a("li",[s._v("发布")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm init # 创建package.json文件\n\nnpm adduser # npm 资源库中注册用户（使用邮箱注册）\n\nnpm publish # 发布模块到NPM官网\n\nnpm cache clear # 可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。\n\n使用npm unpublish <package>@<version> # 可以撤销发布自己发布过的某个版本代码。\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("ul",[a("li",[s._v("其他")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm rebuild 模块名 # 更改包内容后进行重建\n \nnpm help json # 访问package.json的字段文档\n \nnpm bugs 模块名 # 查看某个模块的bugs列表界面\n \nnpm repo 模块名 # 打开某个模块的仓库界面\n \nnpm docs 模块名 # 打开某个模块的文档\n  \nnpm home 模块名 # 打开某个模块的主页\n \nnpm prune # 清除未被使用到的模块\n\nnpm help # 可查看所有命令\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h4",{attrs:{id:"package-json-属性说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#package-json-属性说明","aria-hidden":"true"}},[s._v("#")]),s._v(" Package.json 属性说明")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("name - 包名。\n\nversion - 包的版本号。\n\ndescription - 包的描述。\n\nhomepage - 包的官网 url 。\n\nauthor - 包的作者姓名。\n\ncontributors - 包的其他贡献者姓名。\n\ndependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。\n\nrepository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。\n\nmain - main 字段指定了程序的主入口文件，require('moduleName') 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。\n\nkeywords - 关键字\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("h2",{attrs:{id:"node-js-回调函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js-回调函数","aria-hidden":"true"}},[s._v("#")]),s._v(" Node.js 回调函数")]),s._v(" "),a("hr"),s._v(" "),a("h4",{attrs:{id:"什么是回调？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是回调？","aria-hidden":"true"}},[s._v("#")]),s._v(" 什么是回调？")]),s._v(" "),a("ul",[a("li",[s._v("函数调用方式分为三类：同步调用、回调函数、异步调用。")]),s._v(" "),a("li",[s._v("回调是双向调用的")]),s._v(" "),a("li",[s._v("可以通过回调函数来实现回调")])]),s._v(" "),a("h4",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介","aria-hidden":"true"}},[s._v("#")]),s._v(" 简介")]),s._v(" "),a("p",[s._v("Node.js 异步编程的直接体现就是回调。")]),s._v(" "),a("p",[s._v("异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。")]),s._v(" "),a("p",[s._v("回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。")]),s._v(" "),a("p",[s._v("例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。")]),s._v(" "),a("h4",{attrs:{id:"阻塞与非阻塞"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻塞与非阻塞","aria-hidden":"true"}},[s._v("#")]),s._v(" 阻塞与非阻塞")]),s._v(" "),a("ul",[a("li",[s._v("阻塞与非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态。")]),s._v(" "),a("li",[s._v("阻塞就是做不完不准回来")]),s._v(" "),a("li",[s._v("非阻塞就是你先做，我先看看有其他事情没有，完了告诉我。")]),s._v(" "),a("li",[s._v("阻塞是按顺序执行的，而非阻塞是不需要按顺序的")])]),s._v(" "),a("blockquote",[a("p",[s._v("阻塞代码")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//做完一件事情才能做别的\nvar fs = require("fs")\n\nvar data = fs.readFileSync(\'data.text\');\n\nconsole.log(data.toString())//同步调用\nconsole.log("程序执行结束!")\n//输出  文件内容 程序执行结束\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("blockquote",[a("p",[s._v("非阻塞代码")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//一边读取文件，一边做其他事情\nvar fs = require(\"fs\")\n\nvar data = fs.readFile('data.text'，function(err,data){\n    if(err){\n        console.error('err')\n    }\n    console.log(data.toString())\n});//异步调用\nconsole.log('程序执行完毕')\n\n//输出\n//程序执行完毕   文件内容\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h2",{attrs:{id:"node-js-事件循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js-事件循环","aria-hidden":"true"}},[s._v("#")]),s._v(" Node.js 事件循环")]),s._v(" "),a("hr"),s._v(" "),a("ul",[a("li",[a("p",[s._v("Node.js 是单进程单线程应用程序，但是因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。")])]),s._v(" "),a("li",[a("p",[s._v("Node.js 几乎每一个 API 都是支持回调函数的。")])]),s._v(" "),a("li",[a("p",[s._v("Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。")])]),s._v(" "),a("li",[a("p",[s._v("Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.")])])]),s._v(" "),a("h4",{attrs:{id:"事件驱动模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件驱动模型","aria-hidden":"true"}},[s._v("#")]),s._v(" 事件驱动模型")]),s._v(" "),a("p",[s._v("Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。")]),s._v(" "),a("p",[s._v("当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。")]),s._v(" "),a("p",[s._v("这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）")]),s._v(" "),a("p",[s._v("在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。")]),s._v(" "),a("p",[a("a",{attrs:{"data-fancybox":"",title:"事件驱动模型",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/event_loop.jpg"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/event_loop.jpg",alt:"事件驱动模型"}})])]),s._v(" "),a("blockquote",[a("p",[s._v("事件处理代码流程")])]),s._v(" "),a("ul",[a("li",[s._v("2.引入events对象，创建eventEmitter对象")]),s._v(" "),a("li",[s._v("2.绑定事件处理程序")]),s._v(" "),a("li",[s._v("3.触发事件")])]),s._v(" "),a("h4",{attrs:{id:"事件与事件的绑定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件与事件的绑定","aria-hidden":"true"}},[s._v("#")]),s._v(" 事件与事件的绑定")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 引入 events 模块\nvar events = require('events');\n// 创建 eventEmitter 对象\nvar eventEmitter = new events.EventEmitter();\n\n// 创建事件处理程序\nvar connectHandler = function connected() {\n   console.log('连接成功。');\n  \n   // 触发 data_received 事件 \n   eventEmitter.emit('data_received');\n}\n\n// 绑定 connection 事件处理程序\neventEmitter.on('connection', connectHandler);\n \n// 使用匿名函数绑定 data_received 事件\neventEmitter.on('data_received', function(){\n   console.log('数据接收成功。');\n});\n\n// 触发 connection 事件 \neventEmitter.emit('connection');\n\nconsole.log(\"程序执行完毕。\");\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("h2",{attrs:{id:"node-js模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js模块化","aria-hidden":"true"}},[s._v("#")]),s._v(" Node.js模块化")]),s._v(" "),a("hr"),s._v(" "),a("blockquote",[a("p",[s._v("模块化的概念与意义")])]),s._v(" "),a("ul",[a("li",[s._v("1.Node.js的文件可以相互调用,Node.js提供了一个简单的模块系统")]),s._v(" "),a("li",[s._v("2.模块是Node.js应用程序的基本组成部分")]),s._v(" "),a("li",[s._v("3.文件和模块是一一对应的。一个Node.js文件就是一个模块。")]),s._v(" "),a("li",[s._v("4.这个文件可能是JavaScript代码，JSON代码或者编译后的C/C++的扩展")]),s._v(" "),a("li",[s._v("5.Node.js存在4类模块（原生模块和3种文件模块）\n"),a("a",{attrs:{"data-fancybox":"",title:"模块",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/nodejs-require.jpg"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/nodejs-require.jpg",alt:"模块"}})])])]),s._v(" "),a("blockquote",[a("p",[s._v("从文件模块缓存中加载")])]),s._v(" "),a("p",[s._v("尽管原生模块与文件模块的优先级不同，但是都会优先从文件模块的缓存中加载已经存在的模块。即各种的node_modules中查找查找顺序是从当前文件夹到根目录的node_modules")]),s._v(" "),a("blockquote",[a("p",[s._v("从原生模块加载")])]),s._v(" "),a("p",[s._v('原生模块的优先级仅次于文件模块缓存的优先级。require 方法在解析文件名之后，优先检查模块是否在原生模块列表中。以http模块为例，尽管在目录下存在一个 http/http.js/http.node/http.json 文件，require("http") 都不会从这些文件中加载，而是从原生模块中加载。')]),s._v(" "),a("p",[s._v("原生模块也有一个缓存区，同样也是优先从缓存区加载。如果缓存区没有被加载过，则调用原生模块的加载方式进行加载和执行。")]),s._v(" "),a("blockquote",[a("p",[s._v("从文件加载")])]),s._v(" "),a("p",[s._v("当文件模块缓存中不存在，而且不是原生模块的时候，Node.js 会解析 require 方法传入的参数，并从文件系统中加载实际的文件。")]),s._v(" "),a("ul",[a("li",[s._v("http、fs、path等，原生模块。")]),s._v(" "),a("li",[s._v("./mod或../mod，相对路径的文件模块。")]),s._v(" "),a("li",[s._v("/pathtomodule/mod，绝对路径的文件模块。")]),s._v(" "),a("li",[s._v("mod，非原生模块的文件模块。")])]),s._v(" "),a("blockquote",[a("p",[s._v("exports 和 module.exports 的使用")])]),s._v(" "),a("p",[s._v("如果要对外暴露属性或方法，就用 exports 就行，要暴露对象(类似class，包含了很多属性和方法)，就用 module.exports。")]),s._v(" "),a("h2",{attrs:{id:"node-js函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js函数","aria-hidden":"true"}},[s._v("#")]),s._v(" Node.js函数")]),s._v(" "),a("hr"),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//回调方式传递\nvar http = require("http");\n\nhttp.createServer(function(request, response) {\n  response.writeHead(200, {"Content-Type": "text/plain"});\n  response.write("Hello World");\n  response.end();\n}).listen(8888);\n\n通过匿名函数传递\nvar http = require("http");\n\nfunction onRequest(request, response) {\n  response.writeHead(200, {"Content-Type": "text/plain"});\n  response.write("Hello World");\n  response.end();\n}\n\nhttp.createServer(onRequest).listen(8888);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("h2",{attrs:{id:"node-js路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js路由","aria-hidden":"true"}},[s._v("#")]),s._v(" Node.js路由")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("我们要为路由提供请求的 URL 和其他需要的 GET 及 POST 参数，随后路由需要根据这些数据来执行相应的代码。")]),s._v(" "),a("p",[s._v("因此，我们需要查看 HTTP 请求，从中提取出请求的 URL 以及 GET/POST 参数。这一功能应当属于路由还是服务器（甚至作为一个模块自身的功能）确实值得探讨，但这里暂定其为我们的HTTP服务器的功能。")]),s._v(" "),a("p",[s._v("我们需要的所有数据都会包含在 request 对象中，该对象作为 onRequest() 回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的 Node.JS 模块，它们分别是 url 和 querystring 模块。\n"),a("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/router.png"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/router.png",alt:""}})]),s._v("\n我们也可以用 querystring 模块来解析 POST 请求体中的参数")]),s._v(" "),a("blockquote",[a("p",[s._v("获取GET请求内容")])]),s._v(" "),a("p",[s._v("由于GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET请求的参数。")]),s._v(" "),a("p",[s._v("node.js 中 url 模块中的 parse 函数提供了这个功能。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var http = require('http');\nvar url = require('url');\nvar util = require('util');\n \nhttp.createServer(function(req, res){\n    res.writeHead(200, {'Content-Type': 'text/plain; charset=utf-8'});\n    res.end(util.inspect(url.parse(req.url, true)));\n}).listen(3000);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/getget.png"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/getget.png",alt:""}})])]),s._v(" "),a("blockquote",[a("p",[s._v("获取 POST 请求内容")])]),s._v(" "),a("p",[s._v("POST 请求的内容全部的都在请求体中，http.ServerRequest 并没有一个属性内容为请求体，原因是等待请求体传输可能是一件耗时的工作。")]),s._v(" "),a("p",[s._v("比如上传文件，而很多时候我们可能并不需要理会请求体的内容，恶意的POST请求会大大消耗服务器的资源，所以 node.js 默认是不会解析请求体的，当你需要的时候，需要手动来做。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var http = require('http');\nvar querystring = require('querystring');\nvar util = require('util');\n \nhttp.createServer(function(req, res){\n    // 定义了一个post变量，用于暂存请求体的信息\n    var post = '';     \n \n    // 通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中\n    req.on('data', function(chunk){    \n        post += chunk;\n    });\n \n    // 在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。\n    req.on('end', function(){    \n        post = querystring.parse(post);\n        res.end(util.inspect(post));\n    });\n}).listen(3000);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("h2",{attrs:{id:"node-js-全局对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js-全局对象","aria-hidden":"true"}},[s._v("#")]),s._v(" Node.js 全局对象")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("JavaScript 中有一个特殊的对象，称为全局对象（Global Object），它及其所有属性都可以在程序的任何地方访问，即全局变量。")]),s._v(" "),a("p",[s._v("在浏览器 JavaScript 中，通常 window 是全局对象， 而 Node.js 中的全局对象是 global，所有全局变量（除了 global 本身以外）都是 global 对象的属性。")]),s._v(" "),a("p",[s._v("在 Node.js 我们可以直接访问到 global 的属性，而不需要在应用中包含它。")]),s._v(" "),a("hr"),s._v(" "),a("h4",{attrs:{id:"全局对象与全局变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局对象与全局变量","aria-hidden":"true"}},[s._v("#")]),s._v(" 全局对象与全局变量")]),s._v(" "),a("p",[s._v("global 最根本的作用是作为全局变量的宿主。按照 ECMAScript 的定义，满足以下条 件的变量是全局变量：")]),s._v(" "),a("ul",[a("li",[s._v("在最外层定义的变量；")]),s._v(" "),a("li",[s._v("全局对象的属性；")]),s._v(" "),a("li",[s._v("隐式定义的变量（未定义直接赋值的变量）。")])]),s._v(" "),a("p",[s._v("当你定义一个全局变量时，这个变量同时也会成为全局对象的属性，反之亦然。需要注 意的是，在 Node.js 中你不可能在最外层定义变量，因为所有用户代码都是属于当前模块的， 而模块本身不是最外层上下文。")]),s._v(" "),a("p",[s._v("注意： 永远使用 var 定义变量以避免引入全局变量，因为全局变量会污染 命名空间，提高代码的耦合风险。")]),s._v(" "),a("hr"),s._v(" "),a("h4",{attrs:{id:"filename"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filename","aria-hidden":"true"}},[s._v("#")]),s._v(" __filename")]),s._v(" "),a("p",[a("code",[s._v("__filename")]),s._v(" 表示"),a("strong",[s._v("当前正在执行的脚本")]),s._v("的"),a("strong",[s._v("文件名")]),s._v("。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。 如果在"),a("strong",[s._v("模块中")]),s._v("，返回的值是"),a("strong",[s._v("模块文件的路径")]),s._v("。")]),s._v(" "),a("hr"),s._v(" "),a("h4",{attrs:{id:"dirname"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dirname","aria-hidden":"true"}},[s._v("#")]),s._v(" __dirname")]),s._v(" "),a("p",[a("code",[s._v("__dirname")]),s._v(" 表示当前执行脚本所在的"),a("strong",[s._v("目录")])]),s._v(" "),a("hr"),s._v(" "),a("h4",{attrs:{id:"settimeout-cb-ms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#settimeout-cb-ms","aria-hidden":"true"}},[s._v("#")]),s._v(" setTimeout(cb, ms)")]),s._v(" "),a("p",[a("code",[s._v("setTimeout(cb, ms)")]),s._v(" 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。：setTimeout() 只执行一次指定函数。")]),s._v(" "),a("p",[s._v("返回一个代表定时器的句柄值。")]),s._v(" "),a("hr"),s._v(" "),a("h4",{attrs:{id:"cleartimeout-t"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cleartimeout-t","aria-hidden":"true"}},[s._v("#")]),s._v(" clearTimeout(t)")]),s._v(" "),a("p",[a("code",[s._v("clearTimeout( t )")]),s._v(" 全局函数用于停止一个之前通过 setTimeout() 创建的定时器。 参数 t 是通过 setTimeout() 函数创建的定时器。")]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"setinterval-cb-ms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setinterval-cb-ms","aria-hidden":"true"}},[s._v("#")]),s._v(" setInterval(cb, ms)")]),s._v(" "),a("p",[a("code",[s._v("setInterval(cb, ms)")]),s._v(" 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。")]),s._v(" "),a("p",[s._v("返回一个代表定时器的句柄值。可以使用 clearInterval(t) 函数来清除定时器。")]),s._v(" "),a("p",[s._v("setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。")]),s._v(" "),a("hr"),s._v(" "),a("h4",{attrs:{id:"console"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#console","aria-hidden":"true"}},[s._v("#")]),s._v(" console")]),s._v(" "),a("p",[s._v("console 用于提供控制台标准输出，它是由 Internet Explorer 的 JScript 引擎提供的调试工具，后来逐渐成为浏览器的实施标准。")]),s._v(" "),a("p",[s._v("Node.js 沿用了这个标准，提供与习惯行为一致的 console 对象，用于向标准输出流（stdout）或标准错误流（stderr）输出字符。")]),s._v(" "),a("p",[s._v("console 方法")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("console.log")])]),s._v(" "),a("p",[s._v("向标准输出流打印字符并以换行符结束。该方法接收若干 个参数，如果只有一个参数，则输出这个参数的字符串形式。如果有多个参数，则 以类似于C 语言 printf() 命令的格式输出。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("console.info")])]),s._v(" "),a("p",[s._v("该命令的作用是返回信息性消息，这个命令与console.log差别并不大，除了在chrome中只会输出文字外，其余的会显示一个蓝色的惊叹号。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("console.error([data][, ...])")])]),s._v(" "),a("p",[s._v("输出错误消息的。控制台在出现错误时会显示是红色的叉子。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("console.warn([data][, ...])")])]),s._v(" "),a("p",[s._v("输出警告消息。控制台出现有黄色的惊叹号。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("console.dir(obj[, options])")])]),s._v(" "),a("p",[s._v("用来对一个对象进行检查（inspect），并以易于阅读和打印的格式显示。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("console.time(label)")])]),s._v(" "),a("p",[s._v("输出时间，表示计时开始。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("console.time(label)")])]),s._v(" "),a("p",[s._v("结束时间，表示计时结束。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("console.trace(message[, ...])")])]),s._v(" "),a("p",[s._v("当前执行的代码在堆栈中的调用路径，这个测试函数运行很有帮助，只要给想测试的函数里面加入 console.trace 就行了。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("console.assert(value[, message][, ...])")])]),s._v(" "),a("p",[s._v("用于判断某个表达式或变量是否为真，接收两个参数，第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。")])])]),s._v(" "),a("hr"),s._v(" "),a("h4",{attrs:{id:"process"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process","aria-hidden":"true"}},[s._v("#")]),s._v(" process")]),s._v(" "),a("p",[s._v("process是用于描述当前Node.js 进程状态的对象，提供了一个与操作系统的简单接口。通常在你写本地命令行程序的时候，少不了要 和它打交道。")]),s._v(" "),a("p",[s._v("下面将会介绍 process 对象的一些最常用的成员方法。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("exit")]),s._v("   当进程准备退出时触发。")]),s._v(" "),a("li",[a("code",[s._v("beforeExit")]),s._v("   当 node 清空事件循环，并且没有其他安排时触发这个事件。通常来说，当没有进程安排时 node 退出，但是 'beforeExit' 的监听器可以异步调用，这样 node 就会继续执行。")]),s._v(" "),a("li",[a("code",[s._v("uncaughtException")]),s._v("   当一个异常冒泡回到事件循环，触发这个事件。如果给异常添加了监视器，默认的操作（打印堆栈跟踪信息并退出）就不会发生。")]),s._v(" "),a("li",[a("code",[s._v("Signal")]),s._v("   当进程接收到信号时就触发。信号列表详见标准的 POSIX 信号名，如 SIGINT、SIGUSR1 等。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("process.on('exit', function(code) {\n\n  // 以下代码永远不会执行\n  setTimeout(function() {\n    console.log(\"该代码不会执行\");\n  }, 0);\n  \n  console.log('退出码为:', code);\n});\nconsole.log(\"程序执行结束\");\n\n\n$ node main.js\n程序执行结束\n退出码为: 0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h4",{attrs:{id:"退出状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#退出状态码","aria-hidden":"true"}},[s._v("#")]),s._v(" 退出状态码")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Uncaught Fatal Exception")]),s._v(" "),a("p",[s._v("有未捕获异常，并且没有被域或 uncaughtException 处理函数处理。")])]),s._v(" "),a("li",[a("p",[s._v("Unused  保留")])]),s._v(" "),a("li",[a("p",[s._v("Internal JavaScript Parse Error")]),s._v(" "),a("p",[s._v("JavaScript的源码启动 Node 进程时引起解析错误。非常罕见，仅会在开发 Node 时才会有。")])]),s._v(" "),a("li",[a("p",[s._v("Internal JavaScript Evaluation Failure")]),s._v(" "),a("p",[s._v("JavaScript 的源码启动 Node 进程，评估时返回函数失败。非常罕见，仅会在开发 Node 时才会有。")])]),s._v(" "),a("li",[a("p",[s._v("Fatal Error")]),s._v(" "),a("p",[s._v("V8 里致命的不可恢复的错误。通常会打印到 stderr ，内容为： FATAL ERROR")])]),s._v(" "),a("li",[a("p",[s._v("Non-function Internal Exception Handler")]),s._v(" "),a("p",[s._v("未捕获异常，内部异常处理函数不知为何设置为on-function，并且不能被调用。")])]),s._v(" "),a("li",[a("p",[s._v("Internal Exception Handler Run-Time Failure")]),s._v(" "),a("p",[s._v("未捕获的异常， 并且异常处理函数处理时自己抛出了异常。例如，如果 process.on('uncaughtException') 或 domain.on('error') 抛出了异常。")])]),s._v(" "),a("li",[a("p",[s._v("Invalid Argument")])])]),s._v(" "),a("p",[s._v("可能是给了未知的参数，或者给的参数没有值")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Internal JavaScript Run-Time Failure")]),s._v(" "),a("p",[s._v("JavaScript的源码启动 Node 进程时抛出错误，非常罕见，仅会在开发 Node 时才会有。")])]),s._v(" "),a("li",[a("p",[s._v("Invalid Debug Argument")]),s._v(" "),a("p",[s._v("设置了参数--debug 和/或 --debug-brk，但是选择了错误端口。")])]),s._v(" "),a("li",[a("p",[s._v("Signal Exits")]),s._v(" "),a("p",[s._v("如果 Node 接收到致命信号，比如SIGKILL 或 SIGHUP，那么退出代码就是128 加信号代码。这是标准的 Unix 做法，退出信号代码放在高位。")])])]),s._v(" "),a("hr"),s._v(" "),a("h4",{attrs:{id:"process-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process-属性","aria-hidden":"true"}},[s._v("#")]),s._v(" Process 属性")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("stdout")]),s._v("  标准输出流")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("stderr")]),s._v("  标准错误流")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("stdin")]),s._v("  标准输入流。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("argv")]),s._v("  argv 属性返回一个数组，由命令行执行脚本时的各个参数组成。它的第一个成员总是node，第二个成员是脚本文件名，其余成员是脚本文件的参数。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("execPath")]),s._v("  返回执行当前脚本的 Node 二进制文件的绝对路径。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("execArgv")]),s._v("  返回一个数组，成员是命令行下执行脚本时，在Node可执行文件与脚本文件之间的命令行参数。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("env")]),s._v("  返回一个对象，成员为当前 shell 的环境变量")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("exitCode")]),s._v("  进程退出时的代码，如果进程优通过 process.exit() 退出，不需要指定退出码。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("version")]),s._v("  Node 的版本，比如v8.10.0。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("versions")]),s._v("  一个属性，包含了 node 的版本和依赖.")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("config")]),s._v('  一个包含用来编译当前 node 执行文件的 javascript 配置选项的对象。它与运行 ./configure 脚本生成的 "config.gypi" 文件相同。')])]),s._v(" "),a("li",[a("p",[a("code",[s._v("pid")]),s._v("  当前进程的进程号")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("title")]),s._v('  进程名，默认值为"node"，可以自定义该值。')])]),s._v(" "),a("li",[a("p",[a("code",[s._v("arch")]),s._v("  当前 CPU 的架构：'arm'、'ia32' 或者 'x64'。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("platform")]),s._v("  运行程序所在的平台系统 'darwin', 'freebsd', 'linux', 'sunos' 或 'win32'")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("mainModule")]),s._v("  require.main 的备选方法。不同点，如果主模块在运行时改变，require.main可能会继续返回老的模块。可以认为，这两者引用了同一个模块。")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 输出到终端\nprocess.stdout.write("Hello World!" + "\\n");\n\n// 通过参数读取\nprocess.argv.forEach(function(val, index, array) {\n  console.log(index + \': \' + val);\n});\n\n// 获取执行路径\nconsole.log(process.execPath);\n\n\n// 平台信息\nconsole.log(process.platform);\n\n\n\n$ node main.js\nHello World!\n0: node\n1: /web/www/node/main.js\n/usr/local/node/0.10.36/bin/node\ndarwin\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("hr"),s._v(" "),a("h4",{attrs:{id:"方法参考手册"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法参考手册","aria-hidden":"true"}},[s._v("#")]),s._v(" 方法参考手册")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("abort()")]),s._v(" 这将导致 node 触发 abort 事件。会让 node 退出并生成一个核心文件。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("chdir(directory)")]),s._v(" 改变当前工作进程的目录，如果操作失败抛出异常。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("cwd()")]),s._v("  返回当前进程的工作目录")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("exit([code])")]),s._v("  使用指定的 code 结束进程。如果忽略，将会使用 code 0。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getgid()")]),s._v(" 获取进程的群组标识（参见 getgid(2)）。获取到得时群组的数字 id，而不是名字。\n注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("setgid(id)")]),s._v(" 设置进程的群组标识（参见 setgid(2)）。可以接收数字 ID 或者群组名。如果指定了群组名，会阻塞等待解析为数字 ID 。\n注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getuid()")]),s._v("  获取进程的用户标识(参见 getuid(2))。这是数字的用户 id，不是用户名。\n注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("setuid(id)")]),s._v(" 设置进程的用户标识（参见setuid(2)）。接收数字 ID或字符串名字。果指定了群组名，会阻塞等待解析为数字 ID 。\n注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("getgroups()")]),s._v("  返回进程的群组 iD 数组。POSIX 系统没有保证一定有，但是 node.js 保证有。\n注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("setgroups(groups)")]),s._v(" 设置进程的群组 ID。这是授权操作，所以你需要有 root 权限，或者有 CAP_SETGID 能力。\n注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("initgroups(user, extra_group)")]),s._v("读取 /etc/group ，并初始化群组访问列表，使用成员所在的所有群组。这是授权操作，所以你需要有 root 权限，或者有 CAP_SETGID 能力。\n注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("kill(pid[, signal])")]),s._v("发送信号给进程. pid 是进程id，并且 signal 是发送的信号的字符串描述。信号名是字符串，比如 'SIGINT' 或 'SIGHUP'。如果忽略，信号会是 'SIGTERM'。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("memoryUsage()")]),s._v("返回一个对象，描述了 Node 进程所用的内存状况，单位为字节")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("nextTick(callback)")]),s._v("一旦当前事件循环结束，调用回调函数。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("umask([mask])")]),s._v(" 设置或读取进程文件的掩码。子进程从父进程继承掩码。如果mask 参数有效，返回旧的掩码。否则，返回当前掩码。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("uptime()")]),s._v(" 返回 Node 已经运行的秒数。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("hrtime()")]),s._v("返回当前进程的高分辨时间，形式为 [seconds, nanoseconds]数组。它是相对于过去的任意事件。该值与日期无关，因此不受时钟漂移的影响。主要用途是可以通过精确的时间间隔，来衡量程序的性能。\n你可以将之前的结果传递给当前的 process.hrtime() ，会返回两者间的时间差，用来基准和测量时间间隔。")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 输出当前目录\nconsole.log('当前目录: ' + process.cwd());\n\n// 输出当前版本\nconsole.log('当前版本: ' + process.version);\n\n// 输出内存使用情况\nconsole.log(process.memoryUsage());\n\n\n$ node main.js\n当前目录: /web/com/runoob/nodejs\n当前版本: v0.10.36\n{ rss: 12541952, heapTotal: 4083456, heapUsed: 2157056 }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("hr"),s._v(" "),a("h2",{attrs:{id:"node-js常用工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js常用工具","aria-hidden":"true"}},[s._v("#")]),s._v(" Node.js常用工具")]),s._v(" "),a("p",[s._v("推荐使用underscode.js/loadsh.js（源码很有意思）")]),s._v(" "),a("p",[s._v("util 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。")]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"node-js-工具模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js-工具模块","aria-hidden":"true"}},[s._v("#")]),s._v(" Node.js 工具模块")]),s._v(" "),a("h4",{attrs:{id:"path-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-模块","aria-hidden":"true"}},[s._v("#")]),s._v(" Path 模块")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("path.normalize(p)    规范化路径，注意'..' 和 '.'。")])]),s._v(" "),a("li",[a("p",[s._v("path.join([path1][, path2][, ...])")]),s._v(" "),a("p",[s._v('用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是"/"，Windows系统是""。')])]),s._v(" "),a("li",[a("p",[s._v("path.resolve([from ...], to)")]),s._v(" "),a("p",[s._v("将 to 参数解析为绝对路径，给定的路径的序列是从右往左被处理的，后面每个 path 被依次解析，直到构造完成一个绝对路径。 例如，给定的路径片段的序列为：/foo、/bar、baz，则调用 path.resolve('/foo', '/bar', 'baz') 会返回 /bar/baz。")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("path.resolve('/foo/bar', './baz');\n// 返回: '/foo/bar/baz'\n\npath.resolve('/foo/bar', '/tmp/file/');\n// 返回: '/tmp/file'\n\npath.resolve('wwwroot', 'static_files/png/', '../gif/image.gif');\n// 如果当前工作目录为 /home/myself/node，\n// 则返回 '/home/myself/node/wwwroot/static_files/gif/image.gif'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("ul",[a("li",[a("p",[s._v("path.isAbsolute(path)\n判断参数 path 是否是绝对路径。")])]),s._v(" "),a("li",[a("p",[s._v("path.relative(from, to)")])])]),s._v(" "),a("p",[s._v("用于将绝对路径转为相对路径，返回从 from 到 to 的相对路径（基于当前工作目录）。")]),s._v(" "),a("p",[s._v("在 Linux 上：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  path.relative('/data/orandea/test/aaa', '/data/orandea/impl/bbb');\n// 返回: '../../impl/bbb'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("在 Windows 上：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("path.relative('C:\\\\orandea\\\\test\\\\aaa', 'C:\\\\orandea\\\\impl\\\\bbb');\n// 返回: '..\\\\..\\\\impl\\\\bbb'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("blockquote",[a("p",[s._v("方法")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("path.dirname(p)")]),s._v(" "),a("p",[s._v("返回路径中代表文件夹的部分，同 Unix 的dirname 命令类似。")])]),s._v(" "),a("li",[a("p",[s._v("path.basename(p[, ext])")]),s._v(" "),a("p",[s._v("返回路径中的最后一部分。同 Unix 命令 bashname 类似。")])]),s._v(" "),a("li",[a("p",[s._v("path.extname(p)")]),s._v(" "),a("p",[s._v("返回路径中文件的后缀名，即路径中最后一个'.'之后的部分。如果一个路径中并不包含'.'或该路径只包含一个'.' 且这个'.'为路径的第一个字符，则此命令返回空字符串。")])]),s._v(" "),a("li",[a("p",[s._v("path.parse(pathString)")]),s._v(" "),a("p",[s._v("返回路径字符串的对象。")])]),s._v(" "),a("li",[a("p",[s._v("path.format(pathObject)")]),s._v(" "),a("p",[s._v("从对象中返回路径字符串，和 path.parse 相反。")])])]),s._v(" "),a("blockquote",[a("p",[s._v("属性")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("path.sep")]),s._v(" "),a("p",[s._v("平台的文件路径分隔符，'\\' 或 '/'。")])]),s._v(" "),a("li",[a("p",[s._v("path.delimiter")]),s._v(" "),a("p",[s._v("平台的分隔符, ; or ':'.")])]),s._v(" "),a("li",[a("p",[s._v("path.posix")]),s._v(" "),a("p",[s._v("提供上述 path 的方法，不过总是以 posix 兼容的方式交互。")])]),s._v(" "),a("li",[a("p",[s._v("path.win32")]),s._v(" "),a("p",[s._v("提供上述 path 的方法，不过总是以 win32 兼容的方式交互。")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var path = require(\"path\");\n\n// 格式化路径\nconsole.log('normalization : ' + path.normalize('/test/test1//2slashes/1slash/tab/..'));\n\n//normalization : \\test\\test1\\2slashes\\1slash\n\n// 连接路径\nconsole.log('joint path : ' + path.join('/test', 'test1', '2slashes/1slash', 'tab', '..'));\n\n//joint path : \\test\\test1\\2slashes\\1slash\n\n// 转换为绝对路径\nconsole.log('resolve : ' + path.resolve('main.js'));\n\nresolve : e:\\study\\yd-note\\main.js\n\n// 路径中文件的后缀名\nconsole.log('ext name : ' + path.extname('main.js'));\n\n//ext name : .js\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("hr"),s._v(" "),a("h2",{attrs:{id:"node-js-文件系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js-文件系统","aria-hidden":"true"}},[s._v("#")]),s._v(" Node.js 文件系统")]),s._v(" "),a("h4",{attrs:{id:"异步与同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步与同步","aria-hidden":"true"}},[s._v("#")]),s._v(" 异步与同步")]),s._v(" "),a("p",[s._v("Node.js 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的 fs.readFileSync()。")]),s._v(" "),a("p",[s._v("异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息(error)。")]),s._v(" "),a("p",[a("strong",[s._v("建议大家使用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var fs = require("fs");\n\n// 异步读取\nfs.readFile(\'input.txt\', function (err, data) {\n   if (err) {\n       return console.error(err);\n   }\n   console.log("异步读取: " + data.toString());\n});\n\n// 同步读取\nvar data = fs.readFileSync(\'input.txt\');\nconsole.log("同步读取: " + data.toString());\n\nconsole.log("程序执行完毕。")\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("方法太多，具体详见"),a("router-link",{attrs:{to:"/fs.html"}},[s._v("文件系统模块")])],1),s._v(" "),a("h4",{attrs:{id:"node-js-stream-流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-js-stream-流","aria-hidden":"true"}},[s._v("#")]),s._v(" Node.js Stream(流)")]),s._v(" "),a("p",[s._v("Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对http 服务器发起请求的request 对象就是一个 Stream，还有stdout（标准输出）。")]),s._v(" "),a("p",[s._v("Node.js，Stream 有四种流类型：")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("Readable")]),s._v(" - 可读操作。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("Writable")]),s._v(" - 可写操作。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("Duplex")]),s._v(" - 可读可写操作.")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("Transform")]),s._v(" - 操作被写入数据，然后读出结果。")])])]),s._v(" "),a("p",[s._v("所有的 Stream 对象都是 EventEmitter 的实例。常用的事件有：")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("data")]),s._v(" - 当有数据可读时触发。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("end")]),s._v(" - 没有更多的数据可读时触发。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("error")]),s._v(" - 在接收和写入过程中发生错误时触发。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("finish")]),s._v(" - 所有数据已被写入到底层系统时触发。")])])]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"从流中读取数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从流中读取数据","aria-hidden":"true"}},[s._v("#")]),s._v(" 从流中读取数据")]),s._v(" "),a("p",[s._v("创建 input.txt 文件，内容如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("zhhansan\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("创建 main.js 文件, 代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var fs = require(\"fs\");\nvar data = '';\n\n// 创建可读流\nvar readerStream = fs.createReadStream('input.txt');\n\n// 设置编码为 utf8。\nreaderStream.setEncoding('UTF8');\n\n// 处理流事件 --\x3e data, end, and error\nreaderStream.on('data', function(chunk) {\n   data += chunk;\n});\n\nreaderStream.on('end',function(){\n   console.log(data);\n});\n\nreaderStream.on('error', function(err){\n   console.log(err.stack);\n});\n\nconsole.log(\"程序执行完毕\");\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("p",[s._v("以上代码执行结果如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("程序执行完毕  zhhansan\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("hr"),s._v(" "),a("h2",{attrs:{id:"写入流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写入流","aria-hidden":"true"}},[s._v("#")]),s._v(" 写入流")]),s._v(" "),a("p",[s._v("创建 main.js 文件, 代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var fs = require(\"fs\");\nvar data = '菜鸟教程官网地址：www.runoob.com';\n\n// 创建一个可以写入的流，写入到文件 output.txt 中\nvar writerStream = fs.createWriteStream('output.txt');\n\n// 使用 utf8 编码写入数据\nwriterStream.write(data,'UTF8');\n\n// 标记文件末尾\nwriterStream.end();\n\n// 处理流事件 --\x3e data, end, and error\nwriterStream.on('finish', function() {\n    console.log(\"写入完成。\");\n});\n\nwriterStream.on('error', function(err){\n   console.log(err.stack);\n});\n\nconsole.log(\"程序执行完毕\");\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("p",[s._v("以上程序会将 data 变量的数据写入到 output.txt 文件中。代码执行结果如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ node main.js \n程序执行完毕\n写入完成。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("查看 output.txt 文件的内容：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ cat output.txt \nzhhansan\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("hr"),s._v(" "),a("h2",{attrs:{id:"管道流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管道流","aria-hidden":"true"}},[s._v("#")]),s._v(" 管道流")]),s._v(" "),a("p",[s._v("管道提供了一个输出流到输入流的机制。通常我们用于从一个流中获取数据并将数据传递到另外一个流中。")]),s._v(" "),a("p",[a("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/stream.png"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images//stream.png",alt:""}})])]),s._v(" "),a("p",[s._v("如上面的图片所示，我们把文件比作装水的桶，而水就是文件里的内容，我们用一根管子(pipe)连接两个桶使得水从一个桶流入另一个桶，这样就慢慢的实现了大文件的复制过程。")]),s._v(" "),a("p",[s._v("以下实例我们通过读取一个文件内容并将内容写入到另外一个文件中。")]),s._v(" "),a("p",[s._v("设置 input.txt 文件内容如下：")]),s._v(" "),a("p",[s._v("管道流操作实例")]),s._v(" "),a("p",[s._v("创建 main.js 文件, 代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var fs = require(\"fs\");\n\n// 创建一个可读流\nvar readerStream = fs.createReadStream('input.txt');\n\n// 创建一个可写流\nvar writerStream = fs.createWriteStream('output.txt');\n\n// 管道读写操作\n// 读取 input.txt 文件内容，并将内容写入到 output.txt 文件中\nreaderStream.pipe(writerStream);\n\nconsole.log(\"程序执行完毕\");\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("代码执行结果如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ node main.js 程序执行完毕\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("查看 output.txt 文件的内容：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ cat output.txt \n管道流操作实例\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("hr"),s._v(" "),a("h2",{attrs:{id:"链式流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链式流","aria-hidden":"true"}},[s._v("#")]),s._v(" 链式流")]),s._v(" "),a("p",[s._v("链式是通过连接输出流到另外一个流并创建多个流操作链的机制。链式流一般用于管道操作。")]),s._v(" "),a("p",[s._v("接下来我们就是用管道和链式来压缩和解压文件。")]),s._v(" "),a("p",[s._v("创建 compress.js 文件, 代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var fs = require(\"fs\");\nvar zlib = require('zlib');\n\n// 压缩 input.txt 文件为 input.txt.gz\nfs.createReadStream('input.txt')\n  .pipe(zlib.createGzip())\n  .pipe(fs.createWriteStream('input.txt.gz'));\n  \nconsole.log(\"文件压缩完成。\");\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("代码执行结果如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ node compress.js 文件压缩完成。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("执行完以上操作后，我们可以看到当前目录下生成了 input.txt 的压缩文件 input.txt.gz。")]),s._v(" "),a("p",[s._v("接下来，让我们来解压该文件，创建 decompress.js 文件，代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var fs = require(\"fs\");\nvar zlib = require('zlib');\n\n// 解压 input.txt.gz 文件为 input.txt\nfs.createReadStream('input.txt.gz')\n  .pipe(zlib.createGunzip())\n  .pipe(fs.createWriteStream('input.txt'));\n  \nconsole.log(\"文件解压完成。\");\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("代码执行结果如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ node decompress.js\n文件解压完成。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])])},[],!1,null,null,null);n.default=t.exports}}]);