(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{558:function(s,a,n){"use strict";n.r(a);var e=n(56),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"什么是正则表达式呢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是正则表达式呢"}},[s._v("#")]),s._v(" 什么是正则表达式呢？")]),s._v(" "),n("p",[s._v("正则表达式(regular expression)描述了一种字符串匹配的模式，可以用来检查一个字符串是否含有某种子串、将匹配的子串做替换或者从某个字符串中取出符合某个条件的子串等。")]),s._v(" "),n("p",[n("code",[s._v("test")]),s._v("可以测试字符串是否匹配正则表达是的规则，"),n("code",[s._v("exec")]),s._v("、"),n("code",[s._v("match")]),s._v("用于捕获匹配的子串。")]),s._v(" "),n("p",[s._v("说白了正则表达式就是处理字符串的,我们可以用它来处理一些复杂的字符串。")]),s._v(" "),n("h2",{attrs:{id:"为什么要学习正则表达式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么要学习正则表达式"}},[s._v("#")]),s._v(" 为什么要学习正则表达式")]),s._v(" "),n("p",[s._v("我们直接用一个例子来说明")]),s._v(" "),n("p",[s._v("//找出这个字符串中的所有数字")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'abc123de45fgh6789qqq111\';\n//方法1\nfunction findNum(str) {\nvar tmp = \'\',\n    arr = [];\nfor (var i = 0; i < str.length; i++) {\n    var cur = str[i];\n    if (!isNaN(cur)) {\n        tmp += cur;\n    } else {\n        if (tmp) {\n            arr.push(tmp);\n            tmp = \'\';\n        }\n    }\n}\nif (tmp) {\n    arr.push(tmp)\n}\nreturn arr;\n}\nconsole.log(findNum(str))\n//["123", "45", "6789", "111"]\n\n//方法2 使用正则表达式\nvar reg = /\\d+/g;\nconsole.log(str.match(reg))\n// ["123", "45", "6789", "111"]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br")])]),n("p",[s._v("通过比较2种方法我们明显看出在对字符串进行处理时，使用正则表达式会简单许多，所以虽然正则表达式看起来像是火星文一样的一堆乱码的东西，但我们还是有必要去学习它的。")]),s._v(" "),n("h2",{attrs:{id:"正则表达式的创建方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式的创建方式"}},[s._v("#")]),s._v(" 正则表达式的创建方式")]),s._v(" "),n("ul",[n("li",[s._v("实例创建方式")]),s._v(" "),n("li",[s._v("字面量创建方式")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    //字面量创建方式\n    ```var reg = /pattern/flags```\n    // 实例创建方式\n    ```var reg = new RegExp(pattern,flags);```\n\n    pattern:正则表达式  \n    flags:标识(修饰符)\n    标识主要包括：\n    1. i 忽略大小写匹配\n    2. m 多行匹配，即在到达一行文本末尾时还会继续寻常下一行中是否与正则匹配的项\n    3. g 全局匹配 模式应用于所有字符串，而非在找到第一个匹配项时停止\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h2",{attrs:{id:"字面量创建方式和构造函数创建方式的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字面量创建方式和构造函数创建方式的区别"}},[s._v("#")]),s._v(" 字面量创建方式和构造函数创建方式的区别")]),s._v(" "),n("ul",[n("li",[s._v("字面量创建方式不能进行字符串拼接，实例创建方式可以")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var regParam = 'cm';\nvar reg1 = new RegExp(regParam+'1');\nvar reg2 = /regParam/;\nconsole.log(reg1);  //   /cm1/\nconsole.log(reg2);  //  /regParam/\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ul",[n("li",[s._v("字面量创建方式特殊含义的字符不需要转义，实例创建方式需要转义")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var reg1 = new RegExp('\\d');  //    /d/ \nvar reg2 = new RegExp('\\\\d')  //   /\\d/\nvar reg3 = /\\d/;              //  /\\d/\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"元字符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#元字符"}},[s._v("#")]),s._v(" 元字符")]),s._v(" "),n("ul",[n("li",[s._v("代表特殊含义的元字符")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\\d : 0-9之间的任意一个数字  \\d只占一个位置\n\\w : 数字，字母 ，下划线 0-9 a-z A-Z _\n\\s : 空格或者空白等\n\\D : 除了\\d\n\\W : 除了\\w\n\\S : 除了\\s\n . : 除了\\n之外的任意一个字符\n \\ : 转义字符\n | : 或者\n() : 分组\n\\n : 匹配换行符\n\\b : 匹配边界 字符串的开头和结尾 空格的两边都是边界 => 不占用字符串位数\n ^ : 限定开始位置 => 本身不占位置\n $ : 限定结束位置 => 本身不占位置\n[a-z] : 任意字母 []中的表示任意一个都可以\n[^a-z] : 非字母 []中^代表除了\n[abc] : abc三个字母中的任何一个 [^abc]除了这三个字母中的任何一个字符\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("ul",[n("li",[s._v("代表次数的量词元字符")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("* : 0到多个\n+ : 1到多个\n? : 0次或1次 可有可无\n{n} : 正好n次；\n{n,} : n到多次\n{n,m} : n次到m次\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ul",[n("li",[s._v("量词出现在元字符后面 如\\d+，限定出现在前面的元字符的次数")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var str = '1223334444';\nvar reg = /\\d{2}/g;\nvar res = str.match(reg);\nconsole.log(res)  //[\"12\", \"23\", \"33\", \"44\", \"44\"]\n\nvar str ='  我是空格君  ';\nvar reg = /^\\s+|\\s+$/g; //匹配开头结尾空格\nvar res = str.replace(reg,'');\nconsole.log('('+res+')')  //(我是空格君)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("ul",[n("li",[s._v("正则中的()和[]和重复子项")])]),s._v(" "),n("blockquote",[n("p",[s._v("一般[]中的字符没有特殊含义 如+就表示+ 但是像\\w这样的还是有特殊含义的")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var str1 = 'abc';\nvar str2 = 'dbc';\nvar str3 = '.bc';\nvar reg = /[ab.]bc/; //此时的.就表示.\nreg.test(str1)  //true\nreg.test(str2)  //false\nreg.test(str3)  //true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("blockquote",[n("p",[s._v("[]中，不会出现两位数")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("[12]表示1或者2 不过[0-9]这样的表示0到9 [a-z]表示a到z\n例如:匹配从18到65年龄段所有的人\nvar reg = /[18-65]/; // 这样写对么\nreg.test('50')\n //Uncaught SyntaxError: Invalid regular expression: /[18-65]/: Range out of order in character class\n//聪明的你想可能是8-6这里不对，于是改成[16-85]似乎可以匹配16到85的年龄段的，但实际上发现这也是不靠谱的\n\n实际上我们匹配这个18-65年龄段的正则我们要拆开来匹配\n我们拆成3部分来匹配 18-19  20-59 60-65 \nreg = /(18|19)|([2-5]\\d)|(6[0-5])/;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("blockquote",[n("p",[s._v("()的提高优先级功能:凡是有|出现的时候，我们一定要注意是否有必要加上()来提高优先级；")])]),s._v(" "),n("blockquote",[n("p",[s._v("()的分组 重复子项 (两个放到一起说)")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("分组：\n只要正则中出现了小括号那么就会形成一份分组\n只要有分组，exec(match)和replace中的结果就会发生改变(后边的正则方法中再说)\n\n分组的引用(重复子项) :\n只要在正则中出现了括号就会形成一个分组，我们可以通过\\n (n是数字代表的是第几个分组)来引用这个分组，第一个小分组我们可以用\\1来表示\n\n例如：求出这个字符串'abAAbcBCCccdaACBDDabcccddddaab'中出现最多的字母,并求出出现多少次(忽略大小写)。\nvar str = 'abbbbAAbcBCCccdaACBDDabcccddddaab';\n    str = str.toLowerCase().split('').sort(function(a,b){return a.localeCompare(b)}).join('');\n\n    var reg = /(\\w)\\1+/ig;\n    var maxStr = '';\n    var maxLen = 0;\n    str.replace(reg,function($0,$1){\n        var regLen = $0.length;\n        if(regLen>maxLen){\n            maxLen = regLen;\n            maxStr = $1;\n        }else if(maxLen == regLen){\n            maxStr += $1;\n        }\n    })\n    console.log(`出现最多的字母是${maxStr},共出现了${maxLen}次`)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("blockquote",[n("p",[s._v("当我们加()只是为了提高优先级而不想捕获小分组时，可以在()中加?:来取消分组的捕获")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'aaabbb\';\nvar reg = /(a+)(?:b+)/;\nvar res =reg.exec(str);\nconsole.log(res)\n//["aaabbb", "aaa", index: 0, input: "aaabbb"]\n//只捕获第一个小分组的内容\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"正则运算符的优先级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#正则运算符的优先级"}},[s._v("#")]),s._v(" 正则运算符的优先级")]),s._v(" "),n("ul",[n("li",[s._v("正则表达式从左到右进行计算，并遵循优先级顺序，这与算术表达式非常类似。")]),s._v(" "),n("li",[s._v("相同优先级的会从左到右进行运算，不同优先级的运算先高后低。")])]),s._v(" "),n("p",[s._v("下面是常见的运算符的优先级排列\n依次从最高到最低说明各种正则表达式运算符的优先级顺序：")]),s._v(" "),n("p",[s._v('\\ : 转义符\n(), (?😃, (?=), []  => 圆括号和方括号\n*, +, ?, {n}, {n,}, {n,m}   => 量词限定符\n^, $, \\任何元字符、任何字符\n|       => 替换，"或"操作')]),s._v(" "),n("p",[s._v("字符具有高于替换运算符的优先级，一般用 | 的时候，为了提高 | 的优先级，我们常用()来提高优先级\n如： 匹配 food或者foot的时候 reg = /foo(t|d)/ 这样来匹配")]),s._v(" "),n("h2",{attrs:{id:"正则的特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#正则的特性"}},[s._v("#")]),s._v(" 正则的特性")]),s._v(" "),n("h3",{attrs:{id:"贪婪性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#贪婪性"}},[s._v("#")]),s._v(" 贪婪性")]),s._v(" "),n("p",[s._v("所谓的"),n("strong",[s._v("贪婪性")]),s._v("就是正则在捕获时，每一次会尽可能多的去捕获符合条件的内容。\n如果我们想尽可能的少的去捕获符合条件的字符串的话，可以在量词元字符后加?")]),s._v(" "),n("h3",{attrs:{id:"懒惰性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#懒惰性"}},[s._v("#")]),s._v(" 懒惰性")]),s._v(" "),n("p",[n("strong",[s._v("懒惰性")]),s._v("则是正则在成功捕获一次后不管后边的字符串有没有符合条件的都不再捕获。\n如果想捕获目标中所有符合条件的字符串的话，我们可以用标识符g来标明是全局捕获")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'123aaa456\';\nvar reg = /\\d+/;  //只捕获一次,一次尽可能多的捕获\nvar res = str.match(reg)\nconsole.log(res)\n// ["123", index: 0, input: "123aaa456"]\nreg = /\\d+?/g; //解决贪婪性、懒惰性\nres = str.match(reg)\nconsole.log(res)\n// ["1", "2", "3", "4", "5", "6"]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"和正则相关的一些方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#和正则相关的一些方法"}},[s._v("#")]),s._v(" 和正则相关的一些方法")]),s._v(" "),n("p",[s._v("这里我们只介绍"),n("code",[s._v("test")]),s._v("、"),n("code",[s._v("exec")]),s._v("、"),n("code",[s._v("match")]),s._v("和"),n("code",[s._v("replace")]),s._v("这四个方法")]),s._v(" "),n("blockquote",[n("p",[n("code",[s._v("reg.test(str)")]),s._v(" 用来验证字符串是否符合正则 符合返回"),n("code",[s._v("true")]),s._v(" 否则返回"),n("code",[s._v("false")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var str = 'abc';\nvar reg = /\\w+/;\nconsole.log(reg.test(str));  //true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("blockquote",[n("p",[n("code",[s._v("reg.exec()")]),s._v(" 用来捕获符合规则的字符串")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'abc123cba456aaa789\';\nvar reg = /\\d+/;\nconsole.log(reg.exec(str))\n//  ["123", index: 3, input: "abc123cba456aaa789"];\nconsole.log(reg.lastIndex)\n// lastIndex : 0 \n\nreg.exec捕获的数组中 \n// [0:"123",index:3,input:"abc123cba456aaa789"]\n0:"123" 表示我们捕获到的字符串\nindex:3 表示捕获开始位置的索引\ninput 表示原有的字符串\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[n("strong",[s._v("当我们用exec进行捕获时，如果正则没有加'g'标识符，则exec捕获的每次都是同一个，当正则中有'g'标识符时 捕获的结果就不一样了,我们还是来看刚刚的例子")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'abc123cba456aaa789\';\nvar reg = /\\d+/g;  //此时加了标识符g\nconsole.log(reg.lastIndex)\n// lastIndex : 0 \n\nconsole.log(reg.exec(str))\n//  ["123", index: 3, input: "abc123cba456aaa789"]\nconsole.log(reg.lastIndex)\n// lastIndex : 6\n\nconsole.log(reg.exec(str))\n// ["456", index: 9, input: "abc123cba456aaa789"]\nconsole.log(reg.lastIndex)\n// lastIndex : 12\n\nconsole.log(reg.exec(str))\n// ["789", index: 15, input: "abc123cba456aaa789"]\nconsole.log(reg.lastIndex)\n// lastIndex : 18\n\nconsole.log(reg.exec(str))\n// null\nconsole.log(reg.lastIndex)\n// lastIndex : 0\n\n每次调用exec方法时,捕获到的字符串都不相同\nlastIndex ：这个属性记录的就是下一次捕获从哪个索引开始。\n当未开始捕获时，这个值为0。          \n如果当前次捕获结果为null。那么lastIndex的值会被修改为0.下次从头开始捕获。\n而且这个lastIndex属性还支持人为赋值。\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])]),n("p",[n("strong",[s._v("exec的捕获还受分组()的影响")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'2017-01-05\';\nvar reg = /-(\\d+)/g\n// ["-01", "01", index: 4, input: "2017-01-05"]\n"-01" : 正则捕获到的内容\n"01"  : 捕获到的字符串中的小分组中的内容\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("blockquote",[n("p",[n("code",[s._v("str.match(reg)")]),s._v(" 如果匹配成功，就返回匹配成功的数组，如果匹配不成功，就返回"),n("code",[s._v("null")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('//match和exec的用法差不多\nvar str = \'abc123cba456aaa789\';\nvar reg = /\\d+/;\nconsole.log(reg.exec(str));\n//["123", index: 3, input: "abc123cba456aaa789"]\nconsole.log(str.match(reg));\n//["123", index: 3, input: "abc123cba456aaa789"]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("上边两个方法console的结果有什么不同呢？二个字符串是一样滴。\n当我们进行全局匹配时，二者的不同就会显现出来了.")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'abc123cba456aaa789\';\nvar reg = /\\d+/g;\nconsole.log(reg.exec(str));\n// ["123", index: 3, input: "abc123cba456aaa789"]\nconsole.log(str.match(reg));\n// ["123", "456", "789"]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("当全局匹配时，match方法会一次性把符合匹配条件的字符串全部捕获到数组中,\n如果想用exec来达到同样的效果需要执行多次exec方法。")]),s._v(" "),n("p",[n("strong",[s._v("我们可以尝试着用exec来简单模拟下match方法的实现。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(' String.prototype.myMatch = function (reg) {\n    var arr = [];\n    var res = reg.exec(this);\n    if (reg.global) {\n        while (res) {\n            arr.push(res[0]);\n            res = reg.exec(this)\n        }\n    }else{\n        arr.push(res[0]);\n    }\n    return arr;\n}\n\nvar str = \'abc123cba456aaa789\';\nvar reg = /\\d+/;\nconsole.log(str.myMatch(reg))\n// ["123"]\n\nvar str = \'abc123cba456aaa789\';\nvar reg = /\\d+/g;\nconsole.log(str.myMatch(reg))\n// ["123", "456", "789"]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("p",[n("strong",[s._v("此外，match和exec都可以受到分组()的影响，不过match只在没有标识符g的情况下才显示小分组的内容，如果有全局g，则match会一次性全部捕获放到数组中")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'abc\';\nvar reg = /(a)(b)(c)/;\n\nconsole.log( str.match(reg) );\n// ["abc", "a", "b", "c", index: 0, input: "abc"]\nconsole.log( reg.exec(str) );\n// ["abc", "a", "b", "c", index: 0, input: "abc"]\n\n\n当有全局g的情况下\nvar str = \'abc\';\nvar reg = /(a)(b)(c)/g;\nconsole.log( str.match(reg) );\n// ["abc"]\nconsole.log( reg.exec(str) );\n// ["abc", "a", "b", "c", index: 0, input: "abc"]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("blockquote",[n("p",[n("code",[s._v("str.replace()")]),s._v(" 这个方法大家肯定不陌生，现在我们要说的就是和这个方法和正则相关的东西了。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('正则去匹配字符串，匹配成功的字符去替换成新的字符串\n写法：str.replace(reg,newStr);\n\nvar str = \'a111bc222de\';\nvar res = str.replace(/\\d/g,\'Q\')\nconsole.log(res)\n// "aQQQbcQQQde"\n\nreplace的第二个参数也可以是一个函数\nstr.replace(reg,fn);\n\nvar str = \'2017-01-06\';\nstr = str.replace(/-\\d+/g,function(){\n    console.log(arguments)\n})\n\n控制台打印结果：\n["-01", 4, "2017-01-06"]\n["-06", 7, "2017-01-06"]\n"2017undefinedundefined"\n从打印结果我们发现每一次输出的值似乎跟exec捕获时很相似，既然与exec似乎很相似，那么似乎也可以打印出小分组中的内容喽 \n\nvar str = \'2017-01-06\';\nstr = str.replace(/-(\\d+)/g,function(){\n    console.log(arguments)\n})\n["-01", "01", 4, "2017-01-06"]\n["-06", "06", 7, "2017-01-06"]\n"2017undefinedundefined"\n从结果看来我们的猜测没问题。\n\n此外，我们需要注意的是，如果我们需要替换replace中正则找到的字符串，函数中需要一个返回值去替换正则捕获的内容。\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")])]),n("p",[n("strong",[s._v("通过replace方法获取url中的参数的方法")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("(function(pro){\n    function queryString(){\n        var obj = {},\n            reg = /([^?&#+]+)=([^?&#+]+)/g;\n        this.replace(reg,function($0,$1,$2){\n            obj[$1] = $2;\n        })\n        return obj;\n    }\n    pro.queryString = queryString;\n}(String.prototype));\n\n// 例如 url为 https://www.baidu.com?a=1&b=2\n// window.location.href.queryString();\n// {a:1,b:2}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h2",{attrs:{id:"零宽断言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#零宽断言"}},[s._v("#")]),s._v(" 零宽断言")]),s._v(" "),n("p",[s._v("用于查找在某些内容(但并不包括这些内容)之前或之后的东西，如"),n("code",[s._v("\\b")]),s._v(","),n("code",[s._v("^")]),s._v(","),n("code",[s._v("$")]),s._v("那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为零宽断言。")]),s._v(" "),n("p",[s._v("在使用正则表达式时，捕获的内容前后必须是特定的内容，而我们又不想捕获这些特定内容的时候，零宽断言就可以派上用场了。")]),s._v(" "),n("ul",[n("li",[s._v("零宽度正预测先行断言 (?=exp)")]),s._v(" "),n("li",[s._v("零宽度负预测先行断言 (?!exp)")]),s._v(" "),n("li",[s._v("零宽度正回顾后发断言 (?<=exp)")]),s._v(" "),n("li",[s._v("零宽度负回顾后发断言 (?<!exp)")])]),s._v(" "),n("p",[s._v("这四胞胎看着名字好长，给人一种好复杂好难的感觉，我们还是挨个来看看它们究竟是干什么的吧。")]),s._v(" "),n("blockquote",[n("p",[n("code",[s._v("(?=exp)")]),s._v(" 这个简单理解就是说字符出现的位置的右边必须匹配到"),n("code",[s._v("exp")]),s._v("这个表达式。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var str = \"i'm singing and dancing\";\nvar reg = /\\b(\\w+(?=ing\\b))/g\nvar res = str.match(reg);\nconsole.log(res)\n// [\"sing\", \"danc\"]\n\n注意一点，这里说到的是位置，不是字符。\nvar str = 'abc';\nvar reg = /a(?=b)c/;\nconsole.log(res.test(str));  // false\n\n// 这个看起来似乎是正确的，实际上结果是false\n\nreg中a(?=b)匹配字符串'abc' 字符串a的右边是b这个匹配没问题,接下来reg中a(?=b)后边的c匹配字符串时是从字符串'abc'中a的后边b的前边的这个位置开始匹配的，这个相当于/ac/匹配'abc',显然结果是false了\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("blockquote",[n("p",[s._v("(?!exp) 这个就是说字符出现的位置的右边不能是exp这个表达式。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var str = 'nodejs';\nvar reg = /node(?!js)/;\nconsole.log(reg.test(str)) // false\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("blockquote",[n("p",[s._v("(?<=exp) 这个就是说字符出现的位置的前边是exp这个表达式。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var str = '￥998$888';\nvar reg = /(?<=\\$)\\d+/;\nconsole.log(reg.exec(str)) //888\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("blockquote",[n("p",[s._v("(?<!exp) 这个就是说字符出现的位置的前边不能是exp这个表达式。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var str = '￥998$888';\nvar reg = /(?<!\\$)\\d+/;\nconsole.log(reg.exec(str)) //998\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("img",{attrs:{src:"https://colastar.github.io/static/images/%E6%AD%A3%E5%88%99%E8%84%91%E5%9B%BE.png",alt:""}})])])}),[],!1,null,null,null);a.default=r.exports}}]);