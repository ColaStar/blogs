(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{447:function(t,e,v){"use strict";v.r(e);var a=v(56),_=Object(a.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"深入理解javascript的执行流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#深入理解javascript的执行流程"}},[t._v("#")]),t._v(" 深入理解JavaScript的执行流程")]),t._v(" "),v("ul",[v("li",[t._v("执行上下文EC")]),t._v(" "),v("li",[t._v("变量对象VO")]),t._v(" "),v("li",[t._v("活动对象AO")]),t._v(" "),v("li",[t._v("作用域Scope（链）")])]),t._v(" "),v("p",[t._v("以上几个概念是JS解释引擎层面的概念，JS中无法直接访问。")]),t._v(" "),v("blockquote",[v("p",[t._v("执行上下文：")])]),t._v(" "),v("p",[t._v("Execution Context，下文中简写为EC。（没找到一个官方的定义）个人理解是JS在运行时候记录JS运行的时候需要用到的各种属性等信息的一个对象，主要供JS引擎解析执行代码用。执行上下文中记录了Scope，VO|AO，this。也就是EC有3个重要的属性：Scope，VO|AO，this")]),t._v(" "),v("p",[t._v("有3种执行上下文：全局执行上下文，函数执行上下文，Eval 执行上下文。本文讲解前两种。")]),t._v(" "),v("blockquote",[v("p",[t._v("执行上下文栈：")])]),t._v(" "),v("p",[t._v("Execution Context Stack，下文中简写为ECS。解释引擎记录执行上下文的容器。栈底是全局EC（全局EC只有在关闭该页面的时候才会出栈、销毁），栈顶是当前正在执行的EC。函数执行完之后会将栈顶EC出栈，将执行权交给下一个EC。")]),t._v(" "),v("blockquote",[v("p",[t._v("Scope：")])]),t._v(" "),v("p",[t._v("作用域，是根据名称查找变量的一套规则，这套规则用来管理js引擎根据标识符名称如何查找变量。而一系列的嵌套作用域就形成了作用域链。作用域执行上下文的一个关键属性，以链的方式（底层实现到底是链表还是数组呢？）按顺序记录（持有）可访问的变量对象（函数中是活动对象）")]),t._v(" "),v("blockquote",[v("p",[t._v("VO：")])]),t._v(" "),v("p",[t._v("变量对象 （Variable Object），存储了在上下文中定义的变量和函数声明；除了我们无法访问它外，和普通对象没什么区别。每一个执行上下文都有一个与之相关的变量对象，其中存储着上下文中声明的：\n变量 VariableDeclaration VD，注意，必须是JS中以var声明的变量才会记录在这里。let或者const声明的变量不会存在这里。\n函数 FunctionDeclaration FD，必须是显式声明的函数，函数表达式不会记录在这里（也就不会有提升）。")]),t._v(" "),v("blockquote",[v("p",[t._v("AO：")])]),t._v(" "),v("p",[t._v("活动对象（Activation Object），在创建函数的时候初始化的一个对象，包含变量对象中的内容。除了上述VO中的变量、函数外，还包括函数 arguments 、参数parameters。AO = VO + function parameters + arguments。函数中不能访问VO，只能使用AO。")]),t._v(" "),v("h2",{attrs:{id:"原理梳理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#原理梳理"}},[t._v("#")]),t._v(" 原理梳理")]),t._v(" "),v("blockquote",[v("p",[t._v("1，整体流程概览")])]),t._v(" "),v("p",[t._v("JS解释引擎是边解析边执行的。JS解释引擎在载入一段脚本（进入任何一段"),v("script")])])}),[],!1,null,null,null);e.default=_.exports}}]);