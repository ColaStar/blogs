(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{135:function(s,e,t){"use strict";t.r(e);var a=t(0),n=Object(a.a)({},function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"react"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react","aria-hidden":"true"}},[s._v("#")]),s._v(" react")]),s._v(" "),t("h2",{attrs:{id:"介绍与发展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍与发展","aria-hidden":"true"}},[s._v("#")]),s._v(" 介绍与发展")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("react")]),s._v("是Feckbook开发的一款用来构建用户见面的js库，他只是做一个views，专门是用来用户界面的库,所以react本身只涉及UI层，React结合自己庞大的组件库，形成了MVVM框架。")]),s._v(" "),t("li",[t("strong",[s._v("Virtual DOM")]),s._v(" 是一个模拟DOM树的Javascript对象。React使用 Virtual DOM来渲染UI，同时监听Virtual DOM上的数据变化并自动迁移这些变化到UI上")])]),s._v(" "),t("ul",[t("li",[t("p",[t("code",[s._v("state")]),s._v(" 是状态，整个"),t("code",[s._v("React")]),s._v("都是通过状态来驱动的，只要状态变换，"),t("code",[s._v("React")]),s._v("就会驱动"),t("code",[s._v("View")]),s._v("变化，"),t("code",[s._v("View")]),s._v("变化就会启动"),t("code",[s._v("VirtualDOM")]),s._v("的"),t("code",[s._v("diff")]),s._v("算法，通过"),t("code",[s._v("diff")]),s._v("算法找到"),t("code",[s._v("DOM")]),s._v("元素最小的变化，从而实现最小的操作DOM元素。")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("props")]),s._v(" 是react中的属性，通过属性可以做到父子组件的通信。\n")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("JSX语法")]),s._v(" 是React定义的一种Javascript语法扩展，类似与XML。JSX是可选的，我们完全可以使用Javascript来编写React应用，不过JSX提供了一套更为简单的方式；来写react的应用。")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("components")]),s._v("：React是专注于View层开发的，View是基于组件的，每一个JSX是一个组件。组件化开发可以创建可复用的UI组件，提高开发效率。")])])]),s._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react发展史.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react%E5%8F%91%E5%B1%95%E5%8F%B2.png",alt:""}})])]),s._v(" "),t("p",[s._v("19年已经更新到了16.8的版本，就在8.10号更新到了16.9，表示学不动了。")]),s._v(" "),t("h2",{attrs:{id:"react开发环境与ecmascript6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react开发环境与ecmascript6","aria-hidden":"true"}},[s._v("#")]),s._v(" React开发环境与EcmaScript6")]),s._v(" "),t("h2",{attrs:{id:"jsx使用与介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jsx使用与介绍","aria-hidden":"true"}},[s._v("#")]),s._v(" JSX使用与介绍")]),s._v(" "),t("h3",{attrs:{id:"优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点","aria-hidden":"true"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),t("ul",[t("li",[s._v("JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。")]),s._v(" "),t("li",[s._v("它是类型安全的，在编译过程中就能发现错误。")]),s._v(" "),t("li",[s._v("使用 JSX 编写模板更加简单快速。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const element = <h1>Hello, world!</h1>;\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这种看起来可能有些奇怪的标签语法既不是字符串也不是 "),t("code",[s._v("HTML")]),s._v("。")]),s._v(" "),t("p",[s._v("它被称为 "),t("code",[s._v("JSX，")]),s._v(" 一种 "),t("code",[s._v("JavaScript")]),s._v(" 的语法扩展。 我们推荐在 "),t("code",[s._v("React")]),s._v(" 中使用 "),t("code",[s._v("JSX")]),s._v(" 来描述用户界面。")]),s._v(" "),t("p",[t("code",[s._v("JSX")]),s._v(" 是在 "),t("code",[s._v("JavaScript")]),s._v(" 内部实现的。")]),s._v(" "),t("p",[s._v("我们知道元素是构成 "),t("code",[s._v("React")]),s._v(" 应用的最小单位，"),t("code",[s._v("JSX")]),s._v(" 就是用来声明 "),t("code",[s._v("React")]),s._v(" 当中的元素。")]),s._v(" "),t("p",[s._v("与浏览器的 "),t("code",[s._v("DOM")]),s._v(" 元素不同，"),t("code",[s._v("React")]),s._v(" 当中的元素事实上是普通的对象，"),t("code",[s._v("React DOM")]),s._v(" 可以确保 浏览器 "),t("code",[s._v("DOM")]),s._v(" 的数据内容与 "),t("code",[s._v("React")]),s._v(" 元素保持一致。")]),s._v(" "),t("p",[s._v("要将 "),t("code",[s._v("React")]),s._v(" 元素渲染到根 "),t("code",[s._v("DOM")]),s._v(" 节点中，我们通过把它们都传递给 "),t("code",[s._v("ReactDOM.render()")]),s._v(" 的方法来将其渲染到页面上：")]),s._v(" "),t("blockquote",[t("p",[s._v("ES5写法\n"),t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactes5.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactes5.png",alt:""}})])])]),s._v(" "),t("blockquote",[t("p",[s._v("ES6写法\n"),t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactes6.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactes6.png",alt:""}})])])]),s._v(" "),t("blockquote",[t("p",[s._v("react组件怎么用呢\n"),t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react组件怎么用.jpg"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react%E7%BB%84%E4%BB%B6%E6%80%8E%E4%B9%88%E7%94%A8.jpg",alt:""}})])])]),s._v(" "),t("blockquote",[t("p",[s._v("Dom diff")])]),s._v(" "),t("p",[s._v("DOM diff是DOM比较算法。用于找到最小变化的DOM元素进行渲染，平行化比较，把重绘和重排做到最小化。因为"),t("code",[s._v("react")]),s._v("中"),t("code",[s._v("View")]),s._v("层的变化是基于"),t("code",[s._v("state")]),s._v("的，如果状态发生变化，组件中"),t("code",[s._v("render")]),s._v("函数就会重新执行。")]),s._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactdomdiff.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactdomdiff.png",alt:""}})])]),s._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactdomdiff例子1.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactdomdiff%E4%BE%8B%E5%AD%901.png",alt:""}})])]),s._v(" "),t("p",[t("strong",[s._v("Dom diff")]),s._v("是为渲染的性能，最小化的一个渲染机制.")]),s._v(" "),t("p",[t("strong",[s._v("DOM diff算法流程")])]),s._v(" "),t("ul",[t("li",[s._v("1.开始判断节点是否相同，如果节点不相同，就相当于修改了节点，React会重新创建一个节点；")]),s._v(" "),t("li",[s._v("2.如果节点相同，判断是否是自定义节点;")]),s._v(" "),t("li",[s._v("3.如果不是自定义节点(ReactDOM.render也可以渲染html标签)，比较属性是否发生变化，如果属性变更新属性然后结束；")]),s._v(" "),t("li",[s._v("4.如果是自定义节点，或者说是我们自己写的组件，然后重新渲染，会渲染出一段VirtualDOM（虚拟DOM）,然后和以存在的Virtual DOM进行比较区别，最终渲染到页面。")])]),s._v(" "),t("blockquote",[t("p",[s._v("JSX注意事项")])]),s._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/JSX注意事项.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/JSX%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.png",alt:""}})])]),s._v(" "),t("h2",{attrs:{id:"非dom属性介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非dom属性介绍","aria-hidden":"true"}},[s._v("#")]),s._v(" 非Dom属性介绍")]),s._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/非Dom属性介绍.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E9%9D%9EDom%E5%B1%9E%E6%80%A7%E4%BB%8B%E7%BB%8D.png",alt:""}})])]),s._v(" "),t("ul",[t("li",[s._v("1."),t("strong",[s._v("dangerouslySetInnerHTML警告")])])]),s._v(" "),t("p",[s._v("dangerouslySetInnerHTML用于净化数据，预防XSS的攻击")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('var rawHTML = {\n    //通过__html来构造出来，\n    __html : "<h2>非dom属性：dangerouslySetInnerHTML标签</h2>"\n}\nReactDOM.render(\n    //通过dangerouslySetInnerHTML属性来定义\n    <div dangerouslySetInnerHTML = {rawHTML}></div>,\n    document.getElementById("app")\n)\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("ul",[t("li",[s._v("2."),t("code",[s._v("ref")])])]),s._v(" "),t("p",[s._v("如果在JSX中获取真正的DOM元素，可以使用ref这个属性。")]),s._v(" "),t("p",[s._v("在html元素中添加ref属性")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("<input type=\"text\" ref= 'input'/>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果想要取得这个DOM元素可以通过ReactDOM.findDOMNode()来获取,并且需要在React生命周期的componentDidMount阶段")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("ReactDOM.findDOMNode(this.refs.input)   //获取到input元素\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("3."),t("strong",[s._v("key")]),s._v("提高渲染的性能")])]),s._v(" "),t("p",[s._v("当在列表渲染的时候，如果不加k的情况下，会把所有的dom全部都干掉，然后在最后插如一个节点，如果加上了k，则会在下一次去更新节点的时候把li一一对应上，可以达到最小化的更新。")]),s._v(" "),t("p",[t("strong",[s._v("例子：手动删除表格第一条数据")])]),s._v(" "),t("p",[s._v("如果使用 数组下标 index 作为 key值或者不加的情况下：\n"),t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-key1.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-key1.png",alt:""}})])]),s._v(" "),t("p",[s._v("可以见到使用数组下标作为 index 的时候，React 会先更新表格内前9条数据，并且删除表格内最后一条数据，此时一共操作了 18 次 DOM")]),s._v(" "),t("p",[s._v("加key(使用 id 作为 key)的情况下")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("<tr key={item.id}>...<tr>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-key2.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-key2.png",alt:""}})])]),s._v(" "),t("p",[s._v("可以看出，此时 React 仅仅更删除了第一行数据，操作了 1次 DOM 元素")]),s._v(" "),t("p",[t("code",[s._v("注意")]),s._v("：因为"),t("code",[s._v("react")]),s._v(" 要求 "),t("code",[s._v("key")]),s._v(" 值必须是稳定的（在当前列表项不变即可）,所以在书写key时一定要写一个稳定的key。")]),s._v(" "),t("h2",{attrs:{id:"属性、状态的介绍与用法以及对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性、状态的介绍与用法以及对比","aria-hidden":"true"}},[s._v("#")]),s._v(" 属性、状态的介绍与用法以及对比")]),s._v(" "),t("h3",{attrs:{id:"属性（props）的介绍与用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性（props）的介绍与用法","aria-hidden":"true"}},[s._v("#")]),s._v(" 属性（props）的介绍与用法")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("属性props介绍")])])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("props")]),s._v("是一个事物的性质与关系往往是与生俱来的，无法改变的,")]),s._v(" "),t("li",[s._v("可以说组件是React的核心了，如果把组件比喻成一个管道，那么props就相当于输入。")]),s._v(" "),t("li",[s._v("props可以定义在注册组件的地方，也可以在组件内部定义默认属性，无论在哪里定义，props都是只读的。")]),s._v(" "),t("li",[s._v("props可以应用于JSX中html的元素上，自定义组件的元素上(相当于给子组件传值)，也可以应用于值。")])]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("属性的用法")])])]),s._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactprops用法.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactprops%E7%94%A8%E6%B3%95.png",alt:""}})])]),s._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactprops数组用法.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactprops%E6%95%B0%E7%BB%84%E7%94%A8%E6%B3%95.png",alt:""}})])]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("默认 Props")])])]),s._v(" "),t("p",[s._v("通过组件类的 "),t("code",[s._v("defaultProps")]),s._v(" 属性为 "),t("code",[s._v("props")]),s._v(" 设置默认值，")]),s._v(" "),t("p",[s._v("ES5和ES6定义默认的props是不相同的")]),s._v(" "),t("ul",[t("li",[s._v("ES5")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("var Hello = React.createClass({\n    getDefaultProps : function(){   //设置默认属性\n         return { title : '133'};\n    }\n    propTypes : { //属性校验器，表示必须是string\n        title : React.PropTypes.string,\n    }  \n}) \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("上面使用getDefauktProps定义属性，propTypes用于属性的类型检查。")]),s._v(" "),t("ul",[t("li",[s._v("ES6")])]),s._v(" "),t("p",[s._v("ES6同样有两种方法，由于ES6是使用class类来定义组件的，因此，这两种方法必须是静态。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('方法一：\n\n//属性\nclass HelloMessage extend React.Component{\n    render(){\n        retun <h1 onClick={this.handle} className="h1">{this.props.name}</h1>\n        )\n    }\n}\nHelloMessage.defaultProps = {\n  name: \'Runoob\'\n};\nReactDOM.reder(<HelloMessage name="吕鉴" name:{吕鉴} name={123} name={this.data}/>,\ndocument.getElementById(\'exampdayle\'))\n\n方法二：\n\nexport default class Hello extends React.Component{\n    static defaultProps ={\n        title : "Hello React",\n    }\n    static propTypes = {\n        title : React.PropTypes.string,\n    }\n}\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[s._v("运行方法二的代码会发现报错。报错原因在"),t("code",[s._v("React.PropTypes.string")]),s._v("，这是因为在"),t("code",[s._v("React15.5")]),s._v("之前类型检查是集成在"),t("code",[s._v("React")]),s._v("里面的，"),t("code",[s._v("React15.5")]),s._v("之后被抽离了出来。所以需要下载p"),t("code",[s._v("rop-types")]),s._v("包来解决这个问题。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("npm install prop-types –save\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("再修改一下代码。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import propTypes from "prop-types";\nexport default class Hello extends React.Component{\n    static defaultProps ={\n        title : "Hello React",\n    }\n    static propTypes = {\n        title :propTypes.string,\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("blockquote",[t("p",[s._v("组件属性传值")])]),s._v(" "),t("ul",[t("li",[s._v("通过组件属性进行传值,可以传入变量、number、string、数组、js表达式等")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("“text” | {123} | {“string”} | {[1,2,3]} | {variable} | js函数表达式\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("通过setProps传值")])]),s._v(" "),t("p",[s._v("在组件render完之后，通过setProps()也可以把属性传进来.")]),s._v(" "),t("ul",[t("li",[s._v("通过扩展运算符传值\n这种方式可以归纳到第一种，在父组件建立一个对象，通过扩展运算符传值。当然在子组件需要加key，防止组件整体重新渲染。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("var props = {\n    one : \"123\",\n    two : 321,\n}\nReactDOM.render(\n    <List {...props} /> ,\n    document.getElementById('app')\n)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("这种方式经常用于列表渲染。在子组件中获取")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("export default class List extends React.Component{\n    render(){\n        let list = this.props.map((value，key) => <li key = {key}> {value} </li>)\n        return (\n            <ul> {list }</ul>\n        )\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h3",{attrs:{id:"状态-state）的介绍与用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#状态-state）的介绍与用法","aria-hidden":"true"}},[s._v("#")]),s._v(" 状态(state）的介绍与用法")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("状态(state）介绍")]),s._v(" "),t("code",[s._v("React")]),s._v(" 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同-状态，然后渲染 UI，让用户界面和数据保持一致。即在"),t("code",[s._v("React")]),s._v(" 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。")])]),s._v(" "),t("p",[s._v("它有如下特点：")]),s._v(" "),t("ul",[t("li",[s._v("事物所处的状态;")]),s._v(" "),t("li",[s._v("状态是由事物自行处理的，不断变化的;")]),s._v(" "),t("li",[s._v("对于React来讲一切变化全部基于状态;")]),s._v(" "),t("li",[s._v("通过setState进行改变;")])]),s._v(" "),t("blockquote",[t("p",[s._v("setState")])]),s._v(" "),t("p",[t("code",[s._v("React")]),s._v("如果想改变一个状态，那么必须通过"),t("code",[s._v("setStat")]),s._v("e切换撞他，每一次"),t("code",[s._v("setState")]),s._v("之后，"),t("code",[s._v("Reader")]),s._v("就会重新渲染执行一次"),t("code",[s._v("render")]),s._v("，就会触发"),t("code",[s._v("diff")]),s._v("算法进行计算，通过计算生出新的"),t("code",[s._v("Virtual Dom")]),s._v("和现在的"),t("code",[s._v("Virtual DOM")]),s._v("进行比较，发生变化之后执行一次更新")]),s._v(" "),t("blockquote",[t("p",[s._v("使用state\nstate在ES5和ES6上都是不同的。")])]),s._v(" "),t("ul",[t("li",[s._v("ES5")])]),s._v(" "),t("p",[s._v("通过getInitialState方法来初始化状态。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("var Hello = React.crateClass({\n    getInitialState : function(){\n        return {\n            isloading : false,\n        }\n    }\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("ul",[t("li",[s._v("ES6")])]),s._v(" "),t("p",[s._v("ES6中使用class来定义组件，规定state要注册到constructor中。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("export default class Hello extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            isloading : false,\n        }\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("上面两种方式同样是通过"),t("code",[s._v("this.setState()")]),s._v("改变状态。")]),s._v(" "),t("p",[s._v("以ES6为例")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("export default class Hello extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            isloading : false,\n        }\n        this.handleClick = this.handleClick.bind(this);\n    }\n    handleClick(e){\n        this.setState({\n            isloading : !this.state.isloading,\n        })\n    }\n    render(){\n        return (\n            <div\n                onClick = {this.handleClick}\n            >\n                {this.state.isloading ? <h1> Hello</h1> : <h2> World </h2>} \n            </div>\n        )\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("blockquote",[t("p",[s._v("使用 "),t("code",[s._v("setState")]),s._v(" 的时候，需要注意:")])]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("setState")]),s._v(" 是一件很复杂的事情。即使是熟练的 "),t("code",[s._v("React")]),s._v(" 开发，也很有可能因为 "),t("code",[s._v("React")]),s._v(" 的一些机制而产生一些"),t("code",[s._v("bug")]),s._v("，比如下面这个例子：\n"),t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-setstate.gif"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-setstate.gif",alt:""}})])]),s._v(" "),t("p",[t("strong",[s._v("注意：")]),s._v("\n绝对不要 直接改变 "),t("code",[s._v("this.state")]),s._v(" ，因为之后调用 "),t("code",[s._v("setState()")]),s._v(" 可能会替换掉你做的改")]),s._v(" "),t("p",[s._v("变。把 "),t("code",[s._v("this.state")]),s._v(" 当做是不可变的。")]),s._v(" "),t("p",[t("code",[s._v("setState()")]),s._v("不会立刻改变 this.state ，而是创建一个即将处理的 state 转变。在调用该方法之后访问 this.state 可能会返回现有的值。")]),s._v(" "),t("p",[s._v("对 "),t("code",[s._v("setState")]),s._v(" 的调用没有任何同步性的保证，并且调用可能会为了性能收益批量执行。")]),s._v(" "),t("p",[t("code",[s._v("setState()")]),s._v("将总是触发一次重绘，除非在 shouldComponentUpdate() 中实现了条件渲染逻辑。如果可变对象被使用了，但又不能在 shouldComponentUpdate() 中实现这种逻辑，仅在新 state 和之前的 state 存在差异的时候调用 setState() 可以避免不必要的重新渲染。")]),s._v(" "),t("p",[s._v("总结出来，当使用 "),t("code",[s._v("setState")]),s._v(" 的时候，有三个问题需要注意:")]),s._v(" "),t("ul",[t("li",[s._v("1.setState是同步的")])]),s._v(" "),t("p",[s._v("很多开发以为 setState 是异步的。如果你修改一些 state ，然后直接查看它，你会看到之前的 state 。这是 setState 中最容易出错的地方。 setState 这个词看起来并不像是异步的，所以如果你不假思索的用它，可能会造成 bugs 。其实 "),t("code",[s._v("setState")]),s._v(" 是同步执行的，但是不会立马更新，因为他在批量处理中会等待组件render才真正触发,不在批处理中的任务可能会立马更新。到底更新不更新要取决于setState是否在Async的渲染过程中，因为他会进入到异步调度过程。如果setState处于我们某个生命周期中，暂时不会BatchUpdate参与，因为组件要尽早的提前渲染。下面这个例子很好的展示了这个问题：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('class Select extends React.Component {\n  constructor(props, context) {\n    super(props, context)\n    this.state = {\n      selection: props.values[0]\n    };\n  }\n  \n  render() {\n    return (\n      <ul onKeyDown={this.onKeyDown} tabIndex={0}>\n        {this.props.values.map(value =>\n          <li\n            className={value === this.state.selection ? \'selected\' : \'\'}\n            key={value}\n            onClick={() => this.onSelect(value)}\n          >\n            {value}\n          </li> \n        )}  \n      </ul>\n    )\n  }\n  \n  onSelect(value) {\n    this.setState({\n      selection: value\n    })\n    this.fireOnSelect()\n  }\n\n  onKeyDown = (e) => {\n    const {values} = this.props\n    const idx = values.indexOf(this.state.selection)\n    if (e.keyCode === 38 && idx > 0) { /* up */\n      this.setState({\n        selection: values[idx - 1]\n      })\n    } else if (e.keyCode === 40 && idx < values.length -1) { /* down */\n      this.setState({\n        selection: values[idx + 1]\n      })  \n    }\n    this.fireOnSelect()\n  }\n   \n  fireOnSelect() {\n    if (typeof this.props.onSelect === "function")\n      this.props.onSelect(this.state.selection) /* not what you expected..*/\n  }\n}\n\nReactDOM.render(\n  <Select \n    values={["State.", "Should.", "Be.", "Synchronous."]} \n    onSelect={value => console.log(value)}\n  />,\n  document.getElementById("app")\n)\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br")])]),t("p",[s._v("第一眼看上去，这个代码似乎没有什么问题。两个事件处理中调用 onSelect 方法。但是，这个 Select 组件中有一个 bug 很好的展现了之前的 GIF 图。 onSelect 方法永远传递的是之前的 state.selection 值，因为当 fireOnSelect 调用的时候， setState 还没有完成它的工作。我认为 React 至少要把 setState 改名为 scheduleState 或者把回掉函数设为必须参数。")]),s._v(" "),t("p",[s._v("这个bug很容易修改，最难的地方在于你要知道有这个问题。")]),s._v(" "),t("ul",[t("li",[s._v("2.setState会造成不必要的渲染")])]),s._v(" "),t("p",[t("code",[s._v("setState")]),s._v(" 造成的第二个问题是：每次调用都会造成重新渲染。很多时候，这些重新渲染是不必要的。你可以用 "),t("code",[s._v("React performance tools")]),s._v(" 中的 "),t("code",[s._v("printWasted")]),s._v(" 来查看什么时候会发生不必要渲染。但是，大概的说，不必要的渲染有以下几个原因：")]),s._v(" "),t("p",[s._v("新的 "),t("code",[s._v("state")]),s._v(" 其实和之前的是一样的。这个问题通常可以通过 "),t("code",[s._v("shouldComponentUpdate")]),s._v(" 来解决。也可以用 "),t("code",[s._v("pure render")]),s._v(" 或者其他的库赖解决这个问题。")]),s._v(" "),t("p",[s._v("通常发生改变的 "),t("code",[s._v("state")]),s._v(" 是和渲染有关的，但是也有例外。比如，有些数据是根据某些状态来显示的。")]),s._v(" "),t("p",[s._v("第三，有些 "),t("code",[s._v("state")]),s._v(" 和渲染一点关系都没有。有一些 "),t("code",[s._v("state")]),s._v(" 可能是和事件、 timer ID 有关的。")]),s._v(" "),t("ul",[t("li",[s._v("3.setState并不能很有效的管理所有的组件状态")])]),s._v(" "),t("p",[s._v("并不是所有的组件状态都应该用 "),t("code",[s._v("setState")]),s._v(" 来进行保存和更新的。复杂的组件可能会有各种各样的状态需要管理。用 "),t("code",[s._v("setState")]),s._v(" 来管理这些状态不但会造成很多不需要的重新渲染，也会造成相关的生命周期钩子一直被调用，从而造成很多奇怪的问题。")]),s._v(" "),t("blockquote",[t("p",[s._v("使用 setState 的时候的建议：")])]),s._v(" "),t("p",[s._v("如果需要在 "),t("code",[s._v("setState")]),s._v(" 后直接获取修改后的值，那么有几个方案：")]),s._v(" "),t("ul",[t("li",[s._v("1.传入对应的参数，不通过 this.state 获取")]),s._v(" "),t("li",[s._v("2.使用回调函数")])]),s._v(" "),t("p",[t("code",[s._v("setState")]),s._v(" 方法接收一个 function 作为回调函数。这个回掉函数会在 "),t("code",[s._v("setState")]),s._v(" 完成以后直接调用，这样就可以获取最新的 state 。对于之前的例子，就可以这样：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("this.setState({\n  selection: value\n}, this.fireOnSelect)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("ul",[t("li",[s._v("3.使用setTimeout")])]),s._v(" "),t("p",[s._v("在 "),t("code",[s._v("setState")]),s._v(" 使用 "),t("code",[s._v("setTimeout")]),s._v(" 来让 "),t("code",[s._v("setState")]),s._v(" 先完成以后再执行里面内容。这样子：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("this.setState({\n  selection: value\n});\nsetTimeout(this.fireOnSelect, 0);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("ul",[t("li",[s._v("4.和渲染无关的状态尽量不要放在 "),t("code",[s._v("state")]),s._v(" 中来管理")])]),s._v(" "),t("p",[s._v("通常 "),t("code",[s._v("state")]),s._v(" 中只来管理和渲染有关的状态 ，从而保证 "),t("code",[s._v("setState")]),s._v(" 改变的状态都是和渲染有关的状态。这样子就可以避免不必要的重复渲染。其他和渲染无关的状态，可以直接以属性的形式保存在组件中，在需要的时候调用和改变，不会造成渲染。")]),s._v(" "),t("p",[s._v("避免不必要的修改，当 state 的值没有发生改变的时候，尽量不要使用 setState 。虽然 shouldComponentUpdate 和 PureComponent 可以避免不必要的重复渲染，但是还是增加了一层 shallowEqual 的调用，造成多余的浪费")]),s._v(" "),t("blockquote",[t("p",[s._v("属性状态对比？")])]),s._v(" "),t("p",[t("strong",[s._v("相同点")])]),s._v(" "),t("ul",[t("li",[s._v("都是纯js对象")]),s._v(" "),t("li",[s._v("都会触发render更新，属性是开始渲染一次性触发render，状态是每次状态改变都会触发render")]),s._v(" "),t("li",[s._v("都具有确定性，渲染前初始化完成。")])]),s._v(" "),t("p",[t("strong",[s._v("区别")])]),s._v(" "),t("ul",[t("li",[s._v("props 是不可变的,如果需要改变就需要把state放到props上边，而 state 可以根据与用户交互来改变。")]),s._v(" "),t("li",[s._v("但是props只有一次触发render只传递一次 ，state一直在触发，即实时修改")]),s._v(" "),t("li",[s._v("组件在运行时需要修改的数据就是状态")]),s._v(" "),t("li",[s._v("状态是自己的，属性是组件之间的\n"),t("strong",[s._v("比较")]),s._v(" "),t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react属性与状态对比.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react%E5%B1%9E%E6%80%A7%E4%B8%8E%E7%8A%B6%E6%80%81%E5%AF%B9%E6%AF%94.png",alt:""}})])])]),s._v(" "),t("h2",{attrs:{id:"生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生命周期","aria-hidden":"true"}},[s._v("#")]),s._v(" 生命周期")]),s._v(" "),t("p",[t("code",[s._v("React")]),s._v("的核心是基于组件的，"),t("code",[s._v("React")]),s._v("的组件也是有声明周期的，和大部分软件相同，它同样具有从开始创建到运行再到最终销毁的这段路程。")]),s._v(" "),t("p",[s._v("组件本质上是状态机，输入确定，输出确定。状态发生转换时会触发不同的钩子函数，从而让开发者有机会做出响应。可以用事件的思路来理解状态。")]),s._v(" "),t("blockquote",[t("p",[s._v("React组件的生命周期分为三个阶段：挂载（初始化） -> 更新（运行中） -> 卸载。")])]),s._v(" "),t("p",[s._v("每个阶段有与之相对应的钩子函数。")]),s._v(" "),t("p",[s._v("如下几张图是react生命周期的 变更图，学的好幸苦。。。")]),s._v(" "),t("p",[t("strong",[s._v("React v16.3之前生命周期")]),s._v(" "),t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react16.3之前生命周期.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react16.3%E4%B9%8B%E5%89%8D%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png",alt:""}})])]),s._v(" "),t("p",[t("strong",[s._v("React v16.3生命周期")]),s._v(" "),t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react16.3生命周期.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react16.3%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png",alt:""}})])]),s._v(" "),t("p",[t("strong",[s._v("React v16.4生命周期")]),s._v(" "),t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react16.41生命周期.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react16.41%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png",alt:""}})])]),s._v(" "),t("h3",{attrs:{id:"react-v16-0前的生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-v16-0前的生命周期","aria-hidden":"true"}},[s._v("#")]),s._v(" React v16.0前的生命周期")]),s._v(" "),t("p",[s._v("其实大部分团队不见得会跟进升到16版本，所以16前的生命周期还是很有必要掌握的，何况16也是基于之前的修改")]),s._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react16.3之前生命周期.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react16.3%E4%B9%8B%E5%89%8D%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png",alt:""}})])]),s._v(" "),t("blockquote",[t("p",[s._v("初始化阶段")])]),s._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react初始化生命周期.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react%E5%88%9D%E5%A7%8B%E5%8C%96%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png",alt:""}})])]),s._v(" "),t("blockquote",[t("p",[s._v("运行中阶段")])]),s._v(" "),t("p",[s._v("在讲述此阶段前需要先明确下"),t("code",[s._v("react")]),s._v("组件更新机制。"),t("code",[s._v("setState")]),s._v("引起的"),t("code",[s._v("state")]),s._v("更新或父组件重新"),t("code",[s._v("render")]),s._v("引起的"),t("code",[s._v("props")]),s._v("更新，更新后的"),t("code",[s._v("state")]),s._v("和"),t("code",[s._v("props")]),s._v("相对之前无论是否有变化，都将引起子组件的重新"),t("code",[s._v("render")])]),s._v(" "),t("p",[s._v("造成组件更新有两类（三种）情况:")]),s._v(" "),t("ul",[t("li",[s._v("1.父组件重新render")])]),s._v(" "),t("p",[s._v("父组件重新render引起子组件重新render的情况有两种:")]),s._v(" "),t("p",[s._v("a：直接使用,每当父组件重新"),t("code",[s._v("render")]),s._v("导致的重传"),t("code",[s._v("props")]),s._v("，子组件将直接跟着重新渲染，无论"),t("code",[s._v("props")]),s._v("是否有变化。可通过"),t("code",[s._v("shouldComponentUpdate")]),s._v("方法优化。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class Child extends Component {\n   shouldComponentUpdate(nextProps){ // 应该使用这个方法，否则无论props是否有变化都将会导致组件跟着重新渲染\n        if(nextProps.someThings === this.props.someThings){\n          return false\n        }\n    }\n    render() {\n        return <div>{this.props.someThings}</div>\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("b.在"),t("code",[s._v("componentWillReceiveProps")]),s._v("方法中，将"),t("code",[s._v("props")]),s._v("转换成自己的"),t("code",[s._v("state")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class Child extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            someThings: props.someThings\n        };\n    }\n    componentWillReceiveProps(nextProps) { // 父组件重传props时就会调用这个方法\n        this.setState({someThings: nextProps.someThings});\n    }\n    render() {\n        return <div>{this.state.someThings}</div>\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("根据官网描述：在该函数("),t("code",[s._v("componentWillReceiveProps")]),s._v(")中调用 "),t("code",[s._v("this.setState()")]),s._v("将不会引起第二次渲染。")]),s._v(" "),t("p",[s._v("是因为"),t("code",[s._v("componentWillReceiveProps")]),s._v("中判断"),t("code",[s._v("props")]),s._v("是否变化了，若变化了，"),t("code",[s._v("this.setState")]),s._v("将引起"),t("code",[s._v("state")]),s._v("变化，从而引起"),t("code",[s._v("render")]),s._v("，此时就没必要再做第二次因重传"),t("code",[s._v("props")]),s._v("引起的"),t("code",[s._v("render")]),s._v("了，不然重复做一样的渲染了。")]),s._v(" "),t("ul",[t("li",[s._v("2.组件本身调用setState，无论state有没有变化。可通过shouldComponentUpdate方法优化。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class Child extends Component {\n   constructor(props) {\n        super(props);\n        this.state = {\n          someThings:1\n        }\n   }\n   shouldComponentUpdate(nextStates){ // 应该使用这个方法，否则无论state是否有变化都将会导致组件重新渲染\n        if(nextStates.someThings === this.state.someThings){\n          return false\n        }\n    }\n\n   handleClick = () => { // 虽然调用了setState ，但state并无变化\n        const preSomeThings = this.state.someThings\n         this.setState({\n            someThings: preSomeThings\n         })\n   }\n\n    render() {\n        return <div onClick = {this.handleClick}>{this.state.someThings}</div>\n    }\n}\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("blockquote",[t("p",[s._v("此阶段分为一下几个钩子")])]),s._v(" "),t("ul",[t("li",[t("p",[t("code",[s._v("componentWillReceiveProps(nextProps)")]),s._v(" 在组件接收到一个新的 "),t("code",[s._v("prop")]),s._v(" (更新后)时被调用。这个方法在初始化"),t("code",[s._v("render")]),s._v("时不会被调用。")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("shouldComponentUpdate(nextProps, nextState)")]),s._v(" 返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用"),t("code",[s._v("forceUpdat")]),s._v("e时不被调用。此方法通过比较"),t("code",[s._v("nextProps")]),s._v("，"),t("code",[s._v("nextState")]),s._v("及当前组件的"),t("code",[s._v("this.props")]),s._v("，"),t("code",[s._v("this.state")]),s._v("，返回true时当前组件将继续执行更新过程，返回false则当前组件更新停止，以此可用来减少组件的不必要渲染，优化组件性能。默认"),t("code",[s._v("return true")])])]),s._v(" "),t("li",[t("p",[t("code",[s._v("componentWillUpdate")]),s._v(" 在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("render")]),s._v(" : 根据组件的props和state（无两者的重传递和重赋值，论值是否有变化，都可以引起组件重新render） ，return 一个React元素（描述组件，即UI），不负责组件实际渲染工作，之后由React自身根据此元素去渲染出页面DOM。render是纯函数（Pure function：函数的返回结果只依赖于它的参数；函数执行过程里面没有副作用），不能在里面执行this.setState，会有改变组件状态的副作用。")])])]),s._v(" "),t("p",[t("code",[s._v("componentDidUpdate(prevProps, prevState)")]),s._v(" 在组件完成更新后立即调用,可以操作组件更新的DOM。在初始化时不会被调用。 "),t("code",[s._v("prevProps")]),s._v(" 和"),t("code",[s._v("prevState")]),s._v("这两个参数指的是组件更新前的"),t("code",[s._v("props")]),s._v("和"),t("code",[s._v("state")])]),s._v(" "),t("blockquote",[t("p",[s._v("销毁阶段")])]),s._v(" "),t("p",[t("code",[s._v("componentDidUnmount")]),s._v(" 此方法在组件被卸载前调用，可以在这里执行一些清理工作，比如清楚组件中使用的定时器，清除"),t("code",[s._v("componentDidMount")]),s._v("中手动创建的"),t("code",[s._v("DOM")]),s._v("元素等，以避免引起内存泄漏。")]),s._v(" "),t("h3",{attrs:{id:"react-v16-4-的生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-v16-4-的生命周期","aria-hidden":"true"}},[s._v("#")]),s._v(" React v16.4 的生命周期")]),s._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react16.41生命周期.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react16.41%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png",alt:""}})])]),s._v(" "),t("blockquote",[t("p",[s._v("变更缘由")])]),s._v(" "),t("p",[s._v("原来（React v16.0前）的生命周期在React v16推出的"),t("code",[s._v("Fiber")]),s._v("之后就不合适了，因为如果要开启"),t("code",[s._v("async rendering")]),s._v("，在"),t("code",[s._v("render")]),s._v("函数之前的所有函数，都有可能被执行多次。")]),s._v(" "),t("p",[s._v("原来"),t("strong",[s._v("React v16.0前")]),s._v("的生命周期有哪些是在"),t("code",[s._v("render")]),s._v("前执行的呢？")]),s._v(" "),t("ul",[t("li",[s._v("componentWillMount")]),s._v(" "),t("li",[s._v("componentWillReceiveProps")]),s._v(" "),t("li",[s._v("shouldComponentUpdate")]),s._v(" "),t("li",[s._v("componentWillUpdate")])]),s._v(" "),t("p",[s._v("如果开发者开了"),t("code",[s._v("async rendering")]),s._v("，而且又在以上这些"),t("code",[s._v("render")]),s._v("前执行的生命周期方法做AJAX请求的话，那AJAX将被无谓地多次调用。。。明显不是我们期望的结果。而且在"),t("code",[s._v("componentWillMount")]),s._v("里发起AJAX，不管多快得到结果也赶不上首次"),t("code",[s._v("render")]),s._v("，而且"),t("code",[s._v("componentWillMount")]),s._v("在服务器端渲染也会被调用到（当然，也许这是预期的结果），这样的IO操作放在"),t("code",[s._v("componentDidMount")]),s._v("里更合适。")]),s._v(" "),t("p",[s._v("禁止不能用比劝导开发者不要这样用的效果更好，所以除了"),t("code",[s._v("shouldComponentUpdate")]),s._v("，其他在"),t("code",[s._v("render")]),s._v("函数之前的所有函数"),t("code",[s._v("（componentWillMount，componentWillReceiveProps，componentWillUpdate）")]),s._v("都被"),t("code",[s._v("getDerivedStateFromProps")]),s._v("替代。")]),s._v(" "),t("p",[s._v("也就是用一个静态函数"),t("code",[s._v("getDerivedStateFromProps")]),s._v("来取代被deprecate的几个生命周期函数，就是强制开发者在"),t("code",[s._v("render")]),s._v("之前只做无副作用的操作，而且能做的操作局限在根据"),t("code",[s._v("props")]),s._v("和"),t("code",[s._v("state")]),s._v("决定新的"),t("code",[s._v("state")])]),s._v(" "),t("p",[s._v("React v16.0刚推出的时候，是增加了一个"),t("code",[s._v("componentDidCatch")]),s._v("生命周期函数，这只是一个增量式修改，完全不影响原有生命周期函数；但是，到了React v16.3，大改动来了，引入了两个新的生命周期函数。")]),s._v(" "),t("blockquote",[t("p",[s._v("getDerivedStateFromProps")])]),s._v(" "),t("p",[t("code",[s._v("getDerivedStateFromProps")]),s._v("本来（React v16.3中）是只在创建和更新（由父组件引发部分），也就是不是不由父组件引发，那么"),t("code",[s._v("getDerivedStateFromProps")]),s._v("也不会被调用，如自身"),t("code",[s._v("setState")]),s._v("引发或者"),t("code",[s._v("forceUpdate")]),s._v("引发。")]),s._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react16.3生命周期.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react16.3%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png",alt:""}})])]),s._v(" "),t("p",[s._v("这样的话理解起来有点乱，在React v16.4中改正了这一点，让"),t("code",[s._v("getDerivedStateFromProps")]),s._v("无论是"),t("code",[s._v("Mounting")]),s._v("还是"),t("code",[s._v("Updating")]),s._v("，也无论是因为什么引起的"),t("code",[s._v("Updating")]),s._v("，全部都会被调用，具体可看React v16.4 的生命周期图。")]),s._v(" "),t("p",[t("code",[s._v("static getDerivedStateFromProps(props, state)")]),s._v(" 在组件创建时和更新时的"),t("code",[s._v("render")]),s._v("方法之前调用，它应该返回一个对象来更新状态，或者返回"),t("code",[s._v("null")]),s._v("来不更新任何内容。")]),s._v(" "),t("blockquote",[t("p",[s._v("getSnapshotBeforeUpdate")])]),s._v(" "),t("p",[t("code",[s._v("getSnapshotBeforeUpdate()")]),s._v("被调用于"),t("code",[s._v("render")]),s._v("之后，可以读取但无法使用DOM的时候。它使您的组件可以在可能更改之前从DOM捕获一些信息（例如滚动位置）。此生命周期返回的任何值都将作为参数传递给"),t("code",[s._v("componentDidUpdate（）")])]),s._v(" "),t("p",[s._v("官网例子：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class ScrollingList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.listRef = React.createRef();\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    //我们是否要添加新的 items 到列表?\n    // 捕捉滚动位置，以便我们可以稍后调整滚动.\n    if (prevProps.list.length < this.props.list.length) {\n      const list = this.listRef.current;\n      return list.scrollHeight - list.scrollTop;\n    }\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    //如果我们有snapshot值, 我们已经添加了 新的items.\n    // 调整滚动以至于这些新的items 不会将旧items推出视图。\n    // (这边的snapshot是 getSnapshotBeforeUpdate方法的返回值)\n    if (snapshot !== null) {\n      const list = this.listRef.current;\n      list.scrollTop = list.scrollHeight - snapshot;\n    }\n  }\n\n  render() {\n    return (\n      <div ref={this.listRef}>{/* ...contents... */}</div>\n    );\n  }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br")])]),t("blockquote",[t("p",[s._v("单向数据流")])]),s._v(" "),t("p",[s._v("任何状态始终由某些特定组件所有，并且从该状态导出的任何数据或 UI 只能影响树中下方的组件。")]),s._v(" "),t("p",[s._v("如果你想象一个组件树作为属性的瀑布，每个组件的状态就像一个额外的水源，它连接在一个任意点，但也流下来。")]),s._v(" "),t("h2",{attrs:{id:"react可控与不可控控件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react可控与不可控控件","aria-hidden":"true"}},[s._v("#")]),s._v(" React可控与不可控控件")]),s._v(" "),t("h3",{attrs:{id:"不可控控件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不可控控件","aria-hidden":"true"}},[s._v("#")]),s._v(" 不可控控件")]),s._v(" "),t("p",[s._v("当一个表单元素设置了"),t("code",[s._v("defaultValue")]),s._v("属性的时候，那么这个组件就变成了不可控组件。")]),s._v(" "),t("p",[s._v("为什么这么说呢？")]),s._v(" "),t("p",[t("code",[s._v("defaultValue")]),s._v("属性设置的值大多数情况下是不允许更改的，由于"),t("code",[s._v("React")]),s._v("的所有的"),t("code",[s._v("View")]),s._v("是基于状态的改变而动态渲染的，而设置了"),t("code",[s._v("defaultValue")]),s._v("是不允许更改，所以就可以称组件为不可控组件。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('export default class App extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            value : "hello React",\n        }\n        this.handleChange = this.handleChange.bind(this);\n    }\n    handleChange(){\n        this.setState({\n            value : "hello world"\n        })\n        console.log(this.state.value);\n    }\n    render(){\n        return (\n            <input \n                onMouseEnter = {this.handleChange}\n                defaultValue = {this.state.value}\n            />\n        )\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("p",[s._v("上面代码是：在"),t("code",[s._v("input")]),s._v("元素上设置"),t("code",[s._v("defaultValue")]),s._v("并监听"),t("code",[s._v("onMouseEnter")]),s._v("事件，当鼠标移入的时候，状态改变。可以从图上看出，状态改变但是"),t("code",[s._v("input")]),s._v("中的值并没有改变。")]),s._v(" "),t("p",[s._v("我们在书写代码的时候无法通过状态去控制组件，这就是"),t("strong",[s._v("不可控组件")]),s._v("。")]),s._v(" "),t("p",[s._v("但是不可控组件并不是非不可控，通过"),t("code",[s._v("React.findDOMNode(this.refs.input).value")]),s._v("直接取到DOM元素就可以改变。修改一下上面代码。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('export default class App extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            value : "hello React",\n        }\n        this.handleChange = this.handleChange.bind(this);\n    }\n    handleChange(){\n        \n        this.setState({\n            value : "hello world"\n        })\n        console.log(this.state.value);\n        ReactDOM.findDOMNode(this.refs.input).value = this.state.value;\n    }\n    render(){\n        return (\n            <input \n                onMouseEnter = {this.handleChange}\n                defaultValue = {this.state.value}\n                ref = "input"\n            />\n        )\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[s._v("这时你发现input被改掉了。")]),s._v(" "),t("h3",{attrs:{id:"可控控件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可控控件","aria-hidden":"true"}},[s._v("#")]),s._v(" 可控控件")]),s._v(" "),t("p",[s._v("当我们在表单元素上不使用defaultValue而使用value的使用，组件就变成了可控的了。")]),s._v(" "),t("p",[s._v("上面代码修改一下。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('export default class App extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            value : "hello React",\n        }\n        this.handleChange = this.handleChange.bind(this);\n    }\n    handleChange(){\n        \n        this.setState({\n            value : "hello world"\n        })\n        console.log(this.state.value);\n    }\n    render(){\n        return (\n            <input \n                onMouseEnter = {this.handleChange}\n                value = {this.state.value}\n            />\n        )\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("p",[s._v("状态改变，值也改变了，我们发现报了个错。 这个错是因为使用"),t("code",[s._v("vlaue")]),s._v("必须配合一个事件来使用，要么用"),t("code",[s._v("onChange")]),s._v("要么把值设置成readOnly。")]),s._v(" "),t("p",[s._v("把原来的代码onMouseEnter改成onChange：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('export default class App extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            value : "hello React",\n        }\n        this.handleChange = this.handleChange.bind(this);\n    }\n    handleChange(e){\n        this.setState({\n            value : e.target.value\n        })\n        \n        console.log(this.state.value);\n    }\n    render(){\n        return (\n            <input \n                onChange = {this.handleChange}\n                value = {this.state.value}\n            />\n        )\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("p",[s._v("这样就可以了，通过value值的改变动态的改变状态。")]),s._v(" "),t("blockquote",[t("p",[s._v("可控控件的好处")])]),s._v(" "),t("ul",[t("li",[s._v("符合react的数据流")]),s._v(" "),t("li",[s._v("数据存储在state中便于取用")]),s._v(" "),t("li",[s._v("便于对数据进行处理")])]),s._v(" "),t("h2",{attrs:{id:"react事件处理与表单元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react事件处理与表单元素","aria-hidden":"true"}},[s._v("#")]),s._v(" React事件处理与表单元素")]),s._v(" "),t("p",[s._v("React 元素的事件处理和 DOM 元素类似。但是有一点语法上的不同:")]),s._v(" "),t("ul",[t("li",[s._v("React 事件绑定属性的命名采用驼峰式写法，而不是小写。")]),s._v(" "),t("li",[s._v("如果采用 JSX 的语法你需要传入一个函数作为事件处理函数，而不是一个字符串(DOM 元素的写法)")]),s._v(" "),t("li",[s._v("在 React 中另一个不同是你不能使用返回 false 的方式阻止默认行为， 你必须明确的使用 preventDefault")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("//html\n\n<button onclick=\"activateLasers()\">\n  激活按钮\n</button>\n\n//react\n\n <button onClick={this.handleClick}>\n        {this.state.isToggleOn ? '激活按钮' : '注销按钮'}\n </button>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h3",{attrs:{id:"向事件处理程序传递参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#向事件处理程序传递参数","aria-hidden":"true"}},[s._v("#")]),s._v(" 向事件处理程序传递参数")]),s._v(" "),t("p",[s._v("通常我们会为事件处理程序传递额外的参数。例如，若是 id 是你要删除那一行的 id，以下两种方式都可以向事件处理程序传递参数：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>\n<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"react事件表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react事件表","aria-hidden":"true"}},[s._v("#")]),s._v(" React事件表")]),s._v(" "),t("blockquote",[t("p",[s._v("触摸事件")])]),s._v(" "),t("ul",[t("li",[s._v("onTouchCancel")]),s._v(" "),t("li",[s._v("onTouchEnd")]),s._v(" "),t("li",[s._v("onTouchMove")]),s._v(" "),t("li",[s._v("onTouchStart")])]),s._v(" "),t("blockquote",[t("p",[s._v("键盘事件")])]),s._v(" "),t("ul",[t("li",[s._v("onKeyDown")]),s._v(" "),t("li",[s._v("onKeyPress")]),s._v(" "),t("li",[s._v("onKeyUp")])]),s._v(" "),t("blockquote",[t("p",[s._v("剪切事件")])]),s._v(" "),t("ul",[t("li",[s._v("onCopy")]),s._v(" "),t("li",[s._v("onCut")]),s._v(" "),t("li",[s._v("onPaste")])]),s._v(" "),t("blockquote",[t("p",[s._v("焦点事件")])]),s._v(" "),t("ul",[t("li",[s._v("onFocus")]),s._v(" "),t("li",[s._v("onBlur")])]),s._v(" "),t("blockquote",[t("p",[s._v("UI元素")])]),s._v(" "),t("ul",[t("li",[s._v("onScroll")])]),s._v(" "),t("blockquote",[t("p",[s._v("滚动事件")])]),s._v(" "),t("ul",[t("li",[s._v("onWheel")])]),s._v(" "),t("blockquote",[t("p",[s._v("鼠标事件")])]),s._v(" "),t("ul",[t("li",[s._v("onClick")]),s._v(" "),t("li",[s._v("onC- ontextMenu")]),s._v(" "),t("li",[s._v("onDoubleClick")]),s._v(" "),t("li",[s._v("onMouseDown")]),s._v(" "),t("li",[s._v("onMouseEnter")]),s._v(" "),t("li",[s._v("onMouseLeave")]),s._v(" "),t("li",[s._v("onMouseMove")]),s._v(" "),t("li",[s._v("onMouseOut")]),s._v(" "),t("li",[s._v("onMouseOver")]),s._v(" "),t("li",[s._v("onMouseUp")])]),s._v(" "),t("blockquote",[t("p",[s._v("拖拽事件")])]),s._v(" "),t("ul",[t("li",[s._v("onDrop")]),s._v(" "),t("li",[s._v("onDrag")]),s._v(" "),t("li",[s._v("onDragEnd")]),s._v(" "),t("li",[s._v("onDragEnter")]),s._v(" "),t("li",[s._v("onDragExit")]),s._v(" "),t("li",[s._v("onDragLeave")]),s._v(" "),t("li",[s._v("onDragOver")]),s._v(" "),t("li",[s._v("onDragStar")])]),s._v(" "),t("h3",{attrs:{id:"表单元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#表单元素","aria-hidden":"true"}},[s._v("#")]),s._v(" 表单元素")]),s._v(" "),t("p",[s._v("HTML 表单元素与 React 中的其他 DOM 元素有所不同,因为表单元素生来就保留一些内部状态。")]),s._v(" "),t("p",[s._v("在 HTML 当中，像 "),t("code",[s._v("<input>")]),s._v(", "),t("code",[s._v("<textarea>")]),s._v(", 和 "),t("code",[s._v("<select>")]),s._v(" 这类表单元素会维持自身状态，并根据用户输入进行更新。但在React中，可变的状态通常保存在组件的状态属性中，并且只能用 "),t("code",[s._v("setState()")]),s._v(" 方法进行更新。")]),s._v(" "),t("ul",[t("li",[s._v("1.lable中的for使用HtmlFor")]),s._v(" "),t("li",[s._v("2.input、textarea，我们可以使用 onChange 事件来监听 input 的变化，通过修改 state来修改表单的value")]),s._v(" "),t("li",[s._v("3.在 React 中，不使用 selected 属性，而在根 select 标签上用 value 属性来表示选中项。")]),s._v(" "),t("li",[s._v("4.当你有处理多个 input 元素时，你可以通过给每个元素添加一个 name 属性，来让处理函数根据 event.target.name 的值来选择做什么。")])]),s._v(" "),t("h2",{attrs:{id:"render函数的多种返回值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#render函数的多种返回值","aria-hidden":"true"}},[s._v("#")]),s._v(" render函数的多种返回值")]),s._v(" "),t("p",[s._v("在"),t("code",[s._v("React16")]),s._v("之前，类组件的"),t("code",[s._v("render")]),s._v("函数和函数组件的返回值是有限制的，只能返回"),t("code",[s._v("html")]),s._v("和自定义组件,并且如果返回多行"),t("code",[s._v("Dom")]),s._v("的话必须在外层加入一个根元素包裹起来。React16出现之后在"),t("code",[s._v("render")]),s._v("函数返回值上发生了很大的变化，让我们在写React代码过程中更顺滑。")]),s._v(" "),t("blockquote",[t("p",[s._v("string\n"),t("code",[s._v("React16")]),s._v("问世之后，"),t("code",[s._v("render")]),s._v("函数可以返回一串"),t("code",[s._v("String")]),s._v("，渲染的时候直接渲染到视图中。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('render(){\n    return "Hello React";\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("blockquote",[t("p",[s._v("null\nReact16之后如果组件不需要在视图上渲染的时候，可以直接返回一个null。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("render(){\n    return null;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("blockquote",[t("p",[s._v("array")])]),s._v(" "),t("p",[s._v("React16出现之后"),t("code",[s._v("render")]),s._v("函数支持返回值中返回一个数组，在渲染过程中会把数组中的东西，依次渲染出来。这可以作为多行元素输出而不是用外层包裹元素的一种解决方案，但是不怎么好。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("render(){\n    return [\n        <li>1</li>,\n        <li>2</li>,\n        <li>3</li>,\n        <li>4</li>\n    ]\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("blockquote",[t("p",[s._v("fragments\n我认为"),t("code",[s._v("render")]),s._v("支持返回值为"),t("code",[s._v("fragments")]),s._v("才是这次"),t("code",[s._v("React16")]),s._v("在返回值上的重头戏。")])]),s._v(" "),t("p",[s._v("以前在写"),t("code",[s._v("多行DOM")]),s._v("元素输出的时候会在最外层加一层根元素，这样才不会报错。一个多行"),t("code",[s._v("DOM")]),s._v("添加一个根元素不算什么，那如果一个项目很大，这得多渲染多少个"),t("code",[s._v("div，")]),s._v("这要浪费多少渲染资源。可能React开发者也遇到了这个问题，所以才新增了这个返回值—"),t("code",[s._v("fragment")]),s._v("s。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    render(){\n        return (\n            //这两个标签在渲染的时候不会渲染成DOM元\n            <>\n                <li>1</li>\n                <li>2</li>\n                <li>3</li>\n                <li>4</li>\n            </>\n        )\n    }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h2",{attrs:{id:"数据的不可变性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据的不可变性","aria-hidden":"true"}},[s._v("#")]),s._v(" 数据的不可变性")]),s._v(" "),t("p",[s._v("不可变性：当数据改变后是一新的对象和原本的对象没有关系，不就可以比较了。这种方式有两种实现方式。")]),s._v(" "),t("blockquote",[t("p",[s._v("方法一：Clone")])]),s._v(" "),t("p",[s._v("克隆分为"),t("strong",[s._v("浅克隆")]),s._v("和"),t("strong",[s._v("深克隆")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("浅克隆：只是把对象的第一层属性克隆下来，如果内部有对象或者数组的话则不会再继续克隆。")]),s._v(" "),t("li",[s._v("深克隆：深度克隆一个对象，如果一个对象内部还有一个对象的话，则继续克隆。深度克隆除了值相同其他没有任何联系。")])]),s._v(" "),t("p",[s._v("对于"),t("code",[s._v("PureComponent")]),s._v("我们需要使用深克隆。但是你有没有想过，当我只是改变对象的一个属性的时候，需要把所有的属性全部都克隆一遍，会浪费很多内存，并且深度克隆的时间更长。因为优化这一点，反而浪费更多的空间和时间，这是得不偿失的")]),s._v(" "),t("blockquote",[t("p",[s._v("方法二：IMMUTABLE库\n那么，如果我在改变一个对象的时候，只是改变需要改变的值，把没有改变的值全部都共享下来，是不是就可以解决克隆所带来的问题？Immutable就是为这而生。")])]),s._v(" "),t("p",[s._v("Immutable是一个基于函数式编程的库，Facebook致力于3年时间把这个库打造出来。")]),s._v(" "),t("p",[s._v("Immutable采用一种共享引用的方式，只会改变改变节点数据的那个分支的节点，其他分支节点空想引用。")]),s._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-immutable.gif"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-immutable.gif",alt:""}})])]),s._v(" "),t("blockquote",[t("p",[s._v("使用方式\n安装Immutable包")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("npm install immutable –save\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("在项目中引入")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import { List } from “immutable”;\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/immuable.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/immuable.png",alt:""}})])]),s._v(" "),t("p",[s._v("从上图可以看出immuable库相当于生成俩个不一样的对象，不是在引用传递，相当于生成一个对象，深拷贝过了。")]),s._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"使用",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/immuable使用.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/immuable%E4%BD%BF%E7%94%A8.png",alt:"使用"}})])]),s._v(" "),t("p",[s._v("通过fromjs方法包一下目标对象，后边用一个get和set方法去更改对象。\n详情可以查看"),t("a",{attrs:{href:"http://immutables.github.io/",target:"_blank",rel:"noopener noreferrer"}},[s._v("immuable官网"),t("OutboundLink")],1)]),s._v(" "),t("h2",{attrs:{id:"组件介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件介绍","aria-hidden":"true"}},[s._v("#")]),s._v(" 组件介绍")]),s._v(" "),t("h3",{attrs:{id:"普通组件component"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#普通组件component","aria-hidden":"true"}},[s._v("#")]),s._v(" 普通组件component")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('class Greeting extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: props.initialCount };\n  }\n  static defaultProps = {\n    name: "普通Component组件"\n  };\n  render() {\n    //return <h4 className="text-warning">Hello, {this.props.name}</h4>\n    // return \'我是一个字符串组件 🚀!\';\n    return [\n      // 不要忘记 key :)\n      <li key="A">First item</li>,\n      <li key="B">Second item</li>,\n      <li key="C">Third item</li>,\n    ];\n  }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[s._v("React16新增了"),t("code",[s._v("render")]),s._v(" 新的返回类型："),t("code",[s._v("fragments")]),s._v(" 和 "),t("code",[s._v("strings")]),s._v("、"),t("code",[s._v("null")]),s._v("、"),t("code",[s._v("Array")])]),s._v(" "),t("h3",{attrs:{id:"纯组件purecomponent"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#纯组件purecomponent","aria-hidden":"true"}},[s._v("#")]),s._v(" 纯组件PureComponent")]),s._v(" "),t("p",[t("code",[s._v("PureComponent")]),s._v("的自动为我们添加的"),t("code",[s._v("shouldComponentUpate")]),s._v("函数")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import React, { PureComponent } from "react";\nclass CounterButton extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = { count: 1 };\n  }\n\n  render() {\n    return (\n      <button\n        className="btn btn-info"\n        onClick={() => this.setState(state => ({ count: state.count + 1 }))}\n      >\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\nexport default CounterButton;\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("h3",{attrs:{id:"纯函数组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#纯函数组件","aria-hidden":"true"}},[s._v("#")]),s._v(" 纯函数组件")]),s._v(" "),t("p",[s._v("函数式组件其实就是对函数式编程的践行。")]),s._v(" "),t("p",[s._v("没有自身的状态，相同的"),t("code",[s._v("props")]),s._v("输入必然会获得完全相同的组件展示。不需要关心组件的一些生命周期函数和渲染的钩子更简洁。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const Button = ({ day }) => {\n  return (\n    <div>\n      <button className=\"btn btn-warning\">我是 {day.name}</button>\n    </div>\n  );\n};\nconst message = {\n  name:'纯函数组件'\n}\nclass Greeting extends Component {\n  render() {\n    return <Button day={message}></Button>;\n  }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("h3",{attrs:{id:"高阶组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高阶组件","aria-hidden":"true"}},[s._v("#")]),s._v(" 高阶组件")]),s._v(" "),t("p",[s._v("高阶组件可以说也是高阶函数,就是一个没有副作用的纯函数,只是增强剂是一个组件，被增强的也组件，返回的也是组件。。")]),s._v(" "),t("blockquote",[t("p",[s._v("高阶组件的作用")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("当一个组件不具有某些功能的时候，可以通过HOC组件把相应的功能加持在当前组件上。相当于对组件的一种增强。")])]),s._v(" "),t("li",[t("p",[s._v("同时还可以抽离组件中公共的部分，通过高阶组件把所需要的东西附加上去。")])])]),s._v(" "),t("blockquote",[t("p",[s._v("高阶组件工厂模式")])]),s._v(" "),t("p",[s._v("在构建高阶组件的时候，如果需要一起其他的配置或者参数等，可以封装成高阶组件的工厂模式。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const HOCFactor = (...params) => {\n    //这里返回函数为什么要有函数名？\n    //为了函数调试错误，函数执行有一个函数的执行堆栈，写上函数名而不是用匿名函数，是为了能够更好的定位错误。\n    return  HOCFactorer = (WrapperComponent) => {\n        return class HOC extends Component{\n            render(){\n                return <WrapperComponent {...this.props} />\n            }\n        }\n    } \n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("blockquote",[t("p",[s._v("高阶组件的两种使用方式")])]),s._v(" "),t("p",[s._v("从上文知道，高阶组件其实就是一个函数接受一个组件作为参数，再返回一个新的组件出来。自从ES6盛行之后，调用方式也有两种：")]),s._v(" "),t("ul",[t("li",[s._v("一种是类的装饰其方式")])]),s._v(" "),t("p",[t("strong",[s._v("Decorator方式")])]),s._v(" "),t("p",[s._v("ES6中类的装饰器可以修改类的行为，并且在编译阶段就会修改。其实装饰其就是一个函数，只不过加上了修饰就变成了再编译时期执行的函数。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("@Test\nclass A{}\n//等同于\nA = Test(A) || A\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("接下来就是Test这个函数了，Test函数会指定第一个参数为对哪一个类进行装饰，也可以说成是目标类。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('function Test(target){\n    target.name="Decorator";\n    return target;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("如果想在装饰的时候传入一些参数，可以采用这样的写法")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('@Test("Hello Class")\nclass A{}\nfunction Test(...args){\n    return function test(target){\n        target.name = args;\n    }\n}\n//等同于\nA = Test(A) || A;\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("使用装饰器构建高阶函数。使用上面工厂模式中的高阶函数。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("@HOCFactor({})\nclass WrappedComponent extends Component{\n    render(){\n        return <p>普通组件</p>\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("就这么简单。")]),s._v(" "),t("ul",[t("li",[s._v("还有一种是函数的调用方式。\n函数调用方式就很平常。平时写代码的时候调用函数的写法相同。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class WrappedComponent extends Component{\n    render(){\n        return <p>普通组件</p>\n    }\n};\nWrappedComponent = HOCFactor({})(WrappedComponent);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("ul",[t("li",[s._v("多种高阶函数组合调用\n当需要多种高阶函数组合调用的时候。两种高阶函数同样有两种办法。")])]),s._v(" "),t("p",[t("strong",[t("code",[s._v("Decorator")]),s._v(" 装饰器方式")]),s._v("：如果对一个类定义多个装饰器，对于工厂模式来说是由外向内触发，而对于装饰器来说是由内向外触发。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import React,{Component} from "react";\n\nconst HOCFactor = (...params) => {\n    console.log("工厂1")\n    return  function HOCFactorer(WrapperComponent){\n        console.log("Decorator1")\n        return class HOC extends Component{\n            render(){\n                return (\n                    <div>\n                        高阶组件\n                        <WrapperComponent {...this.props} />\n                    </div>\n                )\n            }\n        }\n    } \n}\n\nconst HOCFactor1 = (...params) => {\n    console.log("工厂2")\n    return function (WrapperComponent){\n        console.log("Decorator2")\n        return class HOC extends Component {\n            render(){\n                return (\n                    <div>\n                        高阶组件1\n                        <WrapperComponent {...this.props}/>\n                    </div>\n                )\n            }\n        }\n    }\n}\n\n@HOCFactor({})\n@HOCFactor1()\nclass WrappedComponent extends Component{\n    render(){\n        return <p>普通组件</p>\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br")])]),t("p",[t("strong",[s._v("函数调用方式")])]),s._v(" "),t("p",[s._v("函数调用方式调用多个高阶函数，需要使用一个组合函数。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const compose = (...fns) => fns.reduce((f,g) => (...args) => f(g(...args)));\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("还是使用上面两个高阶函数和组件。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const composeComponent = compose(HOCFactor(),HOCFactor1())\nWrappedComponent = composeComponent(WrappedComponent)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ul",[t("li",[s._v("总结")])]),s._v(" "),t("p",[s._v("高阶函数的奇妙可以解决我们很多问题，给组件添加功能，抽离公共能力等等，但是高阶组件的出现明显的增加了组件间的复杂程度，让组件嵌套的更深了。还是需要在业务中按需选择吧。")]),s._v(" "),t("h2",{attrs:{id:"组件插槽"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件插槽","aria-hidden":"true"}},[s._v("#")]),s._v(" 组件插槽")]),s._v(" "),t("blockquote",[t("p",[s._v("什么是插槽???\n插槽就是事先定一个容器，当组件渲染的时候把子组件渲染到事先定义的容器里面。")])]),s._v(" "),t("p",[t("code",[s._v("React")]),s._v("提供了一个顶级方法"),t("code",[s._v("ReactDom.createPortal()")]),s._v("，使我们有能力把一个子组件渲染到父组件 "),t("code",[s._v("DOM")]),s._v(" 层级以外的 "),t("code",[s._v("DOM")]),s._v(" 节点上。")]),s._v(" "),t("blockquote",[t("p",[s._v("使用插槽\n首先要创建一个插槽容器，容器是单纯的html。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('const portalElm = document.createElement("div");\ndocument.body.appendChild(portalElm);\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("创建完插槽之后要定义一个插槽组件,插槽组件使用React顶级API "),t("code",[s._v("ReactDom.createPortal()")]),s._v("方法把所需要渲染的DOM元素中。")]),s._v(" "),t("p",[s._v("**注意：**这里的DOM元素是已存在的DOM元素，不可以是Vdom，不能是ref取到的元素。")]),s._v(" "),t("blockquote",[t("p",[s._v("ReactDom.createPortal API")])]),s._v(" "),t("p",[s._v("这个API接受两个参数：")]),s._v(" "),t("ul",[t("li",[s._v("第一个参数是所要插入的子组件。")]),s._v(" "),t("li",[s._v("第二个参数是插槽容器DOM元素。")])]),s._v(" "),t("blockquote",[t("p",[s._v("定义插槽组件")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const Tip = ({children,container}) => ReactDom.createPortal(children,container);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("插槽组件保持纯度，组件接受一个"),t("code",[s._v("container")]),s._v("属性，并把所有的子组件渲染到指定"),t("code",[s._v("container")]),s._v("指定的DOM中去。")]),s._v(" "),t("blockquote",[t("p",[s._v("在组件中使用")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('class Greeting extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            todos : [\n                "react",\n                "react-dom",\n                "react-redux"\n            ]\n        }\n    }\n    render(){\n        return(\n            <>\n                <Tip container={portalElm}>\n                    {this.state.todos.map((todo,index)=> <li key={index}>{todo}</li> )}\n                </Tip>\n                //如果只有一个的话\n                //<div>{ReactDOM.createPortal(<span>Portal组件</span>, portalElm)}</div>\n            </>\n        )\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("blockquote",[t("p",[s._v("应用场景\n在开发过程中，有时候我们需要类似于模态，Tips中的信息，还有如果有错误信息，需要把错误在一个固定的位置显示，这样的场景下可以使用插槽。")])]),s._v(" "),t("h2",{attrs:{id:"按需加载和异步组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#按需加载和异步组件","aria-hidden":"true"}},[s._v("#")]),s._v(" 按需加载和异步组件")]),s._v(" "),t("blockquote",[t("p",[s._v("按需加载")])]),s._v(" "),t("p",[s._v("随着前端工程化的发展，我们更倾向于使用自动化构建工具构建项目，构建工具可以完全使用模块化的方式完成项目的构建，便于维护和开发。我们在使用自动化构建工具通常会把代码打包到一个文件中去"),t("code",[s._v("main.js")]),s._v("，这样的好处在与当请求网页只需要加载这一个文件就可以展示整个应用。但是，随着网页功能的不断扩展和项目的不断增大，这反而带来了网页加载速度慢、交互卡顿的问题。原因是整个应用都在一个文件里面导致文件很大，从而加载很慢。于是就必须把代码分割开来，按需加载。")]),s._v(" "),t("blockquote",[t("p",[s._v("Webpack的按需加载")])]),s._v(" "),t("p",[s._v("在使用Webpack构建项目的时候可以采用webpack的按需加载功能，Webpack采用动态"),t("code",[s._v("import")]),s._v("的方式按需加载模块。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import(/* webpackChunkName: 'module'*/\"module\").then(() => {\n        //todo\n}).catch(_ => console.log('It is an error'))\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("blockquote",[t("p",[s._v("React16之前的按需加载")])]),s._v(" "),t("p",[s._v("React16之前也可以使用Webpack的方式进行按需加载，但当时最流行的一种方式是"),t("code",[s._v("React-loadable")]),s._v("库提供的按需加载React组件，它利用动态"),t("code",[s._v("import")]),s._v("的语法，使用Promise语法加载React组件。同时，"),t("code",[s._v("React-loadable")]),s._v("支持React的服务端渲染。")]),s._v(" "),t("p",[s._v("例如：一个按需加载组件")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("export default  function DemoComponent() {\n\nreturn (\n        <div>\n            <p>demo component</p>\n\n        </div>\n    )\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("在加载的时候我们想让上面的代码不显示，同时把它单独打包到一个文件中，我们来看一个"),t("code",[s._v("React-loadable")]),s._v("官网的例子：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import Loadavle from "react-loadable";\nimport Loading from "./my-loading-component";\nconst LoadableComponent = Loadable({\n    loader: () => import(\'./my-component\'),\n    loading: Loading\n})\nexport default class extends React.Component{\n    render(){\n        return <LoadableComponent/>\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("上面代码中react-loadable使用动态import()方法，并将导入的组件分配给loader属性。同时，react-loadable提供了一个loading属性，以设置在加载组件时将展示的组件。")]),s._v(" "),t("blockquote",[t("p",[s._v("React16：Lazy组件")])]),s._v(" "),t("p",[s._v("React16中Lazy组件使用动态import的方式加载组件，首先需要在"),t("code",[s._v(".babelrc")]),s._v("里面配置动态"),t("code",[s._v("import")]),s._v("的插件。")]),s._v(" "),t("p",[t("strong",[s._v("注意")]),s._v("：只有lazy组件才能在suspense组件中支持。什么是Suspense组件继续往下读。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('{\n    "presets": ["@babel/preset-env","@babel/preset-react"],\n    "plugins":[\n        "@babel/plugin-syntax-dynamic-import"\n    ]\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("blockquote",[t("p",[s._v("Lazy按需加载组件很简单")])]),s._v(" "),t("p",[s._v("首先定义一个简单的组件")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import React from "react";\nexport default ()=> <p className="text-success">Lazy Component</p>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("使用lazy组件的方式引入。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import React, {lazy} from "react";\nconst LazyComp = lazy(() => import("./lazy.jsx"));\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("使用")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('export default class App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: "Hello World"\n        }\n    }\n    render() {\n        return (\n           <Suspense fallback={"fdas"}>\n                <LazyComp />\n                \n            </Suspense>\n        )\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[s._v("使用控制台检查一下 我们发现，多了一个"),t("code",[s._v("0.js")]),s._v("文件，这个文件就是那个按需加载的组件。代码拆分成功了，但是并没有到按需加载，反而是直接加载了。")]),s._v(" "),t("blockquote",[t("p",[s._v("变量控制加载\n采用在状态中定义一个boolean类型的变量，使用这个变量来控制否加载。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('export default class Suspenses extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isload: false\n        }\n    }\n    render() {\n        return (\n            <Suspense fallback={"fdas"}>\n                <button onClick={() => { this.setState({ isload: !this.state.isload }) }}>click</button>\n                {this.state.isload ? <LazyComp /> : void 0}\n            </Suspense>\n\n        )\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("p",[s._v("这时候发现并没有加载"),t("code",[s._v("0.js")]),s._v("，点击以下click试试。 点击之后发现，组件加载出来了，同时js文件也加载出来了。")]),s._v(" "),t("blockquote",[t("p",[s._v("异步组件"),t("code",[s._v("Suspense")])])]),s._v(" "),t("p",[s._v("在Lazy组件中使用到了这个Suspense组件，这个组件是什么？")]),s._v(" "),t("p",[s._v("Suspense组件React16提供的一种支持异步组件的方式。")]),s._v(" "),t("p",[s._v("Suspense组件调用异步数据必使用一个fetcher，这个是必须的，这个是必须的，这个是必须的。")]),s._v(" "),t("p",[s._v("创建一个fetcher")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('const createFetcher = promiseTask => {\n    var cached = {};\n    let ref = cached;\n    return ()=> {\n        const task = promiseTask();\n        task.then(res=>{\n            ref = res;\n        });\n        console.log("-----".ref);\n        console.log("=====",cached);\n        //当ref!=== cached 就表示加载完成了,\n        //如果 ref === cached 也就是没有加载完,throw一个task,就相当于报错。内部使用轮训的方式\n        if(ref === cached){\n            throw task; \n        }\n        //得到结果输出\n        console.log("++++++",ref);\n        return ref;\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("p",[s._v("首先模拟一异步数据")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const fetchApi = ()=> {\n    const promise = new Promise((resolve) => {\n        setTimeout(()=>{\n            resolve('Data resolved');\n        },3000)\n    })\n    return promise;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("创建一个Suspenseomp组件，用于获取显示异步信息。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('const requestData = createFetcher(fetchApi);\n\nconst SuspenseComp = () => {\n    const data = requestData();\n    return <p className ="text-warngin"> {data} </p>\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("创建一个组件，并使用Suspense组件")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("export default () => (\n    <Suspense fallback={ <div>替换的数据</div> }>\n        <SuspenseComp />\n        <LazyComp />\n    </Suspense>\n)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("Suspense组件必须接受一个"),t("code",[s._v("fallback")]),s._v("作为一个属性。当数据还未请求过来使用"),t("code",[s._v("fallback")]),s._v("中的数据来作为dom渲染，请求完成后会数据替换掉"),t("code",[s._v("fallback")]),s._v("的内容。")]),s._v(" "),t("blockquote",[t("p",[s._v("需要注意的地方")])]),s._v(" "),t("p",[t("code",[s._v("Suspense")]),s._v("组件中可以写多个异步组件，它相当于"),t("code",[s._v("Promise.all")]),s._v("方法，"),t("strong",[s._v("必须等所有的组件数据都请求过来之后才会渲染")]),s._v("，也可以说成渲染时间为请求时间最长的那个异步组件的时间。")]),s._v(" "),t("p",[s._v("上面这种方式开发起来真的挺不舒服的，还需要写"),t("code",[s._v("fetcher")]),s._v("之类的东西，很麻烦，还有官方提供了一个小的"),t("code",[s._v("hook")]),s._v("，让开发变得非常简单。")]),s._v(" "),t("blockquote",[t("p",[s._v("官方的库–react-hooks-fetch")])]),s._v(" "),t("p",[s._v("引入")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import {useFetch } from "react-hooks-fetch";\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这个库提供了一个"),t("code",[s._v("useFetch")]),s._v("方法用于网络请求，我以一个网上的请求接口为例：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const SuspenseComp = () => {\n    const {error,data} = useFetch('http://jsonplaceholder.typicode.com/posts');\n    console.log(data);\n    //如果error存在，返回出错。\n    if(error){\n        return \"出错了\";\n    }\n    //如果data不存在返回null\n    if(!data){\n        return null;\n    }\n    //最后返回信息。\n    return <p>{data}</p>\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[t("code",[s._v("useFetch")]),s._v("方返回值有两个属性，一个"),t("code",[s._v("error")]),s._v("，一个是"),t("code",[s._v("data")]),s._v("。"),t("code",[s._v("error")]),s._v("用来判断请求过程中是否出错，"),t("code",[s._v("data")]),s._v("是请求的数据。就这么简单就ok了。")]),s._v(" "),t("p",[s._v("使用和使用普通方式相同。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("export default () => (\n    <Suspense fallback={ <div>替换的数据</div> }>\n        <SuspenseComp />\n        <LazyComp />\n    </Suspense>\n)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h2",{attrs:{id:"memo组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#memo组件","aria-hidden":"true"}},[s._v("#")]),s._v(" Memo组件")]),s._v(" "),t("p",[s._v("memo组件，为函数式组件锦上添花,Memo组件是一个高阶函数，它可以将函数组件转换成类似于PureCmponent组件。")]),s._v(" "),t("p",[s._v("我们都知道"),t("code",[s._v("PureComponent")]),s._v("是一个带有"),t("code",[s._v("shouldComponentUpdate")]),s._v("优化的组件，纯函数组件是无法写生命周期的，对于一些相应的优化无法左右，比如就是"),t("code",[s._v("shouldComponentUpdate")]),s._v("钩子函数优化，"),t("code",[s._v("Memo")]),s._v("可以提供这种方式，把纯函数组件改成带有优化的类似"),t("code",[s._v("Pureomponent")]),s._v("组件，让性能更好。")]),s._v(" "),t("p",[t("code",[s._v("Memo")]),s._v("必须显示的指定以什么样的规则执行"),t("code",[s._v("shouldComponentUpdate")]),s._v("，也就是说需要传入一个方法作为"),t("code",[s._v("shouldComponentUpdate")]),s._v("来执行。")]),s._v(" "),t("p",[s._v("实战-todoList\n首先写一个函数组件,让其在渲染的时候打印一行文字。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import React, {memo, Component} from \"react\";\nconst Child = ({todo}) => {\n    console.log(\"I am rendering\");\n    return <li>{todo}</li>\n}\n然后写一个todoList组件，用于渲染函数组件。\n\nexport default class TodoList extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            todos: [\n                'hello1',\n                'hello2',\n                'hello3']\n        }\n    }\n    clickHandle(){\n        this.setState({todos:this.state.todos.concat(['hello4'])})\n    }\n    render(){\n        return (\n            <>\n                <button onClick={()=>{this.clickHandle()}}>click</button>\n                <ul>\n                    {this.state.todos.map((todo,index) => (\n                        <Child todo={todo} key={index}/>\n                    ))}\n                </ul>\n            </>\n        )\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br")])]),t("blockquote",[t("p",[s._v("没有memo组件的情况下")])]),s._v(" "),t("p",[s._v("上面代码是没有memo组件的情况，使用按钮往todos中添加一个数据，观察渲染情况。 可以发现所有的函数组件全部都渲染了，这同样也是函数组件的一个痛处。")]),s._v(" "),t("blockquote",[t("p",[s._v("有mome组件的情况下")])]),s._v(" "),t("p",[t("code",[s._v("memo")]),s._v("组件需要手动指定以什么样的规则执行"),t("code",[s._v("shouldComponentUpdat")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const areEqual = (prevProps, nextProps) => {\n    if(prevProps.todo === nextProps.todo){\n        return true;\n    } else {\n        return false;\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("改造组件")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const MemoComp = memo(Child,areEqual);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("使用新的组件渲染。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("export default class TodoList extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            todos: [\n                'hello1',\n                'hello2',\n                'hello3'\n            ]\n        }\n    }\n    clickHandle(){\n        this.setState({todos:this.state.todos.concat(['hello4'])})\n    }\n    render(){\n        return (\n            <>\n                <button onClick={()=>{this.clickHandle()}}>click</button>\n                <ul>\n                    {this.state.todos.map((todo,index) => (\n                        <MemoComp todo={todo} key={index}/>\n                    ))}\n                </ul>\n            </>\n        )\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("p",[s._v("观察一下情况。 完美。")]),s._v(" "),t("p",[s._v("可以看出来这个组件的出现，可以说把函数式组件又推上了一个地位。")]),s._v(" "),t("h2",{attrs:{id:"contextapi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contextapi","aria-hidden":"true"}},[s._v("#")]),s._v(" ContextAPI")]),s._v(" "),t("p",[t("span",{attrs:{id:"ContextAPI"}}),s._v(" "),t("code",[s._v("Context API")]),s._v(" 主要解决"),t("code",[s._v("props")]),s._v("向对层嵌套的子组件传递的问题(爷孙组件props传递)，原理是定义一个全局对象，通过订阅发布的方式进行数据的传递。")]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("React.crateContext")]),s._v("\nContext Api使用"),t("code",[s._v("React.crateContext")]),s._v("方法构建，并且定义一个默认值。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('const {Provider, Consumer} = React.createContext("default");\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("返回的对象中有两个组件。这两个组件组合成订阅发布模式")]),s._v(" "),t("ul",[t("li",[s._v("Provider 提供者(发布者)")]),s._v(" "),t("li",[s._v("Consumer 消费者(订阅者)")])]),s._v(" "),t("p",[s._v("在爷孙组件传值的场景中，爷爷组件负责数据的提供，孙子组件负责数据的消费。")]),s._v(" "),t("blockquote",[t("p",[s._v("Provider组件")])]),s._v(" "),t("p",[t("code",[s._v("Provide")]),s._v("是提供者，在爷孙组件中，"),t("code",[s._v("provide")]),s._v("就相当于爷爷组件向孙子组件提供数据的组件。")]),s._v(" "),t("p",[s._v("所有需要传递的数据放在Provider中，所有的在子组件都可以接受的到。形成子孙节点传递的扁平化。")]),s._v(" "),t("blockquote",[t("p",[s._v("使用Provider")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('<Provider\n          value={{ newContext: this.state.newContext, yideng: "普通字符串🍌" }}\n        >\n          {this.props.children}\n        </Provider>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("注意")]),s._v("：value不是传值中的属性，而是必须要这样写。")]),s._v(" "),t("blockquote",[t("p",[s._v("使用Consumer\nConsumer是消费者，也就是说，在爷孙组件中，爷爷组件提供资源，孙子组件来消费。")])]),s._v(" "),t("p",[s._v("Consumer同样也是一个组件。接受到的是爷爷组件中Provider组件发送过来的值。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('const Child = (props,context) => {\n    return (\n        <Consumer>\n            {value => (\n                <p className="text-warning">子节点=》newContext :{value.newContext}</p>\n            )}\n        </Consumer>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("由于"),t("code",[s._v("Provider")]),s._v("组件中所传递的对象是"),t("code",[s._v("this.props.children")]),s._v(",所以必须这样写：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("export default class Context extends React.Component {\n    render(){\n        return (\n            <Parent>\n                <Child/>\n            </Parent>\n        )\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("总结")]),s._v(" "),t("p",[s._v("Context API提供了一套订阅发布者机制，这套机制出现，在爷孙组件传值上方便了很多。同时，我认为这个机制的出现，在一定程度上是可以尝试取代react-redux的Provider。")]),s._v(" "),t("h2",{attrs:{id:"新ref的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新ref的使用","aria-hidden":"true"}},[s._v("#")]),s._v(" 新Ref的使用")]),s._v(" "),t("blockquote",[t("p",[s._v("曾经的两种Ref的创建方式")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('render(){\n    return (\n        <>\n            //第一种：第一种是指定指定一个string，通过this.refs.stringRef取到相应的dom元素\n            <p ref="stringRef">span1</p>\n            //第二种：第二种是使用箭头函数的方式把dom元素挂在到类的实例属性上，\n            <p ref={ele=> (this.methodRef = ele)}>span2</p>\n        </>\n    )\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("blockquote",[t("p",[s._v("新Ref的创建方式–React.createRef()\nreact16中的"),t("code",[s._v("ref")]),s._v("创建采用"),t("code",[s._v("React的createRef()")]),s._v("方法构建，创建一个"),t("code",[s._v("ref")]),s._v("，react内部采用每一个"),t("code",[s._v("ref")]),s._v("创建即创建一个"),t("code",[s._v("Symbol")]),s._v("，目的是为了所有的ref不重复。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import React, {Component} from "react";\n\nclass Greeting extends Component {\n    constructor(props){\n        super(props);\n        this.objRef = React.createRef();\n    }\n    render(){\n        return (\n            <p ref={this.objRef}></p>\n        )\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("创建的this.objRef是一个对象，对象中只有一个属性"),t("code",[s._v("current")]),s._v("，"),t("code",[s._v("current")]),s._v("属性就是"),t("code",[s._v("ref")]),s._v("所值的Dom元素。")]),s._v(" "),t("blockquote",[t("p",[s._v("React.forwardRef")])]),s._v(" "),t("p",[t("code",[s._v("forwardRef")]),s._v("是一个"),t("strong",[s._v("高阶组件")]),s._v("，"),t("strong",[s._v("参数传递一个函数组件，并返回一个组件")]),s._v("，函数组件中有两个参数，props和ref，"),t("strong",[s._v("ref就是父组件传递过来的ref，把返回的组件在父组件中使用。")])]),s._v(" "),t("p",[t("code",[s._v("forwardRef")]),s._v("可以让"),t("code",[s._v("ref")]),s._v("进行传递，向其他的组件传递。让"),t("code",[s._v("ref")]),s._v("更好的复用。传递方式为：由父组件创建"),t("code",[s._v("ref")]),s._v("，再把"),t("code",[s._v("ref传")]),s._v("递给子组件，方便父组件使用子组件的DOM元素和更好的管理"),t("code",[s._v("ref")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import React, {forwardRef} from "react";\n\nconst TargetComponent = forwardRef((props,ref) => (\n    <input type="text" ref={ref}/>\n))\n\nexport default class Comp extends React.Component {\n    constructor(props){\n        super(props);\n        this.ref = React.createRef();\n    }\n    componentDidMount(){\n        this.ref.current.value = "父组件向子组件转发ref成功";\n    }\n    render(){\n        return <TargetComponent ref={this.ref} />\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("h2",{attrs:{id:"错误边界组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#错误边界组件","aria-hidden":"true"}},[s._v("#")]),s._v(" 错误边界组件")]),s._v(" "),t("p",[s._v("React16出现一个错误边界组件，它可以捕捉到子组件树中任何位置捕获到错误，并记录这个错误，展示降级的UI而不是让整个组件树崩溃。错误边界组件的捕获错误是渲染期间，在整个生命周期方法以其整个树的构造函数中发生的错误。")]),s._v(" "),t("p",[s._v("React16中错误组件一共除了两个生命周期，两个生命周期都可以捕获错误，只是作用有些不同。")]),s._v(" "),t("blockquote",[t("p",[s._v("错误捕获生命周期的特点")])]),s._v(" "),t("p",[s._v("先说一下错误组件生命周期的特点：")]),s._v(" "),t("ul",[t("li",[s._v("错误组件的生命周期只能在渲染中捕获，但在事件处理程序中不会捕获。")]),s._v(" "),t("li",[s._v("也就是说生命周期只在render渲染阶才会触发。")])]),s._v(" "),t("blockquote",[t("p",[s._v("错误组件生命周期\n错误组件的生命周期一共有两个：")])]),s._v(" "),t("ul",[t("li",[s._v("static getDerivedStateFromError()")]),s._v(" "),t("li",[s._v("componentDidCatch")])]),s._v(" "),t("blockquote",[t("p",[s._v("生命周期的执行时机\n整个生命周期的执行时机分为两个时机：")])]),s._v(" "),t("ul",[t("li",[s._v("1.渲染阶段")]),s._v(" "),t("li",[s._v("2.提交阶段")])]),s._v(" "),t("p",[t("strong",[s._v("渲染时机")]),s._v(" 生命周期执行时机的渲染时机表示组件正在渲染。这个时机执行的生命周期有"),t("code",[s._v("componentWillMount")]),s._v("、"),t("code",[s._v("render")]),s._v("、"),t("code",[s._v("componentWillUpdate")]),s._v("。")]),s._v(" "),t("p",[t("strong",[s._v("提交时机")]),s._v(" 生命周期执行时机的提交时机是表示组件已经渲染完成，正要把Dom元素提交到html文档中去。这个时机执行的生命周期有"),t("code",[s._v("componetDidMount")]),s._v("、"),t("code",[s._v("getSnapshotBeforeUpdate")]),s._v("、"),t("code",[s._v("componentDidUpdate")])]),s._v(" "),t("blockquote",[t("p",[s._v("static getDerivedStateFromError()\n这个生命周期是类组件的一个静态方法，这个生命周期会在后代组件抛出错误后被调用。")])]),s._v(" "),t("p",[s._v("这个钩子函数把抛出的错误作为参数，并且返回一个对象用来更新state。")]),s._v(" "),t("p",[s._v("这个钩子函数在渲染时机调用，因此不允许出现副作用，是一个比较纯的函数。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("//ES5\nstatic getDerivedStateFromError(error){\n        return {\n            hasError: true\n        }\n    }\n//ES6\nconstructor(props) {\n  super(props);\n  this.state = { hasError: false };\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("blockquote",[t("p",[s._v("componentDidCatch\ncomponentDidCatch方法有两个参数。")])]),s._v(" "),t("ul",[t("li",[s._v("第一个参数为err对象，表示错误信息。")]),s._v(" "),t("li",[s._v("第二个错误为info，为一个对象，对象中有一个属性componentStack，表示组件栈追踪，可以很快的找到出现错误的组件。")])]),s._v(" "),t("p",[s._v("componentDidCatch() 会在“提交”阶段被调用，因此允许执行副作用。")]),s._v(" "),t("blockquote",[t("p",[s._v("注意点")])]),s._v(" "),t("p",[s._v("这两个生命周期有优先级问题，即"),t("code",[s._v("getDerivedStateFromError")]),s._v("会比"),t("code",[s._v("componentDidCatch")]),s._v("先调用，如果"),t("code",[s._v("getDerivedStateFromError")]),s._v("中有返回值，则"),t("code",[s._v("componentDidCatch")]),s._v("不会调用。")]),s._v(" "),t("p",[t("code",[s._v("getDerivedStateFromError")]),s._v("不可以有副作用并且返回一个对象用于改变"),t("code",[s._v("state")]),s._v("，适用于作UI降级。")]),s._v(" "),t("blockquote",[t("p",[s._v("componentDidCatch中可以有副作用可以用于发送错误上报到错误服务器。")])]),s._v(" "),t("blockquote",[t("p",[s._v("特别注意：这两个钩子函数不要在一起使用使用。")])]),s._v(" "),t("blockquote",[t("p",[s._v("错误组件")])]),s._v(" "),t("p",[s._v("捕获错误生命周期不建议直接在组件中使用，建议创建一个错误组件，可以把错误组件当作根组件用于捕获全局错误。")]),s._v(" "),t("p",[s._v("定义错误捕获组件")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("class ErrorBoundary extends Component {\n    constructor(props){\n        super(props);\n        this.state = {hasError: false};\n        this.err;\n        this.info;\n    }\n    //捕获报错和报错上报程序库一起使用。\n    componentDidCatch(err,info){\n        this.err = err;\n        this.info = info;\n        this.setState({hasError: true});\n    }\n    render(){\n         if(this.state.hasError){\n            return (\n                <>\n                    <div >\n                        <p>{this.err.message}</p>\n                        <p>{this.info && this.info.componentStack}</p>\n                    </div>\n                    {this.props.children}\n                </> \n            )\n        }\n        return this.props.children;\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br")])]),t("p",[s._v("定义子组件")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('class Profile extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            todos:["hello"]\n        };\n    }\n    chlickHandle(){\n        this.setState({\n            todos: undefined,\n        })\n    }\n    render() {\n        return (\n            <>\n                <button onClick={()=>this.chlickHandle()}>click</button>\n                <span>用户名：{this.state.todos[0]}</span>\n            </>\n        )\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[s._v("使用")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("export default class Greeting extends Component {\n    render(){\n        return (\n            <ErrorBoundary>\n                <Profile />\n            </ErrorBoundary>\n        )\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("blockquote",[t("p",[s._v("与插槽组件配合")])]),s._v(" "),t("p",[s._v("React16同样也除了一个插槽组件，作用是把组件中的数据渲染到特定的Dom元素中。错误组件和插槽组件配合来使用就可以把错误信息渲染到指定的地方显示出来，用来提示用户，从而提高用体验。very beautiful")]),s._v(" "),t("h2",{attrs:{id:"react性能调优"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react性能调优","aria-hidden":"true"}},[s._v("#")]),s._v(" react性能调优")]),s._v(" "),t("h3",{attrs:{id:"单个react组件性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单个react组件性能优化","aria-hidden":"true"}},[s._v("#")]),s._v(" 单个react组件性能优化")]),s._v(" "),t("h2",{attrs:{id:"hooks一览，拥抱函数式编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hooks一览，拥抱函数式编程","aria-hidden":"true"}},[s._v("#")]),s._v(" Hooks一览，拥抱函数式编程")]),s._v(" "),t("p",[s._v("React16.8中加入了Hooks，让React函数式组件再一次升华，那么到底什么是Hooks？")]),s._v(" "),t("p",[s._v("官网是这么说的：Hook是React 16.8中的新增功能。它们允许您在不编写类的情况下使用状态和其他React功能。")]),s._v(" "),t("h3",{attrs:{id:"动机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动机","aria-hidden":"true"}},[s._v("#")]),s._v(" 动机")]),s._v(" "),t("ul",[t("li",[s._v("1.在组件之间重用有状态逻辑很困难")])]),s._v(" "),t("p",[s._v("React 没有提供可复用性行为“附加”到组件的途径，在写类组件的时候，一个类是一个闭包并且"),t("code",[s._v("state")]),s._v("在组件间传递并不怎么友好，虽然可以使用"),t("code",[s._v("props")]),s._v("和"),t("strong",[s._v("高阶组件")]),s._v("来解决，但是这样会组件的结构更麻烦。如果你在 "),t("code",[s._v("React DevTools")]),s._v(" 中观察过 "),t("code",[s._v("React")]),s._v(" 应用，你会发现由 "),t("strong",[s._v("providers，consumers，高阶组件，render props")]),s._v(" 等其他抽象层组成的组件会形成“嵌套地狱”。")]),s._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks1.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks1.png",alt:""}})])]),s._v(" "),t("p",[s._v("使用Hooks，您可以从组件中提取有状态逻辑，以便可以独立测试并重复使用。钩子允许您在不更改组件层次结构的情况下重用有状态逻辑。这样可以轻松地在许多组件之间或与页面之间共享Hook。")]),s._v(" "),t("ul",[t("li",[s._v("2.复杂的组件变得难以理解")])]),s._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks2.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks2.png",alt:""}})]),s._v("\n每个生命周期方法通常包含不相关逻辑的混合。比如说我就想实现一个非常简单的功能，必须要带一堆钩子函数，让一个简单的组件变得很复杂。而且由于不同的生命周期在不同的阶段调用，导致我们会在相应的地方作一些处理，有可能把一些完全不相干的代码因为执行周期相同必须放在同一个生命周期中,这就很容易引发bug;再比如，组件可能会在"),t("code",[s._v("componentDidMount")]),s._v("和中执行一些数据提取"),t("code",[s._v("componentDidUpdate")]),s._v("。但是，相同的"),t("code",[s._v("componentDidMount")]),s._v("方法可能还包含一些不相关的逻辑，用于设置事件侦听器，并执行清理"),t("code",[s._v("componentWillUnmount")]),s._v("。一起更改的相互关联的代码被拆分，但完全不相关的代码最终组合在一个方法中。bug又来了。")]),s._v(" "),t("p",[s._v("为了解决这个问题，Hooks允许您根据相关的部分（例如设置订阅或获取数据）将一个组件拆分为较小的函数，而不是基于生命周期方法强制拆分。您还可以选择使用reducer管理组件的本地状态，以使其更具可预测性。")]),s._v(" "),t("ul",[t("li",[t("ol",{attrs:{start:"3"}},[t("li",[s._v("难以理解的class")])])])]),s._v(" "),t("p",[s._v("文档上说这点主要是学习class是一个难点。因为我自己写es6 class有一段时间了，所以class对我自己来说还是可以的，并且this理解的还可以。")]),s._v(" "),t("p",[s._v("为了解决这些问题，Hooks允许您在没有类的情况下使用更多React的功能。从概念上讲，React组件始终更接近功能。Hooks拥抱功能，但不会牺牲React的实际精神,简单点说可以这么理解，Hooks 的出现本质是把这种面向生命周期编程变成了面向业务逻辑编程。")]),s._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks3.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks3.png",alt:""}})])]),s._v(" "),t("h3",{attrs:{id:"什么是hooks？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是hooks？","aria-hidden":"true"}},[s._v("#")]),s._v(" 什么是Hooks？")]),s._v(" "),t("p",[s._v("那么什么是Hook，Hook顾名思义就是钩子的意思。在函数组件中把React的状态和生命周期等这些特性"),t("strong",[s._v("钩入进入")]),s._v("，这就是React的Hook。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("Hooks 本质是把面向生命周期编程变成了面向业务逻辑编程；")])]),s._v(" "),t("li",[t("p",[s._v("Hooks 使用上是一个逻辑状态盒子，输入输出表示的是一种联系")])]),s._v(" "),t("li",[t("p",[s._v("特指表明React的Hook作用是把类组件的一些特性钩入函数组件中，因在类组件中是不可以使Hook的。")])])]),s._v(" "),t("h3",{attrs:{id:"hooks的使用规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hooks的使用规则","aria-hidden":"true"}},[s._v("#")]),s._v(" Hooks的使用规则")]),s._v(" "),t("p",[s._v("Hook就是javascript函数，但是使用有两个规则：")]),s._v(" "),t("ul",[t("li",[s._v("1.只能在函数的最外层调用hook。不要在循环、条件判断或者子函数中调用。(这个关系到了hooks的执行机制，会在下面hook中说到)")]),s._v(" "),t("li",[s._v("2.只能在React的函数组件中调用Hook。不要在其他javascript函数中调用(自定义hooks中也可以调用)")])]),s._v(" "),t("h3",{attrs:{id:"使用hooks的好处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用hooks的好处","aria-hidden":"true"}},[s._v("#")]),s._v(" 使用Hooks的好处")]),s._v(" "),t("ul",[t("li",[s._v("使用hooks，如果业务变更，就不需要把函数组件修改成类组件。")]),s._v(" "),t("li",[s._v("告别了繁杂的this和合并了难以记忆的生命周期。")]),s._v(" "),t("li",[s._v("支持包装自己的Hooks(自定义Hooks)，是基于纯命令式的api，只关注输入与输出。")]),s._v(" "),t("li",[s._v("更好的完成状态之间的共享，解决原来class组件内部封装的问题，也解决了高阶组件和函数组件的嵌套过深。一个组件一个自己的state，一个组件内可以公用。")])]),s._v(" "),t("h3",{attrs:{id:"内置的hook"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内置的hook","aria-hidden":"true"}},[s._v("#")]),s._v(" 内置的Hook")]),s._v(" "),t("p",[s._v("React一共内置了9种Hook。")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#useState"}},[s._v("useState")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#usEffect"}},[s._v("usEffect")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#useContext"}},[s._v("useContext")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#useReducer"}},[s._v("useReducer")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#useCallback"}},[s._v("useCallback")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#useMemo"}},[s._v("useMemo")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#useRef"}},[s._v("useRef")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#useImperativeHandle"}},[s._v("useImperativeHandle")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#useLayoutEffect"}},[s._v("useLayoutEffect")])]),s._v(" "),t("li",[t("a",{attrs:{href:"#Hook%E7%9A%84%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6"}},[s._v("Hook的执行机制")])])]),s._v(" "),t("h4",{attrs:{id:"usestate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usestate","aria-hidden":"true"}},[s._v("#")]),s._v(" useState")]),s._v(" "),t("p",[t("span",{attrs:{id:"useState"}})]),s._v(" "),t("p",[s._v("以前的函数式组件被成为纯函数组件或者无状态组件，是只能接受父组件传来的props并且只能做展示功能，不能使用state也没有生命周期。")]),s._v(" "),t("p",[s._v("现在State Hook 可以让函数式组件使用状态。")]),s._v(" "),t("p",[t("code",[s._v("useState")]),s._v("是React的一个Hook，它是一个方法，可以传入值作为state的默认值，返回一个数组，数组的第一项是对应的状态(默认值会赋予状态)，数组的第二项是更新状态的函数。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import React, { useState } from "react";\n\nconst Greeting = () => {\n    const states = useState(0);\n    const count = states[0];\n    const setCount = states[1];\n    return (\n       <>\n            <h1> {count} </h1>\n            <button onClick={() => {setCount(count + 1)}}> + </button>\n       </>\n    )\n}\nexport default Greeting;\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("每次取数组的第几项太麻烦，所以官方建议使用ES6数组的解构赋值的方式。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const [count, setCount] = useState(1);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("看起来是不是简便多了。更新代码")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import React, { useState } from "react";\nconst Greeting = () => {\n    const [count, setCount] = useState(0);\n    return (\n       <>\n            <h1> {count} </h1>\n            <button onClick={() => {setCount(count + 1)}}> + </button>\n       </>\n    )\n}\nexport default Greeting;\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-usestate.gif"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-usestate.gif",alt:""}})])]),s._v(" "),t("p",[s._v("我们发现，一般函数调用完成之后，其中的变量都会被回收，而上面代码和图上可以看出每次都是在count的基上相加，并没有消失，为什么呢？ 先埋下疑问点，在Hook的执行机制会提到。")]),s._v(" "),t("h5",{attrs:{id:"使用多次usestate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用多次usestate","aria-hidden":"true"}},[s._v("#")]),s._v(" 使用多次useState")]),s._v(" "),t("p",[s._v("在一个组件中我们不可能只有一个state，useState允许在一个组件中使多次，并且每次使用都是一个全新的状态。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import React, { useState } from "react";\nconst Greeting = () => {\n    const [count, setCount] = useState(0);      //第一次使用\n    const [istrue, setIstrue] = useState(true); //第二次使用\n    return (\n       <>\n            {istrue ? <h1> {count} </h1> : void 0}\n            <button onClick={ () => {setIstrue(!istrue)}}>change</button>\n            <button onClick={() => {setCount(count + 1)}}> + </button>\n       </>\n    )\n}\nexport default Greeting;\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-usestate1.gif"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-usestate1.gif",alt:""}})])]),s._v(" "),t("p",[s._v("上面代码使用两次useState，完美的完成了功能。")]),s._v(" "),t("p",[s._v("那么现在又有疑问了，React是怎么区别多次调用的hooks的呢？先埋下疑问点，在Hook的执行机制的时候会谈到(所有的Hook都是这)。")]),s._v(" "),t("h4",{attrs:{id:"useeffect"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#useeffect","aria-hidden":"true"}},[s._v("#")]),s._v(" useEffect")]),s._v(" "),t("p",[t("span",{attrs:{id:"useEffect"}})]),s._v(" "),t("p",[s._v("既然React Hooks给了函数式组件（或者说是纯函数组件）那么强大的功能(抛弃类组件)，那么组件中总是要会执行副作用操作，纯函数组件保持了函数渲染的纯度，那么要怎么执行副作用呢？")]),s._v(" "),t("p",[s._v("React Hooks 提供了 Effect Hook，可以在函数组件中执行副作用操作，并且是在函数渲染DOM完成后执行副作用操作。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import React, {useEffect} from "react";\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("code",[s._v("useEffect")]),s._v("这个方法传入一个函数作为参数，在函数里面执行副作用代码，并且"),t("strong",[s._v("useEffec的第一个参数还支持返回值为一个函数，这个函数执行相当于组件更新和卸载")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import React, {useState, useEffect} from "react";\n\nconst EffectComponent = () => {\n    useEffect(() => {\n        console.log("useEffect Hook");\n    })\n    return null;\n}\nexport default EffectComponent\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-effect.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-effect.png",alt:""}})])]),s._v(" "),t("h5",{attrs:{id:"与类组件生命周期的比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#与类组件生命周期的比较","aria-hidden":"true"}},[s._v("#")]),s._v(" 与类组件生命周期的比较")]),s._v(" "),t("p",[s._v("我们都知道在类组件中可以在"),t("code",[s._v("componentDidMount")]),s._v("和"),t("code",[s._v("componentDidUpdate")]),s._v("中执行副作用，那么在函数组件中"),t("code",[s._v("useEffect")]),s._v("的参数函数就具有类组件的这两个生命周期的用途，如果"),t("code",[s._v("useEffect")]),s._v("的第一个参数有返回值为函数的话，函数的返回值相当于"),t("code",[s._v("componentWillUnmount")]),s._v("。可以说useEffect把这三个API合成了一个。")]),s._v(" "),t("p",[t("strong",[s._v("最常见的做法就是就是在函数参数中写事件注册，在函数的返回函数中写事件销毁。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import React, {useState, useEffect} from "react";\n\nconst EffectComponent = () => {\n    const [width, setWidth] = useState(window.innerWidth);\n    const resizeHandle = () => {\n        setWidth(window.innerWidth);\n    }\n    useEffect(() => {\n        window.addEventListener("resize", resizeHandle);\n        return () => {\n            window.removeEventListener("resize", resizeHandle)\n        }\n    })\n    return (\n        <h1>{width}</h1>\n    );\n}\nexport default EffectComponent\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-effect1.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-effect1.png",alt:""}})])]),s._v(" "),t("h5",{attrs:{id:"useeffect的执行时机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#useeffect的执行时机","aria-hidden":"true"}},[s._v("#")]),s._v(" useEffect的执行时机")]),s._v(" "),t("p",[s._v("从上面我们知道了useEffect可以说是类组件中三种生命周期的结合，但是它的执行时机是什么样的呢？从一个小Demo来说")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import React, {useState, useEffect} from "react";\nconst EffectComponent = () => {\n    const [count, setCount] = useState(1);\n    useEffect(() => {\n        console.log("定义事件接口")\n        return () => {\n            console.log("注销事件接口")\n        }\n    })\n    return (\n        <>  \n            {console.log("渲染")}\n            <h1>{count}</h1>\n            <button onClick={() => {setCount(count + 1)}}> + </button>\n        </>\n    );\n}\nexport default EffectComponent\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-effect2.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-effect2.png",alt:""}})])]),s._v(" "),t("p",[s._v("在开始的时候有提到，useEffec执行副作时机在渲染后，确实是这样。细心的你会发现，当我点击+号的时候，怎么会出现注销事件接口？ useEffec函数中的返回函数不是在组件卸载的时候被调用吗？")]),s._v(" "),t("p",[s._v("我个人的理解是"),t("code",[s._v("useEffect")]),s._v("函数参数中返回函数所代表的销毁是上一次"),t("code",[s._v("useEffect")]),s._v("自己的销毁，"),t("strong",[s._v("因为每次重新执行函数组件都会重新生成新的Effect")]),s._v("。假如没有销毁，由于useEffect的函数参数会在首次渲染和更新的时候调用，这就有了一致命的缺点：如果我是定义的事件，每次更新都会执行，那么岂不是在事件还没有移除掉又定义了一次，所以"),t("code",[s._v("useEffect")]),s._v("加入了这个功能。")]),s._v(" "),t("p",[s._v("我们来验证一下上述论述是否正确。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import React, {useState, useEffect} from "react";\n\nconst EffectComponent = () => {\n    const [width, setWidth] = useState(window.innerWidth);\n    const [count, setCount] = useState(1);\n    const resizeHandle = () => {\n        setWidth(window.innerWidth);\n        console.log(window.innerWidth);\n    }\n    useEffect(() => {\n        window.addEventListener("resize", resizeHandle);\n        return () => {\n            // window.removeEventListener("resize", resizeHandle)\n        }\n    })\n    return (\n        <>\n            <h1>{count}</h1>\n            <button onClick={() => {setCount(count + 1)}}>+</button>\n        </>\n    );\n}\nexport default EffectComponent\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("p",[s._v("上面代码我把"),t("code",[s._v("useEffect")]),s._v(" 中"),t("code",[s._v("return")]),s._v("的事件移除注释掉，同时在事件处理函数中打印一下窗口宽度。 可以看出当我第一次触发窗口事件的时候，直接打印了三次。")]),s._v(" "),t("h5",{attrs:{id:"useeffect的第二个参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#useeffect的第二个参数","aria-hidden":"true"}},[s._v("#")]),s._v(" useEffect的第二个参数")]),s._v(" "),t("p",[s._v("**当"),t("code",[s._v("useEffect")]),s._v("的第二个参数不写的话(上面都没写),任何更新都会触发"),t("code",[s._v("useEffect")]),s._v("。**那么下面说一下"),t("code",[s._v("useEffect")]),s._v("的第二个参数。")]),s._v(" "),t("p",[t("code",[s._v("useEffect")]),s._v("的第二个参数是一个数组，表示哪些"),t("code",[s._v("state")]),s._v("和"),t("code",[s._v("props")]),s._v("来执行副作用。")]),s._v(" "),t("p",[s._v("数组为空的时候，"),t("code",[s._v("useEffect")]),s._v("就相当于"),t("code",[s._v("componentDidMount")]),s._v("和"),t("code",[s._v("componentWillUnmount")]),s._v("这两个生命周期，只在首次渲染和卸载的时候执行。")]),s._v(" "),t("p",[s._v("当数组中值是状态的时候，就会只监听这一个状态的变化。当然数组中可以多个值，监听存放"),t("code",[s._v("state")]),s._v("的变化。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('const EffectComponent = () => {\n    const [count, setCount] = useState(1);\n    const [num, setNum] = useState(2);\n    useEffect(() => {\n        console.log("count状态更新");\n        return () => {\n            console.log("useEffect卸载")\n        }\n    },[count])\n    return (\n        <>\n            <h1>{count}</h1>\n            <button onClick={() => {setCount(count + 1)}}>+</button>\n            <h1>{num}</h1>\n            <button onClick={() => {setNum(num + 1)}}>+</button>\n        </>\n    );\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-effect4.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-effect4.png",alt:""}})])]),s._v(" "),t("h5",{attrs:{id:"写多个useeffect"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#写多个useeffect","aria-hidden":"true"}},[s._v("#")]),s._v(" 写多个useEffect")]),s._v(" "),t("p",[s._v("当我们在写类组件的时候，通常会把定义事件写在"),t("code",[s._v("componentDidMount")]),s._v("中，如果只是一个事件处理，项目不大还好，那如果项目很大，所有的事件处理都定义在一个生命周期中，难道就不乱吗？乱是肯定的，而且还容易出bug。")]),s._v(" "),t("p",[s._v("React Hook 允许函数式组件中定义多个"),t("code",[s._v("useEffect")]),s._v("(和"),t("code",[s._v("useState")]),s._v("类似)，多个"),t("code",[s._v("useEffect")]),s._v("互相不受干扰。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('const EffectComponent = () => {\n    const [count, setCount] = useState(1);\n    const [num, setNum] = useState(2);\n    useEffect(() => {\n        console.log("count状态更新");\n        return () => {\n            console.log("count卸载")\n        }\n    },[count])\n    useEffect(() => {\n        console.log("num状态更新");\n        return () => {\n            console.log("num卸载")\n        }\n    },[num])\n    return (\n        <>\n            <h1>{count}</h1>\n            <button onClick={() => {setCount(count + 1)}}>+</button>\n            <h1>{num}</h1>\n            <button onClick={() => {setNum(num + 1)}}>+</button>\n        </>\n    );\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-effect3.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-effect3.png",alt:""}})])]),s._v(" "),t("p",[s._v("useEffect在函数组件中的作用非常大，好好利用必成神器。")]),s._v(" "),t("h4",{attrs:{id:"usecontext"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usecontext","aria-hidden":"true"}},[s._v("#")]),s._v(" useContext")]),s._v(" "),t("p",[t("span",{attrs:{id:"useContext"}})]),s._v(" "),t("p",[s._v("React16中更新了Context API，Context主要用于爷孙组件的传值问题，新的Context API使用订阅发布者模式方式实现在爷孙组件中传值。 上文中我写了一篇简单的使用方法"),t("a",{attrs:{href:"#ContextAPI"}},[s._v("Context API")]),s._v("，不了解的可以参考一下。")]),s._v(" "),t("p",[s._v("React Hooks出现之后也对Context API出了响应的Hook "),t("code",[s._v("useContext")]),s._v("。"),t("strong",[s._v("同样也是解传值的问题")]),s._v("。")]),s._v(" "),t("p",[t("code",[s._v("useContext")]),s._v(" Hook接受一个"),t("code",[s._v("context")]),s._v("对象(由"),t("code",[s._v("createContext")]),s._v("创建的对象)作为参数，并返回"),t("code",[s._v("Context.Consumer")]),s._v("。例如：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const stateContext = createContext('default');\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("正确： "),t("code",[s._v("useContext(stateContext)")])]),s._v(" "),t("li",[s._v("错误： "),t("code",[s._v("useContext(stateContext.Consumer)")])]),s._v(" "),t("li",[s._v("错误： "),t("code",[s._v("useContext(stateContext.Provider)")])])]),s._v(" "),t("h5",{attrs:{id:"使用方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用方式","aria-hidden":"true"}},[s._v("#")]),s._v(" 使用方式")]),s._v(" "),t("p",[s._v("比如说有一个简单的ContextComponent组件")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const ContextComponent = () => {\n    return (\n        <>\n            <h1>{value}</h1>\n        </>\n    );\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("通过"),t("strong",[s._v("Context API")]),s._v("给这个组件发信息。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('export default () => (\n    <stateContext.Provider\n        value={"Hello React"}\n    >\n        <ContextComponent/>\n    </stateContext.Provider>\n)\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("使用"),t("code",[s._v("useContext()")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const value = useContext(stateContext);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("使用"),t("code",[s._v("useContext")]),s._v("，必须在函数式组件中，否则会报错。")]),s._v(" "),t("p",[s._v("可以看出，使用"),t("code",[s._v("useContext")]),s._v("仍然需要在上层组件中使用来为下层组件提供context。")]),s._v(" "),t("h4",{attrs:{id:"usereducer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usereducer","aria-hidden":"true"}},[s._v("#")]),s._v(" useReducer")]),s._v(" "),t("p",[t("span",{attrs:{id:"useReducer"}})]),s._v(" "),t("p",[s._v("看到"),t("code",[s._v("useReducer")]),s._v(",肯定会想到"),t("code",[s._v("Redux")]),s._v("，没错它和"),t("code",[s._v("Redux")]),s._v("的工作方式是一样的。"),t("strong",[t("code",[s._v("useReducer")]),s._v("的出现是"),t("code",[s._v("useState")]),s._v("的替代方案")]),s._v("，能够让我们更好的管理状态。")]),s._v(" "),t("p",[t("code",[s._v("useReducer")]),s._v("一共可以接受三个参数并返回当前的"),t("code",[s._v("state")]),s._v("与其配套的"),t("code",[s._v("dispatch")]),s._v("。")]),s._v(" "),t("h5",{attrs:{id:"第一个参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一个参数","aria-hidden":"true"}},[s._v("#")]),s._v(" 第一个参数")]),s._v(" "),t("p",[t("code",[s._v("useReducer")]),s._v("的第一个参数就是形如"),t("code",[s._v("(state,action) => newState")]),s._v("这样的"),t("code",[s._v("reducer")]),s._v("，没错就是"),t("code",[s._v("reducer")]),s._v("，和"),t("code",[s._v("redux")]),s._v("完全相同。我们来定义一个简单的reducer。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('const reducer = (state, action) => {\n    switch(action.type){\n        case "ADD_TODO":\n            return [\n                ...state,\n                action.todo\n            ];\n        default:\n            return state;\n\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("上面是一个简单的"),t("code",[s._v("reducer")]),s._v("，细心的你会发现，"),t("code",[s._v("state")]),s._v("参数难道不需要指定一下默认值吗？不需要，React不需要使用指定"),t("code",[s._v("state = initialState")]),s._v("，有时候初始值需要依赖于"),t("code",[s._v("props")]),s._v("，所以初始值在"),t("code",[s._v("useReducer")]),s._v("上指定，也许已经猜到第二个参数是什么了？")]),s._v(" "),t("h5",{attrs:{id:"第二个参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第二个参数","aria-hidden":"true"}},[s._v("#")]),s._v(" 第二个参数")]),s._v(" "),t("p",[t("code",[s._v("useReducer")]),s._v("的第二个参数和Redux的createStore也相同，指定状态的默认值。例如：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('useReducer(reducer,[{\n    id: Date.now(),\n    value: "Hello react"\n}])\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h5",{attrs:{id:"第三个参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三个参数","aria-hidden":"true"}},[s._v("#")]),s._v(" 第三个参数")]),s._v(" "),t("p",[t("code",[s._v("useReducer")]),s._v("的第三个参数接受一个函数作为参数，并把第二个参数当作函数的参数执行。主要作用是初始值的惰性求值，把一些对状态的逻辑抽离出来，有利于重置"),t("code",[s._v("state")]),s._v("。")]),s._v(" "),t("p",[s._v("定义一个init函数")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("function init(initialCount) {\n    return [\n        ...initialCount,\n    ];\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h5",{attrs:{id:"usereducer使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usereducer使用","aria-hidden":"true"}},[s._v("#")]),s._v(" useReducer使用")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('useReducer(reducer,[\n        {\n            id: Date.now(),\n            value: "Hello react"\n        }\n    ],init)\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h5",{attrs:{id:"usereducer的返回值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usereducer的返回值","aria-hidden":"true"}},[s._v("#")]),s._v(" useReducer的返回值")]),s._v(" "),t("p",[t("code",[s._v("useReducer")]),s._v("的返回值为一个数组，数组的第一项为当前"),t("code",[s._v("state")]),s._v("，第二项为与当前"),t("code",[s._v("state")]),s._v("对应的"),t("code",[s._v("dispatch")]),s._v("，可以使用ES6的解构赋值拿到这两个")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('const [state,dispatch] = useReducer(reducer,[\n    {\n        id: Date.now(),\n        value: "Hello react"\n    }\n],init)\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h5",{attrs:{id:"浅比较渲染"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浅比较渲染","aria-hidden":"true"}},[s._v("#")]),s._v(" 浅比较渲染")]),s._v(" "),t("p",[s._v("如果 "),t("code",[s._v("Reducer Hook")]),s._v(" 的返回值与当前 "),t("code",[s._v("state")]),s._v(" 相同，"),t("code",[s._v("React")]),s._v(" 将跳过子组件的渲染及副作用的执行。")]),s._v(" "),t("p",[s._v("这种方式 "),t("code",[s._v("react")]),s._v(" 使用"),t("code",[s._v("Objec.is")]),s._v("比较算法来比较"),t("code",[s._v("state")]),s._v("，因此这是一个浅比较，来测验一下。")]),s._v(" "),t("p",[s._v("我们先在"),t("code",[s._v("reducer")]),s._v("中添加一个改变的Todo值的case。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("case \"CHANGE_TODO\":\nreturn state[action.id] = 'change' && state;\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("修改一下"),t("code",[s._v("return")]),s._v(",给下层组件传一个change属性")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('const change = (id) => {\n    dispatch({\n        type: "CHANGE_TODO",\n        id,\n    })\n}\nreturn (\n    <>\n        <button onClick={() => {dispatch({type: "ADD_TODO",todo:{id:Date.now(),value:"Hello Hook"}})}}> Add </button>\n        {state.map((todo,index) => (\n           <Todo key={index} todo={todo.value} change={()=>{change(todo.id)}}/>\n        ))}\n    </>\n)\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("给Todo组件添加一点击事件,当点击触发上层组件传来的方法,使组件值修改.")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('let Todo = ({todo,change}) => {\n    return (\n        console.log("render"),\n        <li onClick={change}>{todo}</li>\n    );\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-usereducer.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-usereducer.png",alt:""}})]),s._v("\n从图片上可以看出,无论我怎么点击li都不会发生改变。")]),s._v(" "),t("p",[s._v("那么我们来改变一下reducer，让它返回一个全新的数组。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('case "CHANGE_TODO":\n    return state.map((todo,index) =>{\n        if(todo.id === action.id){\n            todo.value="change";\n        }\n        return todo;\n    } )\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-usereducer1.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-usereducer1.png",alt:""}})]),s._v("\n当返回一个新的数组的时候，点击li都发生了改变，默认有了"),t("code",[s._v("shouldComponentUpdate")]),s._v("的功能。")]),s._v(" "),t("h4",{attrs:{id:"usecallback"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usecallback","aria-hidden":"true"}},[s._v("#")]),s._v(" useCallback")]),s._v(" "),t("p",[t("span",{attrs:{id:"useCallback"}})]),s._v(" "),t("p",[t("code",[s._v("useCallback")]),s._v("可以认为是对依赖项的监听，把接受一个回调函数和依赖项数组，返回一个该回调函数的memoized(记忆)版本，该回调函数仅在某个依赖项改变时才会更新。")]),s._v(" "),t("p",[s._v("一个简单的小例子")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('const CallbackComponent = () => {\n    let [count, setCount] = useState(1);\n    let [num, setNum] = useState(1);\n    \n    const memoized = useCallback( () => {\n        return num;\n    },[count])\n    console.log("记忆：",memoized());\n    console.log("原始：",num);\n    return (\n        <>\n            <button onClick={() => {setCount(count + 1)}}> count+ </button>\n            <button onClick={() => {setNum(num + 1)}}> num+ </button>\n        </>\n    )\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-useCallback.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-useCallback.png",alt:""}})]),s._v("\n如果没有传入依赖项数组，那么记忆函数在每次渲染的时候都会更新。\n"),t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-useCallback1.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-useCallback1.png",alt:""}})])]),s._v(" "),t("h4",{attrs:{id:"usememo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usememo","aria-hidden":"true"}},[s._v("#")]),s._v(" useMemo")]),s._v(" "),t("p",[t("span",{attrs:{id:"useMemo"}})]),s._v(" "),t("p",[t("code",[s._v("useMemo")]),s._v("和"),t("code",[s._v("useCallback")]),s._v("很像，唯一不同的就是")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("useCallback(fn, deps) 相当于 useMemo(() => fn, deps\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这里就不过多介绍了。")]),s._v(" "),t("h4",{attrs:{id:"useref"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#useref","aria-hidden":"true"}},[s._v("#")]),s._v(" useRef")]),s._v(" "),t("p",[t("span",{attrs:{id:"useRef"}})]),s._v(" "),t("p",[s._v("React16出现了可用"),t("code",[s._v("Object.createRef")]),s._v("创建ref的方法，因此也出了这样一个Hook。")]),s._v(" "),t("p",[s._v("使用语法：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const refContainer = useRef(initialValue);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("code",[s._v("useRef")]),s._v("返回一个可变的ref对象，"),t("code",[s._v("useRef")]),s._v("接受一个参数绑定在返回的ref对象的"),t("code",[s._v("current")]),s._v("属性上，返回的ref对象在整个生命周期中保持不变。")]),s._v(" "),t("p",[s._v("例子：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('const RefComponent = () => {\n    let inputRef = useRef(null);\n    useEffect(() => {\n        inputRef.current.focus();\n    })\n    return (\n        <input type="text" ref={inputRef}/>\n    ) \n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("上面例子在input上绑定一个ref，使得input在渲染后自动焦点聚焦。")]),s._v(" "),t("p",[t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-useRef.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-useRef.png",alt:""}})])]),s._v(" "),t("h4",{attrs:{id:"useimperativehandle"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#useimperativehandle","aria-hidden":"true"}},[s._v("#")]),s._v(" useImperativeHandle")]),s._v(" "),t("p",[t("span",{attrs:{id:"useImperativeHandle"}})]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("useImperativeHandle")]),s._v(" 可以让你在使用 "),t("code",[s._v("ref")]),s._v(" 时自定义暴露给父组件的实例值。")])]),s._v(" "),t("p",[s._v("就是说：当我们使用父组件把"),t("code",[s._v("ref")]),s._v("传递给子组件的时候，这个Hook允许在子组件中把自定义实例附加到父组件传过来的"),t("code",[s._v("ref")]),s._v("上，有利于父组件控制子组件。")]),s._v(" "),t("p",[s._v("使用方式")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("useImperativeHandle(ref, createHandle, [deps])\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("一个例子：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('function FancyInput(props, ref) {\n    const inputRef = useRef();\n    useImperativeHandle(ref, () => ({\n        focus: () => {\n            inputRef.current.value="Hello";\n        }\n    }));\n    return <input ref={inputRef} />;\n}\nFancyInput = forwardRef(FancyInput);\n\nexport default () => {\n    let ref = useRef(null);\n    useEffect(() => {\n        console.log(ref);\n        ref.current.focus();\n    })\n    return (\n        <>\n            <FancyInput ref={ref}/>\n        </>\n    )\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("p",[s._v("上面是一个父子组件中ref传递的例子，使用到了forwardRef(这是一个高阶函数，主要用于ref在父子组件中的传递)，使用useImperativeHandle把第二个参数的返回值绑定到父组件传来的ref上。\n"),t("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-useImperativeHandle.png"}},[t("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react-hooks-useImperativeHandle.png",alt:""}})])]),s._v(" "),t("h4",{attrs:{id:"uselayouteffect"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#uselayouteffect","aria-hidden":"true"}},[s._v("#")]),s._v(" useLayoutEffect")]),s._v(" "),t("p",[t("span",{attrs:{id:"useLayoutEffect"}})]),s._v(" "),t("p",[s._v("这个钩子函数和"),t("code",[s._v("useEffect")]),s._v("相同，都是用来执行副作用。但是它会在所有的DOM变更之后同步调用effect。"),t("code",[s._v("useLayoutEffect")]),s._v("和"),t("code",[s._v("useEffect")]),s._v("最大的区别就是一个是同步一个是异步。")]),s._v(" "),t("p",[s._v("从这个Hook的名字上也可以看出，它主要用来读取DOM布局并触发同步渲染，在浏览器执行绘制之前，"),t("code",[s._v("useLayoutEffect")]),s._v(" 内部的更新计划将被同步刷新。")]),s._v(" "),t("p",[s._v("官网建议还是尽可能的是使用标准的useEffec以避免阻塞视觉更新。")]),s._v(" "),t("h4",{attrs:{id:"hook的执行机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hook的执行机制","aria-hidden":"true"}},[s._v("#")]),s._v(" Hook的执行机制")]),s._v(" "),t("p",[t("span",{attrs:{id:"Hook的执行机制"}})]),s._v(" "),t("p",[s._v("上面一共埋了2个疑问点。")]),s._v(" "),t("blockquote",[t("p",[t("strong",[s._v("第一个：函数调用完之后会把函数中的变量清除，但ReactHook是怎么复用状态呢？")])])]),s._v(" "),t("p",[t("code",[s._v("React")]),s._v(" 保持对当先渲染中的组件的追踪，每个组件内部都有一个\n**「记忆单元格」**列表。它们只不过是我们用来存储一些数据的 JavaScript 对象。当你用 "),t("code",[s._v("useState()")]),s._v(" 调用一个Hook的时候，它会读取当前的单元格（或在首次渲染时将其初始化），然后把指针移动到下一个。这就是多个 "),t("code",[s._v("useState()")]),s._v(" 调用会得到各自独立的本地 "),t("code",[s._v("state")]),s._v(" 的原因。")]),s._v(" "),t("p",[s._v("之所以不叫"),t("code",[s._v("createState")]),s._v("，而是叫"),t("code",[s._v("useState")]),s._v("，因为 "),t("code",[s._v("state")]),s._v(" 只在组件首次渲染的时候被创建。在下一次重新渲染时，"),t("code",[s._v("useState")]),s._v(" 返回给我们当前的 "),t("code",[s._v("state")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    const [count, setCount] = useState(1);\n    setCount(2);\n    //第一次渲染\n        //创建state，\n        //设置count的值为2\n    //第二次渲染\n        //useState(1)中的参数忽略，并把count赋予2\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("blockquote",[t("p",[t("code",[s._v("**React是怎么区分多次调用的hooks的呢，怎么知道这个hook就是这个作用呢？**")]),s._v("\nReact 靠的是 "),t("code",[s._v("Hook")]),s._v(" "),t("strong",[s._v("调用的顺序")]),s._v("。在一个函数组件中每次调用Hooks的顺序是相同。借助官网的一个例子：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// ------------\n// 首次渲染\n// ------------\nuseState('Mary')           // 1. 使用 'Mary' 初始化变量名为 name 的 state\nuseEffect(persistForm)     // 2. 添加 effect 以保存 form 操作\nuseState('Poppins')        // 3. 使用 'Poppins' 初始化变量名为 surname 的 state\nuseEffect(updateTitle)     // 4. 添加 effect 以更新标题\n\n// -------------\n// 二次渲染\n// -------------\nuseState('Mary')           // 1. 读取变量名为 name 的 state（参数被忽略）\nuseEffect(persistForm)     // 2. 替换保存 form 的 effect\nuseState('Poppins')        // 3. 读取变量名为 surname 的 state（参数被忽略）\nuseEffect(updateTitle)     // 4. 替换更新标题的 effect\n\n// ...\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("p",[s._v("在上面hook规则的时候提到"),t("strong",[s._v("Hook一定要写在函数组件的对外层，不要写在判断、循环中，正是因为要保证Hook的调用顺序相同")]),s._v("。")]),s._v(" "),t("p",[s._v("如果有一个Hook写在了判断语句中")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("if (name !== '') {\n    useEffect(function persistForm() {\n      localStorage.setItem('formData', name);\n    });\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("借助上面例子，如果说name是一个表单需要提交的值，在第一次渲染中，name不存在为true，所以第一次Hook的执行顺序为")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("useState('Mary')           // 1. 使用 'Mary' 初始化变量名为 name 的 state\nuseEffect(persistForm)     // 2. 添加 effect 以保存 form 操作\nuseState('Poppins')        // 3. 使用 'Poppins' 初始化变量名为 surname 的 state\nuseEffect(updateTitle)     // 4. 添加 effect 以更新标题\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("在第二次渲染中，如果有表单中有信息填入，那么name就不等于空，Hook的渲染顺序如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("useState('Mary')           // 1. 读取变量名为 name 的 state（参数被忽略）\n// useEffect(persistForm)  // 🔴 此 Hook 被忽略！\nuseState('Poppins')        // 🔴 2 （之前为 3）。读取变量名为 surname 的 state 失败\nuseEffect(updateTitle)     // 🔴 3 （之前为 4）。替换更新标题的 effect 失败\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("这样就会引发Bug的出现。因此在写Hook的时候一定要在函数组件的最外层写，不要写在判断，循环中。")]),s._v(" "),t("h4",{attrs:{id:"自定义hook"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义hook","aria-hidden":"true"}},[s._v("#")]),s._v(" 自定义Hook")]),s._v(" "),t("p",[t("span",{attrs:{id:"自定义Hook"}})]),s._v(" "),t("p",[s._v("自定义hooks可以说成是一种约定而不是功能。"),t("strong",[s._v("当一个函数以use开头并且在函数内部调用其他hooks，那么这个函数就可以成为自定义hooks")]),s._v("，比如说useSomething。")]),s._v(" "),t("p",[t("strong",[s._v("自定义Hooks可以封装状态，能够更好的实现状态共享。")])]),s._v(" "),t("p",[s._v("我们来封装一个数字加减的Hook")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const useCount = (num) => {\n    let [count, setCount] = useState(num);\n    return [count,()=>setCount(count + 1), () => setCount(count - 1)]\n};\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("这个自定义Hook内部使用useState定义一个状态，返回一个数组，数组中有状态的值、状态++的函数，状态–的函数。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const CustomComp = () => {\n    let [count, addCount, redCount] = useCount(1);\n\n    return (\n        <>\n            <h1>{count}</h1>\n            <button onClick={addCount}> + </button>\n            <button onClick={redCount}> - </button>\n        </>\n    )\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("主函数中使用解构赋值的方式接受这三个值使用，这是一种非常简单的自定义Hook。如果项目大的话使用自定义Hook会抽离可以抽离公共代码，极大的减少我们的代码量，提高开发效率。")]),s._v(" "),t("h2",{attrs:{id:"webapp缺点与优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webapp缺点与优点","aria-hidden":"true"}},[s._v("#")]),s._v(" webApp缺点与优点")]),s._v(" "),t("p",[s._v("缺点：")]),s._v(" "),t("ul",[t("li",[s._v("1.Web基于DOM，而DOM很慢")]),s._v(" "),t("li",[s._v("2.DOM拖慢JavaScript。")]),s._v(" "),t("li",[s._v("3.网页是单线程的")]),s._v(" "),t("li",[s._v("4.网页没有硬件加速")])]),s._v(" "),t("p",[s._v("优点：")]),s._v(" "),t("ul",[t("li",[s._v("1.跨平台：所有系统都能使用")]),s._v(" "),t("li",[s._v("2.免安装：打开浏览器就能使用")]),s._v(" "),t("li",[s._v("3.快速部署：升级只需在服务器更新代码")]),s._v(" "),t("li",[s._v("4.超链接：可以与其他网站互联，可以被搜索引擎检索")])]),s._v(" "),t("p",[s._v("react-canvas这个包是基于canvas和react的把jsx语法化成canvas\n\x3c!--")]),s._v(" "),t("h2",{attrs:{id:"fiber架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fiber架构","aria-hidden":"true"}},[s._v("#")]),s._v(" fiber架构")]),s._v(" "),t("h2",{attrs:{id:"redux总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redux总结","aria-hidden":"true"}},[s._v("#")]),s._v(" redux总结")]),s._v(" "),t("h2",{attrs:{id:"react-router"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-router","aria-hidden":"true"}},[s._v("#")]),s._v(" react-router")]),s._v(" "),t("h2",{attrs:{id:"react性能调优-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react性能调优-2","aria-hidden":"true"}},[s._v("#")]),s._v(" react性能调优")]),s._v(" "),t("p",[s._v("循环渲染的组件，你改变一个组件所有的组件都跟着重新渲染，\n解决方法")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("1.可以通过"),t("code",[s._v("shouldComponentUpdate")]),s._v("去判断上一个与现在这个状态判断解决，")])]),s._v(" "),t("li",[t("p",[s._v("2.通过插件解决："),t("code",[s._v("mixins：[React.addons.PureRenderMixin]")])])])]),s._v(" "),t("p",[s._v("当对象里边套对象，这俩个东西就都挂了。")]),s._v(" "),t("p",[s._v("终极解决方法：")]),s._v(" "),t("p",[s._v("在"),t("code",[s._v("constructor")]),s._v("做一些操作")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("constructor(props){\n     super(props);\n     this.shouldComponentUpdate = React.addons.PureRenderMixin.shouldComponentUpdate.bind(this);\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("子组件更新触发父组件。父组件更新所有的子组件要Diff，一旦更改了state类型，上边全部办法歇菜，相当于直接生成一颗新的树🌲可以使用IMMUTABLE库\n--\x3e")])])},[],!1,null,null,null);e.default=n.exports}}]);