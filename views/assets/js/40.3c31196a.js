(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{442:function(n,s,t){"use strict";t.r(s);var a=t(56),e=Object(a.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"new-的模拟实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#new-的模拟实现"}},[n._v("#")]),n._v(" new 的模拟实现")]),n._v(" "),t("hr"),n._v(" "),t("blockquote",[t("p",[n._v("new运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一。")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function Otaku(name, age) {\n  this.name = name;\n  this.age = age;\n  \n  this.habit = 'Games';\n}\n\nOtaku.prototype.strength = 60;\n\nOtaku.prototype.sayYourName = function() {\n  console.log('I am' + this.name);\n};\n\nvar person = new Otaku('Kevin', '18');\n\nconsole.log(person.name);\t// Kevin\nconsole.log(person.habit);\t// Games\nconsole.log(person.strength);\t// 60\n\nperson.sayYourName();\t// I am Kevin\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br")])]),t("p",[n._v("从这个例子中，我们可以看到，实例 person 可以：")]),n._v(" "),t("ul",[t("li",[n._v("访问到 Otaku 构造函数里的属性")]),n._v(" "),t("li",[n._v("访问到 Otaku.prototype 中的属性")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function objectFactory(){\n   var obj = new Object(), // new返回的是一个对象，所以定义一个对象，最后返回该对象\n            Constructor = [].shift.call(arguments); // shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。并且会改变原来数组的长度，  Constructor = Otaku构造函数\n            Constructor.apply(obj, arguments); // obj 有 Constructor（即Otaku构造函数）的属性， obj有了Otaku的执行环境， 此行并不能去掉\n            console.log(obj instanceof Constructor); // false 此时还不是它的实例\n            obj.__proto__ = Constructor.prototype; // obj 就继承了 Constructor.prototype（即Otaku构造函数）\n            console.log(obj instanceof Constructor); // true  \n           //  return obj; // 最后返回该对象：1. obj访问到Otaku构造函数里的属性; 2. obj访问到Otaku.prototype中的属性  实现了new功能\n\nreturn (typeof ret === 'object' ? ret : obj); // 如果是一个对象，我们就返回这个对象，如果没有，我们该返回什么就返回什么。\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);