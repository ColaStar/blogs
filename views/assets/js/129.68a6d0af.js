(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{132:function(t,e,r){"use strict";r.r(e);var a=r(0),n=Object(a.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"前端协作规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前端协作规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 前端协作规范")]),t._v(" "),r("p",[r("strong",[t._v("Table of Contents")]),t._v(" "),r("em",[t._v("generated with "),r("a",{attrs:{href:"https://github.com/thlorenz/doctoc",target:"_blank",rel:"noopener noreferrer"}},[t._v("DocToc"),r("OutboundLink")],1)])]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E5%89%8D%E7%AB%AF%E5%8D%8F%E4%BD%9C%E8%A7%84%E8%8C%83"}},[t._v("前端协作规范")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E4%BB%80%E4%B9%88%E6%98%AF%E8%A7%84%E8%8C%83"}},[t._v("什么是规范?")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E8%A7%84%E8%8C%83"}},[t._v("为什么需要规范?")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E8%A7%84%E8%8C%83%E5%8C%85%E5%90%AB%E5%93%AA%E4%BA%9B%E5%86%85%E5%AE%B9"}},[t._v("规范包含哪些内容?")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#1-%E5%B7%A5%E4%BD%9C%E6%B5%81%E8%A7%84%E8%8C%83"}},[t._v("1 工作流规范")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#11-%E5%BC%80%E5%8F%91"}},[t._v("1.1 开发")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#111-%E7%89%88%E6%9C%AC%E8%A7%84%E8%8C%83"}},[t._v("1.1.1 版本规范")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#112-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E8%A7%84%E8%8C%83"}},[t._v("1.1.2 版本控制系统规范")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#113-%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E8%A7%84%E8%8C%83"}},[t._v("1.1.3 提交信息规范")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#12-%E6%9E%84%E5%BB%BA%E8%A7%84%E8%8C%83"}},[t._v("1.2 构建规范")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#13-%E5%8F%91%E5%B8%83%E5%B7%A5%E4%BD%9C%E6%B5%81%E8%A7%84%E8%8C%83"}},[t._v("1.3 发布工作流规范")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#14-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90"}},[t._v("1.4 持续集成")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#15-%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86"}},[t._v("1.5 任务管理")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#2-%E6%8A%80%E6%9C%AF%E6%A0%88%E8%A7%84%E8%8C%83"}},[t._v("2 技术栈规范")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#21-%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B"}},[t._v("2.1 技术选型")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#22-%E8%BF%8E%E6%8E%A5%E6%96%B0%E6%8A%80%E6%9C%AF"}},[t._v("2.2 迎接新技术")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#3-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E8%A7%84%E8%8C%83"}},[t._v("3 浏览器兼容规范")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#33-%E8%8E%B7%E5%8F%96%E7%BB%9F%E8%AE%A1%E6%95%B0%E6%8D%AE"}},[t._v("3.3 获取统计数据")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#4-%E9%A1%B9%E7%9B%AE%E7%BB%84%E7%BB%87%E8%A7%84%E8%8C%83"}},[t._v("4 项目组织规范")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#41-%E9%80%9A%E7%94%A8%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%BB%84%E7%BB%87%E8%A7%84%E8%8C%83"}},[t._v("4.1 通用的项目组织规范")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#42-%E7%9B%AE%E5%BD%95%E7%BB%84%E7%BB%87%E7%9A%84%E9%A3%8E%E6%A0%BC"}},[t._v("4.2 目录组织的风格")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#43-%E8%84%9A%E6%89%8B%E6%9E%B6%E5%92%8C%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF"}},[t._v("4.3 脚手架和项目模板")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#5-%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83"}},[t._v("5 编码规范")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#51-javascript"}},[t._v("5.1 Javascript")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#52-html"}},[t._v("5.2 HTML")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#53-css"}},[t._v("5.3 CSS")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#54-%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96"}},[t._v("5.4 代码格式化")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#55-%E9%9B%86%E5%A4%A7%E6%88%90%E7%9A%84"}},[t._v("5.5 集大成的")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#56-%E7%89%B9%E5%AE%9A%E6%A1%86%E6%9E%B6%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97"}},[t._v("5.6 特定框架风格指南")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#57-code-review"}},[t._v("5.7 Code Review")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#6-%E6%96%87%E6%A1%A3%E8%A7%84%E8%8C%83"}},[t._v("6 文档规范")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#61-%E5%BB%BA%E7%AB%8B%E6%96%87%E6%A1%A3%E4%B8%AD%E5%BF%83"}},[t._v("6.1 建立文档中心")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#64-%E8%AE%A8%E8%AE%BA%E5%8D%B3%E6%96%87%E6%A1%A3"}},[t._v("6.4 讨论即文档")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#65-%E6%B3%A8%E9%87%8A%E5%8D%B3%E6%96%87%E6%A1%A3"}},[t._v("6.5 注释即文档")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#66-%E4%BB%A3%E7%A0%81%E5%8D%B3%E6%96%87%E6%A1%A3"}},[t._v("6.6 代码即文档")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#7-ui%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83"}},[t._v("7 UI设计规范")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#8-%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83"}},[t._v("8 测试规范")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#81-%E6%B5%8B%E8%AF%95%E7%9A%84%E6%B5%81%E7%A8%8B"}},[t._v("8.1 测试的流程")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#82-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95"}},[t._v("8.2 单元测试")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#9-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E7%9B%91%E6%8E%A7%E5%92%8C%E8%B0%83%E8%AF%95%E8%A7%84%E8%8C%83"}},[t._v("9 异常处理、监控和调试规范")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#91-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86"}},[t._v("9.1 异常处理")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#92-%E6%97%A5%E5%BF%97"}},[t._v("9.2 日志")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#93-%E5%BC%82%E5%B8%B8%E7%9B%91%E6%8E%A7"}},[t._v("9.3 异常监控")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#10-%E5%89%8D%E5%90%8E%E7%AB%AF%E5%8D%8F%E4%BD%9C%E8%A7%84%E8%8C%83"}},[t._v("10 前后端协作规范")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#101-%E5%8D%8F%E4%BD%9C%E6%B5%81%E7%A8%8B%E8%A7%84%E8%8C%83"}},[t._v("10.1 协作流程规范")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#102-%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83"}},[t._v("10.2 接口规范")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#103-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E8%A7%84%E8%8C%83"}},[t._v("10.3 接口文档规范")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#104-%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%A8%A1%E6%8B%9F"}},[t._v("10.4 接口测试与模拟")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#11-%E5%9F%B9%E8%AE%AD%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E6%8A%80%E6%9C%AF%E6%B2%89%E6%B7%80"}},[t._v("11 培训/知识管理/技术沉淀")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#111-%E6%96%B0%E4%BA%BA%E5%9F%B9%E8%AE%AD"}},[t._v("11.1 新人培训")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#112-%E8%90%A5%E9%80%A0%E6%8A%80%E6%9C%AF%E6%B0%9B%E5%9B%B4"}},[t._v("11.2 营造技术氛围")])])])])]),t._v(" "),r("h2",{attrs:{id:"什么是规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是规范?")]),t._v(" "),r("p",[t._v("规范，名词意义上：即明文规定或约定俗成的标准，如：道德规范、技术规范等。动词意义上：是指按照既定标准、规范的要求进行操作，使某一行为或活动达到或超越规定的标准，如：规范管理、规范操作.")]),t._v(" "),r("h2",{attrs:{id:"为什么需要规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 为什么需要规范?")]),t._v(" "),r("ul",[r("li",[t._v("降低新成员融入团队的成本, 同时也一定程度避免挖坑")]),t._v(" "),r("li",[t._v("提高开发效率、团队协作效率, 降低沟通成本")]),t._v(" "),r("li",[t._v("实现高度统一的代码风格，方便review, 另外一方面可以提高项目的可维护性")]),t._v(" "),r("li",[t._v("规范是实现自动化的基础")]),t._v(" "),r("li",[t._v("规范是一个团队知识沉淀的直接输出")])]),t._v(" "),r("h2",{attrs:{id:"规范包含哪些内容"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#规范包含哪些内容","aria-hidden":"true"}},[t._v("#")]),t._v(" 规范包含哪些内容?")]),t._v(" "),r("p",[t._v("如文章标题，前端协作规范并不单单指‘编码规范’，这个规范涉及到前端开发活动的方方面面，例如代码库的管理、前后端协作、代码规范、兼容性规范；")]),t._v(" "),r("p",[t._v("不仅仅是前端团队内部需要协作，一个完整的软件生命周期内，我们需要和产品/设计、后端(或者原生客户端团队)、测试进行协作, 我们需要覆盖这些内容.")]),t._v(" "),r("p",[t._v("下面就开始介绍，如果我是前端团队的Leader，我会怎么制定前端规范，这个规范需要包含哪些内容?")]),t._v(" "),r("h1",{attrs:{id:"_1-工作流规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-工作流规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 1 工作流规范")]),t._v(" "),r("h2",{attrs:{id:"_1-1-开发"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-开发","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.1 开发")]),t._v(" "),r("h3",{attrs:{id:"_1-1-1-版本规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-版本规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.1.1 版本规范")]),t._v(" "),r("p",[t._v("项目的版本号应该根据某些规则进行迭代, 这里推荐使用"),r("a",{attrs:{href:"https://semver.org/lang/zh-CN/",target:"_blank",rel:"noopener noreferrer"}},[t._v("语义化版本规范"),r("OutboundLink")],1),t._v(", 通过这个规范，用户可以了解版本变更的影响范围。规则如下:")]),t._v(" "),r("ul",[r("li",[t._v("主版本号：当你做了不兼容的 API 修改，")]),t._v(" "),r("li",[t._v("次版本号：当你做了向下兼容的功能性新增，")]),t._v(" "),r("li",[t._v("修订号：当你做了向下兼容的问题修正。")])]),t._v(" "),r("h3",{attrs:{id:"_1-1-2-版本控制系统规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-版本控制系统规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.1.2 版本控制系统规范")]),t._v(" "),r("p",[t._v("大部分团队都使用git作为版本库，管理好代码也是一种学问。尤其是涉及多人并发协作、需要管理多个软件版本的情况下，定义良好的版本库管理规范，可以让大型项目更有组织性，也可以提高成员协作效率.")]),t._v(" "),r("p",[t._v("比较流行的 git分支模型/工作流是"),r("a",{attrs:{href:"https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow",target:"_blank",rel:"noopener noreferrer"}},[t._v("git-flow"),r("OutboundLink")],1),t._v(", 但是大部分团队会根据自己的情况制定自己的git工作流规范, 例如我们团队的"),r("a",{attrs:{href:"https://github.com/GDJiaMi/frontend-standards/blob/master/development.md#git-%E5%88%86%E6%94%AF%E6%A8%A1%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"}},[t._v("分支规范"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("Git 有很多工作流方法论，这些工作流的选择可能依赖于项目的规模、项目的类型以及团队成员的结构.")]),t._v(" "),r("p",[t._v("比如一个简单的个人项目可能不需要复杂的分支划分，我们的变更都是直接提交到 master 分支;")]),t._v(" "),r("p",[t._v("再比如开源项目，除了核心团队成员，其他贡献者是没有提交的权限的，而且我们也需要一定的手段来验证和讨论贡献的代码是否合理。所以对于开源项目 fork 工作流更为适合.")]),t._v(" "),r("p",[t._v("了解常见的工作流有利于组织或创建适合自己团队的工作流, 提交团队协作的效率:\n"),r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/工作流.png"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E5%B7%A5%E4%BD%9C%E6%B5%81.png",alt:""}})])]),t._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/ivan-94/git-guide/blob/master/branch/centralized.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("简单的集中式"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://github.com/ivan-94/git-guide/blob/master/branch/feature.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("基于功能分支的工作流"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://github.com/ivan-94/git-guide/blob/master/branch/gitflow.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git Flow 🔥"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://github.com/ivan-94/git-guide/blob/master/branch/fork.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fork/Pull Request 工作流"),r("OutboundLink")],1)]),t._v(" "),r("h3",{attrs:{id:"_1-1-3-提交信息规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-3-提交信息规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.1.3 提交信息规范")]),t._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/提交信息规范.png"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E8%A7%84%E8%8C%83.png",alt:""}})])]),t._v(" "),r("blockquote",[r("p",[t._v("组织好的提交信息, 可以提高项目的整体质量. 至少具有下面这些优点:")])]),t._v(" "),r("ul",[r("li",[t._v("格式统一的提交信息有助于自动化生成CHANGELOG")]),t._v(" "),r("li",[t._v("版本库不只是存放代码的仓库, 它记录项目的开发日志, 它应该要清晰表达这次提交的做了什么. 这些记录应该可以帮助后来者快速地学习和回顾代码, 也应该方便其他协作者review你的代码")]),t._v(" "),r("li",[t._v("规范化提交信息可以促进提交者提交有意义的、粒度合适的 提交 . 提交者要想好要怎么描述这个提交，这样被动促进了他们去把控提交的粒度")])]),t._v(" "),r("p",[t._v("社区上比较流行的提交信息规范是"),r("a",{attrs:{href:"https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit",target:"_blank",rel:"noopener noreferrer"}},[t._v("Angular的提交信息规范"),r("OutboundLink")],1),t._v(", 除此之外，这些也很不错:")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/atom/atom/blob/master/CONTRIBUTING.md#git-commit-messages",target:"_blank",rel:"noopener noreferrer"}},[t._v("Atom"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-ember",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ember"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-eslint",target:"_blank",rel:"noopener noreferrer"}},[t._v("Eslint"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-jquery",target:"_blank",rel:"noopener noreferrer"}},[t._v("JQuery"),r("OutboundLink")],1)])]),t._v(" "),r("p",[t._v("另外这些工具可以帮助你检验提交信息, 以及生成CHANGELOG:")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/conventional-changelog/conventional-changelog",target:"_blank",rel:"noopener noreferrer"}},[t._v("conventional-changelog"),r("OutboundLink")],1),t._v(" - 从项目的提交信息中生成CHANGELOG和发布信息")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/conventional-changelog/commitlint",target:"_blank",rel:"noopener noreferrer"}},[t._v("commitlint"),r("OutboundLink")],1),t._v(" - 检验提交信息")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer"}},[t._v("commitizen"),r("OutboundLink")],1),t._v(" 🔥简单的提交规范和提交帮助工具，推荐")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/conventional-changelog/commitlint",target:"_blank",rel:"noopener noreferrer"}},[t._v("standard-changelog"),r("OutboundLink")],1),t._v("- angular风格的提交命令行工具")])]),t._v(" "),r("h2",{attrs:{id:"_1-2-构建规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-构建规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.2 构建规范")]),t._v(" "),r("p",[t._v('对于团队、或者需要维护多个项目场景，统一的构建工具链很重要,**这套工具应该强调"约定大于配置"，让开发者更专注于业务的开发。**笔者在'),r("a",{attrs:{href:"https://juejin.im/post/5d2fcaacf265da1b95708f63",target:"_blank",rel:"noopener noreferrer"}},[t._v("<为什么要用vue-cli3?>"),r("OutboundLink")],1),t._v("文章中提出了vue-cli3更新有很多亮点，非常适合作为团队构建工具链的基础:")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("首先这类工具是推崇 约定大于配置")]),t._v(" 。即按照他们的规范，可以实现开箱即用，快速开发业务. 在团队协作中这点很重要，我们不推荐团队成员去关心又臭又长的webpack构建配置")]),t._v(" "),r("li",[r("strong",[t._v("vue-cli3抽离了cli service层")]),t._v("，可以独立更新工具链。也就是说项目的构建脚本和配置在一个独立的service项目中维护，而不是像以前一样在每个项目目录下都有webpack配置和依赖. 这样做的好处是独立地、简单地升级整个构建链")]),t._v(" "),r("li",[t._v("灵活的插件机制。对于团队的定制化构建应该封装到插件中，这样也可以实现独立的更新。")])]),t._v(" "),r("p",[r("strong",[t._v("我们可以选择第三方CLI, 当然也定制自己的构建链，按照上面说的这个构建链应该有以下特点:")])]),t._v(" "),r("ul",[r("li",[t._v("强约定，体现团队的规范。首先它应该避免团队成员去关心或更改构建的配置细节，暴露最小化的配置接口。 另外构建工具不仅仅是构建，通常它还会集成代码检查、测试等功能。")]),t._v(" "),r("li",[t._v("方便升级。尤其是团队需要维护多个项目场景, 这一点很有意义、")])]),t._v(" "),r("p",[t._v("下面是社区上比较流行的构建工具. 当然，你也可以根据自己的团队情况开发自己的CLI, 但是下面的工具依然很有参考价值：")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/facebook/create-react-app",target:"_blank",rel:"noopener noreferrer"}},[t._v("create-react-app"),r("OutboundLink")],1),t._v(" - 🔥零配置开始React开发\n"),r("a",{attrs:{href:"https://cli.vuejs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-cli"),r("OutboundLink")],1),t._v(" - 🔥零配置、渐进增强的项目构建CLI\n"),r("a",{attrs:{href:"https://parceljs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("parcel"),r("OutboundLink")],1),t._v(" - 零配置的Web应用打包工具\n"),r("a",{attrs:{href:"https://github.com/fuse-box/fuse-box",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fusebox"),r("OutboundLink")],1),t._v(" - 高速易用的打包工具\n"),r("a",{attrs:{href:"https://github.com/developit/microbundle",target:"_blank",rel:"noopener noreferrer"}},[t._v("microbundle"),r("OutboundLink")],1),t._v(" - 零配置, 基于Rollup，适合用于打包‘库’")]),t._v(" "),r("h2",{attrs:{id:"_1-3-发布工作流规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-发布工作流规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.3 发布工作流规范")]),t._v(" "),r("p",[t._v("发布工作流指的是将‘软件成品’对外发布(如测试或生产)的一套流程, 将这套流程规范化后，可以实现自动化.")]),t._v(" "),r("p",[t._v("举个例子, 一个典型的发布工作流如下：")]),t._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/发布工作流规范.jpeg"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E5%8F%91%E5%B8%83%E5%B7%A5%E4%BD%9C%E6%B5%81%E8%A7%84%E8%8C%83.jpeg",alt:""}})])]),t._v(" "),r("ul",[r("li",[t._v("代码变更")]),t._v(" "),r("li",[t._v("提交代码变更到远程版本库")]),t._v(" "),r("li",[t._v("程序通过CI测试(例如Travis变绿)")]),t._v(" "),r("li",[t._v("提升package.json中的版本")]),t._v(" "),r("li",[t._v("生成CHANGELOG")]),t._v(" "),r("li",[t._v("提交package.json和CHANGELOG.md文件")]),t._v(" "),r("li",[t._v("打上Tag")]),t._v(" "),r("li",[t._v("推送")])]),t._v(" "),r("p",[t._v("如果你遵循上面的规范，那么就可以利用社区上现有的工具来自动化这个流程. 这些工具有:")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli",target:"_blank",rel:"noopener noreferrer"}},[t._v("conventional-changelog-cli"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://github.com/conventional-changelog/conventional-github-releaser",target:"_blank",rel:"noopener noreferrer"}},[t._v("conventional-github-releaser"),r("OutboundLink")],1),t._v("\n实际上自己开发一个也不是特别难的事情.")]),t._v(" "),r("h2",{attrs:{id:"_1-4-持续集成"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-持续集成","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.4 持续集成")]),t._v(" "),r("p",[t._v("将整套开发工作流确定下来之后, 就可以使用持续集成服务来自动化执行整个流程。比如一个典型的CI流程:")]),t._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/持续集成规范.jpeg"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E8%A7%84%E8%8C%83.jpeg",alt:""}})])]),t._v(" "),r("p",[t._v("持续集成是什么，有什么意义呢?")]),t._v(" "),r("p",[t._v("我们需要持续集成拆成两个词分别来理解, 什么是持续? 什么是集成?")]),t._v(" "),r("p",[r("strong",[t._v("持续")]),t._v("(Continuous), 可以理解为 频繁 或者‘连续性’. 不管是持续集成还是敏捷开发思维、看板，都认为‘持续’是它们的基础。")]),t._v(" "),r("p",[t._v("举一个通俗的例子，比如代码检查，‘持续的’的代码检查就是代码一变动(如保存，或者IDE实时检查、或者提交到版本库时)就马上检查代码，而‘非持续’的代码检查就是在完成所有编码后，再进行检查。对比两者可以发现，持续性的代码检查可以尽早地发现错误，而且错误也比较容易理解和处理，反之非持续性的代码检查，可能会发现一堆的错误，失之毫厘谬以千里，错误相互牵连，最终会变得难以收拾。")]),t._v(" "),r("p",[t._v("‘持续’的概念，可以用于软件开发的方方面面，本质上就是把传统瀑布式的软件开发流程打碎，形成一个个更小的开发闭环，持续地输出产品，同时产品也持续地给上游反馈和纠正。")]),t._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/持续集成规范2.png"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E8%A7%84%E8%8C%832.png",alt:""}})]),t._v("\n那什么是‘集成’呢？狭义的集成可以简单认为是‘集成测试’吧. 集成测试可以对代码静态测试、单元测试、通过单元测试后可以进行集成测试，在应用组成一个整体后在模拟环境中跑E2E测试等等。也就是说，在这里进行一系列的自动化测试来验证软件系统。")]),t._v(" "),r("p",[t._v("广义的持续集成服务，不仅仅是测试，它还衍生出很多概念，例如持续交付、持续部署，如下图\n"),r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/持续集成规范3.png"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E8%A7%84%E8%8C%833.png",alt:""}})])]),t._v(" "),r("p",[t._v("OK, 总结一下为什么持续集成的好处:")]),t._v(" "),r("ul",[r("li",[t._v("尽早发现错误，快速试错。越早发现错误，处理错误的成本越低")]),t._v(" "),r("li",[t._v("自动化工作流，减少人工干预。人类比机器容易犯错, 而且机器擅长做重复的事情")])]),t._v(" "),r("p",[t._v("对于持续集成规范一般会定义这些内容:")]),t._v(" "),r("ul",[r("li",[t._v("执行的环境. 比如容器、Node版本、操作系统等等")]),t._v(" "),r("li",[t._v("触发的条件。比如定时触发、在哪个分支触发、会触发什么任务等等\n执行的任务")]),t._v(" "),r("li",[t._v("划分持续集成的阶段. 比如\n"),r("ul",[r("li",[t._v("检查：包括单元测试和代码lint. 所有push到版本库的代码都会跑这个阶段. 一般可以在提交title中包含[ci skip]来跳过这个阶段")]),t._v(" "),r("li",[t._v("构建: 对前端项目进行构建. 只有打上版本tag的提交或release分支会跑构建任务")]),t._v(" "),r("li",[t._v("发布: 将前端的构建结果进行交付/发布. 只有打上版本tag的提交或者release分支在构建成功后会跑发布任务")])])]),t._v(" "),r("li",[t._v("定义持续集成脚本模板")])]),t._v(" "),r("p",[t._v("常用的CI服务:")]),t._v(" "),r("ul",[r("li",[t._v("Github\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/marketplace/travis-ci",target:"_blank",rel:"noopener noreferrer"}},[t._v("Travis CI"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/marketplace/circleci",target:"_blank",rel:"noopener noreferrer"}},[t._v("CircleCI"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/marketplace/category/continuous-integration",target:"_blank",rel:"noopener noreferrer"}},[t._v("完整列表"),r("OutboundLink")],1)])])]),t._v(" "),r("li",[t._v("GitLab: "),r("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitlab-CI"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("通用\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://jenkins.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jenkins"),r("OutboundLink")],1)])])])]),t._v(" "),r("p",[t._v("扩展")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://juejin.im/post/58f9ee860ce46300611be392",target:"_blank",rel:"noopener noreferrer"}},[t._v("持续集成是什么"),r("OutboundLink")],1)]),t._v(" "),r("h2",{attrs:{id:"_1-5-任务管理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-任务管理","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.5 任务管理")]),t._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/任务管理.png"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86.png",alt:""}})])]),t._v(" "),r("p",[t._v("作为前端Leader少不了任务管理。"),r("strong",[t._v("看板是目前最为流行的任务管理工具")]),t._v("，它可以帮助我们了解项目的进度、资源的分配情况、还原开发现场.")]),t._v(" "),r("p",[t._v("笔者毕业第一年在一家很小的外包公司中工作，初生牛犊不怕虎，我竟然给老板推销起了看板和敏捷项目管理，想要改善项目管理这块效率低下问题，老板表示很支持，但是其他成员积极性并不高, 结果当然是失败的。")]),t._v(" "),r("p",[t._v("当时还起草了一份‘"),r("a",{attrs:{href:"https://github.com/ivan-94/kanban_enforcement/blob/master/README.md#%E4%BB%80%E4%B9%88%E6%98%AF%E7%9C%8B%E6%9D%BF",target:"_blank",rel:"noopener noreferrer"}},[t._v("看板实施细则"),r("OutboundLink")],1),t._v("’, 所以任务管理这一块也算小有心得吧.")]),t._v(" "),r("p",[t._v("说说一些比较好用的工具吧：")]),t._v(" "),r("ul",[r("li",[t._v("基于issue看板 - 可以基于Gitlab或Github的Issue来做任务管理，它们都支持看板。很Geek，推荐")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://tower.im/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tower"),r("OutboundLink")],1),t._v(" - 专门做看板任务管理的。小团队基本够用。我们现在就使用这款产品")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.teambition.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("teambition"),r("OutboundLink")],1),t._v(" - 和Tower差不多，没有深入使用过")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://trello.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Trello"),r("OutboundLink")],1),t._v(" - 颜值高.")])]),t._v(" "),r("h1",{attrs:{id:"_2-技术栈规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-技术栈规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 2 技术栈规范")]),t._v(" "),r("p",[t._v("笔者现在所在的公司之前前端技术栈就非常混乱，Vue、React和AngularJS三大框架都有, 而且风格相差也很大. 当时我就想收包裹走人. 关于技术栈不规范的下场可以参考印度的飞机: "),r("a",{attrs:{href:"https://www.zhihu.com/question/26042167/answer/690035402",target:"_blank",rel:"noopener noreferrer"}},[t._v("<为什么印度的飞机频繁被摔？>"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("很少有人能精通这三个框架的，更别说是一个团队。")]),t._v(" "),r("p",[r("strong",[t._v("三大框架跟编程语言一样都有自己的设计哲学，这跟库是不一样, 一个库的替换成本很低；而框架的背后是一个架构、一个生态。每个框架背后牵涉着开发思维、生态系统、配套工具、最佳实践、性能调优。要精通和熟练一个框架需要付出的成本是很高。")])]),t._v(" "),r("p",[t._v("所以说团队的开发效率是基于稳定且熟练的技术栈的。稳定的技术栈规范有利于团队协作和沟通; 另外如果团队精通这个技术栈，当出现问题或者需要深入调优, 会相对轻松。")]),t._v(" "),r("p",[t._v("前端技术栈规范主要包含下面这些类型:")]),t._v(" "),r("ul",[r("li",[t._v("编程语言 - Typescript或Javascript")]),t._v(" "),r("li",[t._v("UI框架及其配套生态, 以及备选方案。其背后的生态非常庞大:\n"),r("ul",[r("li",[t._v("UI框架")]),t._v(" "),r("li",[t._v("路由")]),t._v(" "),r("li",[t._v("状态管理")]),t._v(" "),r("li",[t._v("组件库")]),t._v(" "),r("li",[t._v("国际化")]),t._v(" "),r("li",[t._v("动画")]),t._v(" "),r("li",[t._v("服务端渲染")]),t._v(" "),r("li",[t._v("脚手架、CLI工具")]),t._v(" "),r("li",[t._v("组件测试")])])]),t._v(" "),r("li",[t._v("样式. 包含了命名规范、预处理器、方法论等等")]),t._v(" "),r("li",[t._v("动画引擎")]),t._v(" "),r("li",[t._v("QA. 包含了测试、Lint、格式化工具、监控")]),t._v(" "),r("li",[t._v("项目构建工具流. 例如webpack、vue-cli")]),t._v(" "),r("li",[t._v("包管理器。npm、yarn")]),t._v(" "),r("li",[t._v("项目管理工具")]),t._v(" "),r("li",[t._v("时间处理。例如Moment.js")]),t._v(" "),r("li",[t._v("模板引擎")]),t._v(" "),r("li",[t._v("开发工具")]),t._v(" "),r("li",[t._v("后端开发框架")]),t._v(" "),r("li",[t._v("工具库")]),t._v(" "),r("li",[t._v("开发/调试工具\n等等")])]),t._v(" "),r("p",[t._v("可以参考一下我们团队的技术栈规范")]),t._v(" "),r("h2",{attrs:{id:"_2-1-技术选型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-技术选型","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.1 技术选型")]),t._v(" "),r("p",[t._v("**如何从零对团队的技术栈进行规范, 或者说怎么进行选型呢？**举个例子, 先确定备选项, 你现在要选Vue还是选React(一个可能引起论战的主题)？")]),t._v(" "),r("p",[t._v("恰好前几天在SegmentFault回答了一个问题: "),r("a",{attrs:{href:"https://segmentfault.com/q/1010000019762657/a-1020000019775888",target:"_blank",rel:"noopener noreferrer"}},[t._v("<什么时候用vue什么时候用react？>"),r("OutboundLink")],1),t._v(", 我讲了一个我们几年前是如何决定要使用React还是Vue的例子(注意结果不重要！)：\n"),r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/对比其他框架.jpeg"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E5%AF%B9%E6%AF%94%E5%85%B6%E4%BB%96%E6%A1%86%E6%9E%B6.jpeg",alt:""}})])]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.infoq.cn/article/points-for-attention-with-technology-choice",target:"_blank",rel:"noopener noreferrer"}},[t._v("<谈谈技术选型的注意事项>"),r("OutboundLink")],1),t._v("这篇文章写得非常好，给了我一些启发。结合上面的回答的例子, 来讲一讲在对相关技术进行选型的一些方法(评分项):")]),t._v(" "),r("ul",[r("li",[t._v("选择你最熟悉的技术。上面说到团队如果熟悉该技术，则可以很好地控制使用过程中的风险，方便对程序进行调优。所以成员熟悉、或至少Leader熟悉程度，是技术选型的一个打分项。")])]),t._v(" "),r("p",[t._v("我们团队最终选择React的一个原因，就是我们熟悉它，它已经在现有的几个应用中良好的运行了，所以 React + 1")]),t._v(" "),r("ul",[r("li",[t._v("选择拥有强大生态和社区支撑的开源技术。有强大的生态和社区意味着，很多东西你不需要重复去造轮子，或者遇到问题可以很快解决，有更多的选择。从公司层面、使用活跃的技术也比较好招人。")])]),t._v(" "),r("p",[t._v("上面的例子也提到了这点，几年前React的生态是强于Vue的，所以 React + 1")]),t._v(" "),r("ul",[r("li",[t._v("选择成长期的技术。"),r("a",{attrs:{href:"https://www.infoq.cn/article/points-for-attention-with-technology-choice",target:"_blank",rel:"noopener noreferrer"}},[t._v("<谈谈技术选型的注意事项>"),r("OutboundLink")],1),t._v("里面有一句话： 选择一个技术的最低标准是，技术的生命周期必须显著长于项目的生命周期")])]),t._v(" "),r("p",[t._v("我们选择的技术应该是向前发展的、面向未来的, 这是选型的基本原则。所以我们一般不会去选择那些 过气 的技术，比如AngularJS(1.x)、Backbone. 因为现在有更好的选择，不必过于保守。")]),t._v(" "),r("p",[t._v("‘向前’还意味着Leader要能够预判该技术未来走向，这里有很多参考因素，比如大厂的支撑、目前社区的活跃度、开发活跃度等等")]),t._v(" "),r("p",[t._v("React、Vue都非常有动力，比如React最近的React Hook、还有未来的ConcurrentMode、Async Rendering... 在这点上Vue和React打成平手吧")]),t._v(" "),r("ul",[r("li",[t._v("API的稳定性。比较典型的例子就是Angular和Python，API不稳定会导致社区的割裂，也会导致项目升级成本变高、或者无法升级, 最终成为技术债。")])]),t._v(" "),r("p",[t._v("不过值得庆幸的是因为有这么多历史教训，现在开源项目在API变更上面是非常谨慎的，参考[译] "),r("a",{attrs:{href:"https://juejin.im/post/5d0f64d4f265da1b67211893",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue 最黑暗的一天事件"),r("OutboundLink")],1),t._v(".")]),t._v(" "),r("p",[t._v("这点上React和Vue依旧打平")]),t._v(" "),r("ul",[r("li",[t._v("基础设施配合。一个技术往往不是孤立存在的，它需要和其他技术相互配合，这种技术之间的融合度也是需要考虑的。")])]),t._v(" "),r("p",[t._v("这个根据团队使用情况来定，比如我们团队统一使用Typescript，Vue跟Typescript配合使用其实不理想，所以 React + 1")]),t._v(" "),r("p",[t._v("业务考虑"),r("a",{attrs:{href:"https://www.infoq.cn/article/points-for-attention-with-technology-choice",target:"_blank",rel:"noopener noreferrer"}},[t._v("<谈谈技术选型的注意事项>"),r("OutboundLink")],1),t._v(" 提到一点就是‘学会从业务端开始思考’. 意思就是选型需要充分地理解业务，理解用户需求，当下需要解决的首要问题，以及可能的风险有哪些，再将目标进行分解，进行具体的技术选型、模型设计、架构设计.")]),t._v(" "),r("p",[t._v("一个典型的例子就是10年前火遍世界的"),r("code",[t._v("Rails")]),t._v(", 后端是使用Rails还是Java/C#/PHP这些传统后端技术? 很多初创公司(如Github、Gitlab、Twitter)选择了前者，他们需要快速开发原型、快速占领市场, Rails开发很爽很快啊, 这种选型就是符合‘业务需求的’。")]),t._v(" "),r("p",[t._v("那么前端好像跟业务离得有点远? 随着‘大前端’的发展，我们的工作对公司业务的影响只会越来越大。")]),t._v(" "),r("p",[t._v("比如上面提到的React Native，我们当时有考虑在移动端应用React Native技术，实现客户端的跨平台，这就是业务影响啊。这时候React是不是又要 +1? 同理还有什么服务端渲染、Serverless等等，期待前端的地位会越来越高")]),t._v(" "),r("p",[t._v("综上，在这个案例中，React是胜出的。")]),t._v(" "),r("p",[t._v("扩展:")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.infoq.cn/article/2017/02/Technology-selection",target:"_blank",rel:"noopener noreferrer"}},[t._v("谈谈技术选型"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://www.infoq.cn/article/points-for-attention-with-technology-choice",target:"_blank",rel:"noopener noreferrer"}},[t._v("谈谈技术选型的注意事项"),r("OutboundLink")],1)]),t._v(" "),r("h2",{attrs:{id:"_2-2-迎接新技术"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-迎接新技术","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.2 迎接新技术")]),t._v(" "),r("p",[t._v("当然，对于团队而言也要鼓励学习新的技术、淘汰旧的技术栈。因为一般而言新的技术或解决方案，是为了更高的生产力而诞生的。当团队容纳一个新的技术选型需要考虑以下几点：")]),t._v(" "),r("ul",[r("li",[t._v("学习成本。考虑团队成员的接纳能力。如果成本小于收获的利益，在团队里面推行估计阻力会比较大")]),t._v(" "),r("li",[t._v("收益。是否能够解决当前的某些痛点")]),t._v(" "),r("li",[t._v("考虑风险。一般我们不能将一个实验阶段的技术使用的生产环境中\n就我们团队而言，每个成员都有自己感兴趣的方向和领域，所以我们可以分工合作，探索各自的领域，再将成果分享出来，如果靠谱的话则可以在实验项目中先试验一下，最后才推广到其他项目.")])]),t._v(" "),r("h1",{attrs:{id:"_3-浏览器兼容规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-浏览器兼容规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 3 浏览器兼容规范")]),t._v(" "),r("p",[t._v("前端团队应该根据针对应用所面对的用户情况、应用类型、开发成本、浏览器市场统计数据等因素，来制定自己的浏览器兼容规范，并写入应用使用手册中.")]),t._v(" "),r("p",[r("strong",[t._v("有了浏览器兼容规范，前端开发和兼容性测试就有理有据，避免争议; 同时它也是前端团队的一种对外声明，除非特殊要求，不符合浏览器兼容规范的浏览器，前端开发人员可以选择忽略。")])]),t._v(" "),r("p",[t._v("3.1 确定兼容策略")]),t._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/确定兼容策略.png"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E7%A1%AE%E5%AE%9A%E5%85%BC%E5%AE%B9%E7%AD%96%E7%95%A5.png",alt:""}})])]),t._v(" "),r("p",[t._v("渐进增强还是优雅降级. 这是两个不同方向策略，渐进增强保证低版本浏览器的体验，对于支持新特性的新浏览器提供稍好的体验；优雅降级则是相反的，为现代浏览器提供最好的体验，而旧浏览器则退而求之次，保证大概的功能.")]),t._v(" "),r("p",[t._v("选择不同的策略对前端开发的影响是比较大的，但是开发者没有选择权。确定哪种兼容策略，应该取决于用户比重，如果大部分用户使用的是现代浏览器，就应该使用优雅降级，反之选择渐进增强.")]),t._v(" "),r("p",[t._v("3.2 确定浏览器分级")]),t._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/确定浏览器分级.png"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E7%A1%AE%E5%AE%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E5%88%86%E7%BA%A7.png",alt:""}})])]),t._v(" "),r("p",[t._v("YUI就曾提出浏览器分级原则，到今天这个原则依然适用。简单说就是将浏览器划分为多个等级，不同等级表示不同的支持程度. 比如我们团队就将浏览器划分为以下"),r("a",{attrs:{href:"https://github.com/GDJiaMi/frontend-standards/blob/master/browser-compatibility.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("三个等级"),r("OutboundLink")],1),t._v(":")]),t._v(" "),r("ul",[r("li",[t._v("完全兼容: 保证百分百功能正常")]),t._v(" "),r("li",[t._v("部分兼容: 只能保证功能、样式与需求大致一致。对于一些不影响主体需求和功能的bug，会做降低优先级处理或者不处理。")]),t._v(" "),r("li",[t._v("不兼容: 不考虑兼容性\n一般而言, 根据浏览器市场分布情况、用户占比、开发成本等因素划分等级.")])]),t._v(" "),r("p",[t._v("举个例子，下面是我们对管理系统的兼容规范:")]),t._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/确定浏览器分级.png"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E7%A1%AE%E5%AE%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E5%88%86%E7%BA%A7.png",alt:""}})])]),t._v(" "),r("h2",{attrs:{id:"_3-3-获取统计数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-获取统计数据","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.3 获取统计数据")]),t._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/确定浏览器分级.png"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E7%A1%AE%E5%AE%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E5%88%86%E7%BA%A7.png",alt:""}})])]),t._v(" "),r("p",[r("a",{attrs:{href:"https://tongji.baidu.com/web/welcome/login",target:"_blank",rel:"noopener noreferrer"}},[t._v("百度统计"),r("OutboundLink")],1),t._v("是中文网站使用最为广泛的、免费的流量分析平台. 如上图，通过这些统计平台可以获取到终端真实的浏览器使用情况, "),r("a",{attrs:{href:"https://tongji.baidu.com/web/demo/visit/client?siteId=5503017",target:"_blank",rel:"noopener noreferrer"}},[t._v("点击查看示例"),r("OutboundLink")],1),t._v("。")]),t._v(" "),r("p",[t._v("如果公司没有开发自己监控服务，还是建议使用这些免费的，有大厂支持的监控工具:")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://tongji.baidu.com/web/welcome/login",target:"_blank",rel:"noopener noreferrer"}},[t._v("百度统计"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://web.umeng.com/main.php?spm=a211g2.211692.0.0.3a437d23sjzEPv&c=user&a=index",target:"_blank",rel:"noopener noreferrer"}},[t._v("友盟"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://analytics.google.com/analytics/web/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Google Analytics"),r("OutboundLink")],1),t._v(" 需要kx上网")]),t._v(" "),r("p",[t._v("可以从这些地方获取通用的浏览器统计数据:")]),t._v(" "),r("p",[r("a",{attrs:{href:"http://tongji.baidu.com/data/browser",target:"_blank",rel:"noopener noreferrer"}},[t._v("百度流量研究院"),r("OutboundLink")],1),t._v("：主要提供国内浏览器统计\n"),r("a",{attrs:{href:"http://gs.statcounter.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("statcounter"),r("OutboundLink")],1),t._v(": 国际浏览器统计\n"),r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Timeline_of_web_browsers",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器发布年份统计"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("确定浏览器是否支持某个特性:")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://caniuse.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("caniuse"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN"),r("OutboundLink")],1)]),t._v(" "),r("h1",{attrs:{id:"_4-项目组织规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-项目组织规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 4 项目组织规范")]),t._v(" "),r("p",[t._v("项目组织规范定义了如何组织一个前端项目, 例如项目的命名、项目的文件结构、版本号规范等等。尤其对于开源项目，规范化的项目组织就更重要了。")]),t._v(" "),r("h2",{attrs:{id:"_4-1-通用的项目组织规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-通用的项目组织规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.1 通用的项目组织规范")]),t._v(" "),r("p",[t._v("一个典型的项目组织规范如下:")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("README.md: 项目说明, 这个是最重要。你必须在这里提供关于项目的关键信息或者相关信息的入口. 一般包含下列信息:")]),t._v(" "),r("ul",[r("li",[t._v("简要描述、项目主要特性")]),t._v(" "),r("li",[t._v("运行环境/依赖、安装和构建、测试指南")]),t._v(" "),r("li",[t._v("简单示例代码")]),t._v(" "),r("li",[t._v("文档或文档入口, 其他版本或相关资源入口")]),t._v(" "),r("li",[t._v("联系方式、讨论群")]),t._v(" "),r("li",[t._v("许可、贡献/开发指南")])])]),t._v(" "),r("li",[r("p",[t._v("CHANGELOG.md: 放置每个版本的变动内容, 通常要描述每个版本变更的内容。方便使用者确定应该使用哪个版本. 关于CHANGELOG的规范可以参考"),r("a",{attrs:{href:"https://keepachangelog.com/en/1.0.0/",target:"_blank",rel:"noopener noreferrer"}},[t._v("keep a changelog"),r("OutboundLink")],1)])]),t._v(" "),r("li",[r("p",[t._v("package.json: 前端项目必须. 描述当前的版本、可用的命令、包名、依赖、环境约束、项目配置等信息.")])]),t._v(" "),r("li",[r("p",[t._v(".gitignore: 忽略不必要的文件，避免将自动生成的文件提交到版本库")])]),t._v(" "),r("li",[r("p",[t._v(".gitattributes: git配置，有一些跨平台差异的行为可能需要在这里配置一下，如换行规则")])]),t._v(" "),r("li",[r("p",[t._v("docs/: 项目的细化文档, 可选.")])]),t._v(" "),r("li",[r("p",[t._v("examples/: 项目的示例代码，可选.")])]),t._v(" "),r("li",[r("p",[t._v("build: 项目工具类脚本放置在这里，非必须。如果使用统一构建工具，则没有这个目录")])]),t._v(" "),r("li",[r("p",[t._v("dist/: 项目构建结果输出目录")])]),t._v(" "),r("li",[r("p",[t._v("src/: 源代码目录")])]),t._v(" "),r("li",[r("p",[t._v("tests/: 单元测试目录. 按照Jest规范, __tests__目录通常和被测试的模块在同一个父目录下, 例如:")])])]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("/src\n  __tests__/\n    index.ts\n    a.ts\n  index.ts\n  a.ts\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br")])]),r("ul",[r("li",[r("p",[t._v("tests: 全局的测试目录，通常放应用的集成测试或E2E测试等用例")])]),t._v(" "),r("li",[r("p",[t._v(".env*: 项目中我们通常会使用环境变量来影响应用在不同运行环境下的行为. 可以通过dotEnv来从文件中读取环境变量. 通常有三个文件:")]),t._v(" "),r("ul",[r("li",[t._v(".env 通用的环境变量")]),t._v(" "),r("li",[t._v(".env.development 开发环境的环境变量")]),t._v(" "),r("li",[t._v(".env.production 生成环境的环境变量\n基本上这些文件的变动的频率很少，团队成员应该不要随意变动，以免影响其他成员。所以通常会使用.env."),r("em",[t._v(".local文件来覆盖上述的配置, 另外会设置版本库来忽略")]),t._v(".local文件.")])])])]),t._v(" "),r("p",[t._v("对于开源项目通常还包括这些目录:")]),t._v(" "),r("ul",[r("li",[t._v("LICENSE: 说明项目许可")]),t._v(" "),r("li",[t._v(".github: 开源贡献规范和指南")]),t._v(" "),r("li",[t._v("CONTRIBUTING: 贡献指南, 这里一般会说明贡献的规范、以及项目的基本组织、架构等信息")]),t._v(" "),r("li",[t._v("CODE_OF_CONDUCT: 行为准则")]),t._v(" "),r("li",[t._v("COMMIT_CONVENTION: 提交信息规范，上文已经提及")]),t._v(" "),r("li",[t._v("ISSUE_TEMPLATE: Issue的模板，github可以自动识别这个模板")]),t._v(" "),r("li",[t._v("PULL_REQUEST_TEMPLATE: PR模板\n任意一个优秀的开源项目都是你的老师，例如"),r("a",{attrs:{href:"https://github.com/facebook/react",target:"_blank",rel:"noopener noreferrer"}},[t._v("React"),r("OutboundLink")],1),t._v("、"),r("a",{attrs:{href:"https://github.com/vuejs/vue",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue"),r("OutboundLink")],1),t._v("...")])]),t._v(" "),r("h2",{attrs:{id:"_4-2-目录组织的风格"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-目录组织的风格","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.2 目录组织的风格")]),t._v(" "),r("p",[t._v("上面只是一个通用的项目组织规范，具体源代码如何组织还取决于你们使用的技术栈和团队喜好。网上有很多教程，具体可以搜索"),r("strong",[t._v("怎么组织XX项目")]),t._v(". 总结一下项目组织主要有三种风格:")]),t._v(" "),r("ul",[r("li",[t._v("Rails-style: 按照文件的类型划分为不同的目录，例如components、constants、 typings、views. 这个来源于Ruby-on-Rails框架，它按照MVC架构来划分不同的目录类型，典型的目录结构如下:")])]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v(" app\n   models # 模型\n   views # 视图\n   controllers # 控制器\n   helpers # 帮助程序\n   assets  # 静态资源\n config     # 配置\n   application.rb\n   database.yml\n   routes.rb      # 路由控制\n   locales        # 国际化配置\n   environments/\n db        # 数据库相关\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br"),r("span",{staticClass:"line-number"},[t._v("10")]),r("br"),r("span",{staticClass:"line-number"},[t._v("11")]),r("br"),r("span",{staticClass:"line-number"},[t._v("12")]),r("br"),r("span",{staticClass:"line-number"},[t._v("13")]),r("br")])]),r("ul",[r("li",[t._v("Domain-style: 按照一个功能特性或业务创建单独的目录，这个目录就近包含多种类型的文件或目录. 比如一个典型的Redux项目，所有项目的文件就近放置在同一个目录下:")])]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("Users/\nHome/\n  components/\n  actions.js\n  actionTypes.js\n  constants.js\n  index.js\n  model.js\n  reducer.js\n  selectors.js\n  style.css\nindex.js\nrootReducer.js\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br"),r("span",{staticClass:"line-number"},[t._v("10")]),r("br"),r("span",{staticClass:"line-number"},[t._v("11")]),r("br"),r("span",{staticClass:"line-number"},[t._v("12")]),r("br"),r("span",{staticClass:"line-number"},[t._v("13")]),r("br")])]),r("ul",[r("li",[t._v("Ducks-style: 优点类似于Domain-style，不过更彻底, 它通常将相关联的元素定义在一个文件下。Vue的单文件组件就是一个典型的例子，除此之外Vuex也是使用这种风格:")])]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('<template>\n  <div id="app">\n    <h1>My Todo App!</h1>\n    <TodoList/>\n  </div>\n</template>\n\n<script>\nimport TodoList from  ./components/TodoList.vue\n\nexport default {\n  components: {\n    TodoList\n  }\n}\n<\/script>\n\n<style lang="scss">\n@import  ./variables.scss ;\n/* ... */\n</style>\n')])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br"),r("span",{staticClass:"line-number"},[t._v("10")]),r("br"),r("span",{staticClass:"line-number"},[t._v("11")]),r("br"),r("span",{staticClass:"line-number"},[t._v("12")]),r("br"),r("span",{staticClass:"line-number"},[t._v("13")]),r("br"),r("span",{staticClass:"line-number"},[t._v("14")]),r("br"),r("span",{staticClass:"line-number"},[t._v("15")]),r("br"),r("span",{staticClass:"line-number"},[t._v("16")]),r("br"),r("span",{staticClass:"line-number"},[t._v("17")]),r("br"),r("span",{staticClass:"line-number"},[t._v("18")]),r("br"),r("span",{staticClass:"line-number"},[t._v("19")]),r("br"),r("span",{staticClass:"line-number"},[t._v("20")]),r("br"),r("span",{staticClass:"line-number"},[t._v("21")]),r("br")])]),r("p",[t._v("大部分情况下, 我们都是使用混合两种方式的目录结构，例如:")]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("src/\n  components/      # 🔴 项目通用的‘展示组件’\n    Button/\n      index.tsx    # 组件的入口, 导出组件\n      Groups.tsx   # 子组件\n      loading.svg  # 静态资源\n      style.css    # 组件样式\n    ...\n    index.ts       # 到处所有组件\n  containers/      # 🔴 包含 容器组件 和 页面组件\n    LoginPage/     # 页面组件, 例如登录\n      components/  # 页面级别展示组件，这些组件不能复用与其他页面组件。\n        Button.tsx # 组件未必是一个目录形式，对于一个简单组件可以是一个单文件形式. 但还是推荐使用目录，方便扩展\n        Panel.tsx\n      reducer.ts   # redux reduces\n      useLogin.ts  # (可选)放置 逻辑 , 按照👆分离逻辑和视图的原则，将逻辑、状态处理抽取到hook文件\n      types.ts     # typescript 类型声明\n      style.css\n      logo.png\n      message.ts\n      constants.ts\n      index.tsx\n    HomePage/\n    ...\n    index.tsx      # 🔴应用根组件\n  hooks/           # 🔴可复用的hook\n    useList.ts\n    usePromise.ts\n  ...\n  index.tsx        # 应用入口, 在这里使用ReactDOM对跟组件进行渲染\n  stores.ts        # redux stores\n  contants.ts      # 全局常量\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br"),r("span",{staticClass:"line-number"},[t._v("10")]),r("br"),r("span",{staticClass:"line-number"},[t._v("11")]),r("br"),r("span",{staticClass:"line-number"},[t._v("12")]),r("br"),r("span",{staticClass:"line-number"},[t._v("13")]),r("br"),r("span",{staticClass:"line-number"},[t._v("14")]),r("br"),r("span",{staticClass:"line-number"},[t._v("15")]),r("br"),r("span",{staticClass:"line-number"},[t._v("16")]),r("br"),r("span",{staticClass:"line-number"},[t._v("17")]),r("br"),r("span",{staticClass:"line-number"},[t._v("18")]),r("br"),r("span",{staticClass:"line-number"},[t._v("19")]),r("br"),r("span",{staticClass:"line-number"},[t._v("20")]),r("br"),r("span",{staticClass:"line-number"},[t._v("21")]),r("br"),r("span",{staticClass:"line-number"},[t._v("22")]),r("br"),r("span",{staticClass:"line-number"},[t._v("23")]),r("br"),r("span",{staticClass:"line-number"},[t._v("24")]),r("br"),r("span",{staticClass:"line-number"},[t._v("25")]),r("br"),r("span",{staticClass:"line-number"},[t._v("26")]),r("br"),r("span",{staticClass:"line-number"},[t._v("27")]),r("br"),r("span",{staticClass:"line-number"},[t._v("28")]),r("br"),r("span",{staticClass:"line-number"},[t._v("29")]),r("br"),r("span",{staticClass:"line-number"},[t._v("30")]),r("br"),r("span",{staticClass:"line-number"},[t._v("31")]),r("br"),r("span",{staticClass:"line-number"},[t._v("32")]),r("br")])]),r("p",[t._v("框架官方很少会去干预项目的组织方式，读者可以参考下面这些资源来建立自己项目组织规范:")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://link.juejin.im/?target=http%3A%2F%2Fcn.redux.js.org%2Fdocs%2Ffaq%2FCodeStructure.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redux 常见问题：代码结构"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Freact-boilerplate%2Freact-boilerplate",target:"_blank",rel:"noopener noreferrer"}},[t._v("react-boilerplate"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://vuex.vuejs.org/zh/guide/structure.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("vuex 项目结构"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://juejin.im/post/5cd8fb916fb9a03218556fc1#heading-11",target:"_blank",rel:"noopener noreferrer"}},[t._v("React组件设计实践总结02 - 组件的组织"),r("OutboundLink")],1)]),t._v(" "),r("h2",{attrs:{id:"_4-3-脚手架和项目模板"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-脚手架和项目模板","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.3 脚手架和项目模板")]),t._v(" "),r("p",[t._v("在将项目结构规范确定下来后，可以创建自己的脚手架工具或者项目模板，用于快速初始化一个项目或代码模板。")]),t._v(" "),r("p",[t._v("相关资源:")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://yeoman.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("yeoman"),r("OutboundLink")],1),t._v(" - 老牌的项目脚手架工具")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/amwmedia/plop",target:"_blank",rel:"noopener noreferrer"}},[t._v("plop"),r("OutboundLink")],1),t._v(" - 代码生成辅助CLI")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/jondot/hygen",target:"_blank",rel:"noopener noreferrer"}},[t._v("hygen"),r("OutboundLink")],1),t._v(" - 类似于plop")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/diegohaz/generact",target:"_blank",rel:"noopener noreferrer"}},[t._v("generact"),r("OutboundLink")],1),t._v(" - 生成React组件, 大部分组件的文件结构差不多, 这个工具就是帮助你生成这些重复的代码")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://babeljs.io/docs/en/babel-generator",target:"_blank",rel:"noopener noreferrer"}},[t._v("babel-code-generator"),r("OutboundLink")],1),t._v(" - 利用babel来实现更高级的代码编辑和自动生成")])]),t._v(" "),r("h1",{attrs:{id:"_5-编码规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-编码规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 5 编码规范")]),t._v(" "),r("p",[t._v("网络上大部分‘前端规范’指的都是编码规范, 这是一种‘狭义’的前端规范.")]),t._v(" "),r("p",[t._v("统一的编码规范对团队项目的长远维护不无裨益. 一致性的代码规范可以增强团队开发协作效率、提高代码质量、减少遗留系统维护的负担。")]),t._v(" "),r("p",[t._v("最直接的好处就是避免写出糟糕的代码, 糟糕的代码与新手和老手关系不大，我也见过好处工作很多年的‘资深’工程师写出恶心的代码. 这样的代码随着项目的迭代会变得难以控制。")]),t._v(" "),r("p",[t._v("现代的Lint工具已经非常先进，几乎可以约束各种编码行为. 比如约束一个文件的长度、函数的复杂度、命名规范、注释规范、接口黑名单、DeadCode、检查简单的逻辑错误...")]),t._v(" "),r("p",[t._v("每一个程序员心目中对‘好代码’都有自己的主见，统一的编码规范可以像秦始皇统一战国一样，避免不必要的论战和争议。")]),t._v(" "),r("p",[t._v("其实与其自己建立前端编码规范，笔者推荐选择社区沉淀下来的规范. 这方面的资源非常多，所以本文也不武断地提出自己的规范建议. 推荐下面这些资源:")]),t._v(" "),r("h2",{attrs:{id:"_5-1-javascript"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-javascript","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.1 Javascript")]),t._v(" "),r("ul",[r("li",[t._v("Lint工具\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://cn.eslint.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ESLint"),r("OutboundLink")],1),t._v(" - 🔥目前是社区最流行的、通用的Javascript Lint工具，Lint界的Babel。支持定制插件、preset。如果不想折腾可以选择它的一些预定义配置")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/palantir/tslint",target:"_blank",rel:"noopener noreferrer"}},[t._v("TSLint"),r("OutboundLink")],1),t._v(" - Typescript Lint工具。不过即将废弃了, 推荐使用ESLint")])])]),t._v(" "),r("li",[t._v("规范\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://standardjs.com/readme-zhcn.html#why-should-i-use-javascript-standard-style",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript Standard Style"),r("OutboundLink")],1),t._v(" - 🔥 零配置的、‘标准’的")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/airbnb/javascript",target:"_blank",rel:"noopener noreferrer"}},[t._v("Javascript编码规范"),r("OutboundLink")],1),t._v(". 底层基于Eslint。目前不支持Typescript\nAirbnb JavaScript Style Guide - Airbnb的编码规范，业界标杆")])])]),t._v(" "),r("li",[t._v("类型检查. 暂时将它们归类到这里，因为它们同属于‘"),r("a",{attrs:{href:"https://juejin.im/post/5d2c515d6fb9a07ead5a2bbe#heading-39",target:"_blank",rel:"noopener noreferrer"}},[t._v("静态测试"),r("OutboundLink")],1),t._v("’\n"),r("a",{attrs:{href:"https://www.typescriptlang.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Typescript"),r("OutboundLink")],1),t._v(" - 🔥 Javascript语言的超集，这是一门‘新’的语言，而不是简单的类型检查器. 不过它也支持"),r("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("原生Javascript的类型检查"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://flow.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Flow"),r("OutboundLink")],1),t._v(" - Facebook出品的类型检查器，语法和Typescript类似. 个人推荐使用Typescript")])]),t._v(" "),r("h2",{attrs:{id:"_5-2-html"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-html","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.2 HTML")]),t._v(" "),r("ul",[r("li",[t._v("Lint工具\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://htmlhint.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTMLHint"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/twbs/bootlint",target:"_blank",rel:"noopener noreferrer"}},[t._v("bootlint"),r("OutboundLink")],1)])])]),t._v(" "),r("li",[t._v("规范\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://codeguide.co/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Code Guide"),r("OutboundLink")],1)])])])]),t._v(" "),r("h2",{attrs:{id:"_5-3-css"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-css","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.3 CSS")]),t._v(" "),r("ul",[r("li",[t._v("Lint工具\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://stylelint.docschina.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("stylelint"),r("OutboundLink")],1),t._v(" - 🔥 通用的CSS编码检查工具，支持最新的CSS语法、CSS-in-js、以及其他类CSS语法(如SCSS、Less). 它也有预定义配置，推荐使用")])])]),t._v(" "),r("li",[t._v("规范\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/airbnb/css",target:"_blank",rel:"noopener noreferrer"}},[t._v("Airbnb CSS / Sass Styleguide"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://codeguide.co/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Code Guide"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://css-tricks.com/css-style-guides/",target:"_blank",rel:"noopener noreferrer"}},[t._v("更多"),r("OutboundLink")],1)])])]),t._v(" "),r("li",[t._v("方法论\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://css-tricks.com/bem-101/",target:"_blank",rel:"noopener noreferrer"}},[t._v("BEM"),r("OutboundLink")],1),t._v(" - 🔥 BEM命名规范")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/stubbornella/oocss/wiki",target:"_blank",rel:"noopener noreferrer"}},[t._v("OOCSS"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"http://smacss.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("smacss"),r("OutboundLink")],1)])])])]),t._v(" "),r("p",[t._v("关于CSS可以学习"),r("a",{attrs:{href:"http://twitter.github.com/bootstrap/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bootstrap"),r("OutboundLink")],1),t._v("这些传统UI框架，他们的代码组织性非常好, 值得学习")]),t._v(" "),r("h2",{attrs:{id:"_5-4-代码格式化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-代码格式化","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.4 代码格式化")]),t._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/代码格式化.jpeg"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96.jpeg",alt:""}})])]),t._v(" "),r("p",[r("a",{attrs:{href:"https://prettier.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Prettier"),r("OutboundLink")],1),t._v(" - 🔥 关于代码格式化的所有东西都交给它吧！\n基本上，所有代码格式相关的工作都可以交给Prettier来做，在这个基础上再使用Eslint覆盖语义相关的检查")]),t._v(" "),r("h2",{attrs:{id:"_5-5-集大成的"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-集大成的","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.5 集大成的")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://coderlmn.github.io/code-standards/#_code_reviews",target:"_blank",rel:"noopener noreferrer"}},[t._v("isobar 前端代码规范及最佳实践"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://guide.aotu.io/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("凹凸实验室代码规范"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/fex-team/styleguide",target:"_blank",rel:"noopener noreferrer"}},[t._v("百度FEX规范"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"http://nec.netease.com/standard",target:"_blank",rel:"noopener noreferrer"}},[t._v("老牌的NEC规范"),r("OutboundLink")],1),t._v(" - 有点老")])]),t._v(" "),r("h2",{attrs:{id:"_5-6-特定框架风格指南"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-特定框架风格指南","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.6 特定框架风格指南")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://vue.docschina.org/v2/style-guide/",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-style-guide"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://github.com/airbnb/javascript/tree/master/react",target:"_blank",rel:"noopener noreferrer"}},[t._v("Airbnb React/JSX Style Guide"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://juejin.im/post/5cd7f2c4e51d453a7d63b715",target:"_blank",rel:"noopener noreferrer"}},[t._v("React组件设计实践总结"),r("OutboundLink")],1),t._v(" - 自荐一下笔者写的React组件设计相关实践")]),t._v(" "),r("h2",{attrs:{id:"_5-7-code-review"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-code-review","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.7 Code Review")]),t._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/CodeReview.png"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/CodeReview.png",alt:""}})])]),t._v(" "),r("p",[t._v("上述的Lint工具和类型检查器, 可以约束代码风格、避免低级的语法错误。但是即使通过上面的Lint和类型检查，代码也可能未必是‘好代码’。")]),t._v(" "),r("p",[t._v("很多代码设计的‘最佳实践’是无法通过具象化的自动化工具或文档覆盖的, 这时候， 经验 或者 群体智慧 就派上用场了. 比如Code Review阶段会检查这些东西:")]),t._v(" "),r("ul",[r("li",[t._v("编程原则、设计思想. 例如符合SOLID原则? 是否足够DRY？接口设计是否简洁易扩展、")]),t._v(" "),r("li",[t._v("模块耦合程度、代码重复")]),t._v(" "),r("li",[t._v("代码健壮性。是否存在内存泄露、是否线程安全、是否有潜在性能问题和异常、错误是否被处理")]),t._v(" "),r("li",[t._v("代码的性能和效率。")]),t._v(" "),r("li",[t._v("是否有没有考虑到的场景？")])]),t._v(" "),r("p",[t._v("如果你们是第一次推行Code Review, 可以建立一个检查列表，对照着进行检查。熟练后，心中自然无码。")]),t._v(" "),r("p",[t._v("Code Review有很多好处，比如：")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("Code Review可以让其他成员都熟悉代码")]),t._v("。这样保证其他人都可以较快地接手你的工作，或者帮你解决某些问题")]),t._v(" "),r("li",[r("strong",[t._v("提高代码质量")]),t._v("。毫无疑问. 一方面是主动性的代码质量提升，比如你的代码需要被人Review，会自觉尽量的提高代码质量；另一方面，其他成员可以检查提交方的代码质量")]),t._v(" "),r("li",[r("strong",[t._v("检查或提高新成员的编程水平")]),t._v("。培养新人时，由于不信任它们提交的代码，我们会做一次Review检查代码是否过关。另一方面这是一次真实的案例讲解, 可以较快提高他们的能力")])]),t._v(" "),r("p",[t._v("Code Review有两种方式: 一个"),r("strong",[t._v("提交时")]),t._v("、一个是"),r("strong",[t._v("定时")]),t._v(":")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("提交时")]),t._v(". 大部分开源项目采用这种方式。通俗讲就是Pull Request。只有代码通过测试、和其他成员的Review才可以合进正式版本库。这种方式也称为‘阻塞式’代码检查，一般配合GitFlow使用。")]),t._v(" "),r("li",[r("strong",[t._v("定时")]),t._v(". 在项目完结后、项目的某个里程碑、或者固定的时间(每天、每个星期..). 团队成员聚在一起，回顾自己写的代码, 让其他成员进行审查\nCode Review是比较难以推行的，不过这个也要看你们团队的情况，向我们钱少活多的团队，很少的时间去立马去兼顾其他成员的代码. 这时候"),r("strong",[t._v("定时Review")]),t._v("会更有用，因为看起来更‘节省时间’.")])]),t._v(" "),r("p",[t._v("而"),r("strong",[t._v("提交时Review")]),t._v("则可以针对新人，比如你不信任他们的代码或者希望帮助他们提高编码能力。")]),t._v(" "),r("p",[t._v("相关资源:")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzIwMTQwNTA3Nw==&mid=400946871&idx=1&sn=5a125337833768d705f9d87ba8cd9fff&scene=1&srcid=0104FLyeXIS6N0EShgDseIfI&key=41ecb04b051110031290b34976240e650f0169d239c89f125162a89c8d3412f2087198612e71fd7685cae9eebe08e295&ascene=0&uin=MTYyMDMzMTAwMA%3D%3D&devicetype=iMac+MacBookPro11%2C5+OSX+OSX+10.10.5+build(14F1509)&version=11020201&pass_ticket=dc5bBckt1XSthRKTIsukYHIcAvKfv0jninbMlYQ5TWnE6XS%2FrRkdHKlJjNTI2Wsg",target:"_blank",rel:"noopener noreferrer"}},[t._v("Code Review最佳实践"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://juejin.im/post/5c9740ba6fb9a071090d6a37",target:"_blank",rel:"noopener noreferrer"}},[t._v("是否要做Code Review？与BAT资深架构师争论之后的思考"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://richardcao.me/2016/09/30/Talk-About-Codereview/",target:"_blank",rel:"noopener noreferrer"}},[t._v("一些Code Review工具"),r("OutboundLink")],1)]),t._v(" "),r("h1",{attrs:{id:"_6-文档规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-文档规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 6 文档规范")]),t._v(" "),r("p",[t._v("文档对于项目开发和维护、学习、重构、以及知识管理非常重要。")]),t._v(" "),r("p",[t._v("和写测试一样、大部分开发人员会觉得写文档是一件痛苦的事情，不过只有时间能够证明它的价值。比如对于人员流动比较大的公司，如果有规范的文档体系，转交工作就会变动非常轻松.")]),t._v(" "),r("p",[t._v("广义的文档不单指‘说明文件’本身，它有很多形式、来源和载体，可以描述一个知识、以及知识形成和迭代的过程。例如版本库代码提交记录、代码注释、决策和讨论记录、CHANGELOG、示例代码、规范、传统文档等等")]),t._v(" "),r("h2",{attrs:{id:"_6-1-建立文档中心"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-建立文档中心","aria-hidden":"true"}},[t._v("#")]),t._v(" 6.1 建立文档中心")]),t._v(" "),r("p",[t._v("我们公司是做IM的，所以之前我们优先使用 自己的 通讯工具来分享文档，这种方式有很大问题:")]),t._v(" "),r("ul",[r("li",[t._v("如果没有存档习惯(比如后端的API文档，因为由后端维护，一般不会主动去存档), 文档就可能丢失，而且通讯工具是不会永久保存你的文档的。当丢失文件就需要重新和文档维护者索要")]),t._v(" "),r("li",[t._v("糟糕的是文档维护者也是自己手动在本地存档的，这样导致的问题是: 如果工作转交，其他开发者需要花费一点时间来查找; 丢失了就真的没了")]),t._v(" "),r("li",[t._v("每一次文档更新要重新发一份, 这很麻烦，而且可能出现漏发的情况, 导致前后不一致.")]),t._v(" "),r("li",[t._v("关于知识的学习、以及有意义的讨论记录无法归档。\n上面介绍的是一种非常原始的文档共享方式，很多小团队就是这么干的。")])]),t._v(" "),r("p",[t._v("对于项目本身的文档建议放置在关联项目版本库里面，跟随项目代码进行迭代, 当我们在检索或跟踪文档的历史记录时，这种方式是最方便的。")]),t._v(" "),r("p",[t._v("然而很多应用是跨越多个团队的，每个团队都会有自己的文档输出(比如需求文档、系统设计文档、API文档、配置文档等等)，而且通常也不会在一个版本库里。这时候文档就比较分散。所以一个统一的文档中心是很有必要。")]),t._v(" "),r("p",[t._v("我们公司现在选择的方案是"),r("strong",[t._v("Git+Markdown")]),t._v("，也就是说所有的文档都放置在一个git版本库下。之前也考虑过商业的方案，譬如"),r("a",{attrs:{href:"https://shimo.im/welcome",target:"_blank",rel:"noopener noreferrer"}},[t._v("石墨文档"),r("OutboundLink")],1),t._v("、"),r("a",{attrs:{href:"https://docs.qq.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("腾讯文档"),r("OutboundLink")],1),t._v(", 但管理层并不信任这些服务。")]),t._v(" "),r("p",[t._v("大概的git项目组织如下:")]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("规范/\nA应用/\n  产品/\n  设计/\n  API文档/\n  测试/\n  其他/\nB应用/\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br")])]),r("p",[t._v("Git版本库(例如Gitlab)有很多优势，例如历史记录跟踪、版本化、问题讨论(可以关联issue、或者提交)、多人协作、搜索、权限管理(针对不同的版本库或分组为不同人员设置权限)等等。")]),t._v(" "),r("p",[r("strong",[t._v("Git+Markdown")]),t._v("可以满足开发者的大部分需求。但是Git最擅长的是处理纯文本文件、对于二进制是无能为力的，无法针对这些类型的文档进行在线预览和编辑。")]),t._v(" "),r("p",[t._v("所以"),r("strong",[t._v("Git+Markdown")]),t._v("并不能满足多样化的文档处理需求，比如思维导图、图表、表格、PPT、白板等需求. 毕竟它不是专业的文档处理工具。所以对于产品、设计人员这些富文档需求场景，通常会按照传统方式或者更专业的工具对文档进行管理.")]),t._v(" "),r("p",[t._v("6.2 文档格式")]),t._v(" "),r("p",[t._v("毫无疑问，对于开发者来说，"),r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/Markdown",target:"_blank",rel:"noopener noreferrer"}},[t._v("Markdown"),r("OutboundLink")],1),t._v("是最适合的、最通用的文档格式。支持版本库在线预览和变更历史跟踪。")]),t._v(" "),r("p",[t._v("下面这些工具可以提高Markdown的开发效率:")]),t._v(" "),r("ul",[r("li",[t._v("可视化编辑器\n"),r("ul",[r("li",[t._v("Visual Code: 大部分代码编辑都支持Markdown编辑和预览")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://link.jianshu.com/?t=http://mouapp.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mou"),r("OutboundLink")],1),t._v(": Mac下的老牌编辑器")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://typora.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("typora"),r("OutboundLink")],1),t._v(": 跨平台的Markdown编辑器，推荐")])])]),t._v(" "),r("li",[t._v("markdownlint: 编码检查器")]),t._v(" "),r("li",[t._v("扩展(Visual Studio Code):")]),t._v(" "),r("li",[t._v("Markdown All in One: All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more)")]),t._v(" "),r("li",[t._v("Markdown TOC: markdown 目录生成，我最常用的markdown插件\n图表绘制工具:")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.draw.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("drawio"),r("OutboundLink")],1),t._v(" 基于Web的图表绘制工具、也有离线客户端")]),t._v(" "),r("li",[t._v("KeyNote/PPT 临时绘图也不错")])]),t._v(" "),r("p",[t._v("6.3 定义文档的模板")]),t._v(" "),r("p",[t._v("关于如何写好文档，很难通过标准或规范来进行约束，因为它的主观性比较强, 好的文档取决于编辑者的逻辑总结能力、表达能力、以及有没有站在读者的角度去思考问题。")]),t._v(" "),r("p",[t._v("所以大部分情况下，我们可以为不同类型的文档提供一个模板，通过模板来说明一个文档需要包含哪些内容, 对文档的编写者进行引导.")]),t._v(" "),r("p",[t._v("例如一个API文档可能需要这些内容:")]),t._v(" "),r("ul",[r("li",[t._v("接口的索引")]),t._v(" "),r("li",[t._v("接口的版本、变更记录")]),t._v(" "),r("li",[t._v("用法和整体描述, 认证鉴权等等")]),t._v(" "),r("li",[t._v("描述具体的接口\n"),r("ul",[r("li",[t._v("功能说明")]),t._v(" "),r("li",[t._v("方法名称或者URI")]),t._v(" "),r("li",[t._v("参数和返回值定义")]),t._v(" "),r("li",[t._v("调用示例")]),t._v(" "),r("li",[t._v("注意事项等等\n具体规范内容因团队而异，这里点到为止.")])])])]),t._v(" "),r("p",[t._v("扩展:")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/ruanyf/document-style-guide/blob/master/docs/reference.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("中文技术文档的写作规范"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/reactjs/rfcs/blob/master/0000-template.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("React RFC模板"),r("OutboundLink")],1)])]),t._v(" "),r("h2",{attrs:{id:"_6-4-讨论即文档"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-讨论即文档","aria-hidden":"true"}},[t._v("#")]),t._v(" 6.4 讨论即文档")]),t._v(" "),r("p",[t._v("一般情况下，对于一个开源项目来说除了官方文档，Issues也是一个很重要的信息来源。在Issue中我们可以获取其他开发者遇到的问题和解决方案、给官方反馈/投票、关注官方的最新动态、和其他开发者头脑风暴唇枪舌战等等。")]),t._v(" "),r("p",[t._v("所以相对于使用IM，笔者更推荐Issue这种沟通模式，因为它方便归档组织，索引和查找。而IM上的讨论就像流水一样，一去不复返。")]),t._v(" "),r("p",[t._v("当然两种工具的适用场景不一样，你拿IM的使用方式来使用Issue，Issue就会变得很水。Issue适合做有意义的、目的明确的讨论。所以要谴责一下在Github Issue上灌水的开发者。")]),t._v(" "),r("p",[t._v("关于Issue有很多妙用，推荐阅读这篇文章"),r("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2017/08/issue.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("<如何使用 Issue 管理软件项目？>"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("现在很多开源项目都引入了RFC(请求意见稿)流程("),r("a",{attrs:{href:"https://www.infoq.cn/article/2017/12/react-rfc-process",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考React采用新的RFC流程"),r("OutboundLink")],1),t._v(", 以及"),r("a",{attrs:{href:"https://juejin.im/post/5d0f64d4f265da1b67211893",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue 最黑暗的一天"),r("OutboundLink")],1),t._v("), 这让开发者有‘翻身农奴、当家做主’的感觉，任何人都可以参与到一个开源项目重大事件的决策之中。每个RFC会说明决策的动机、详细设计、优缺点。除了官方文档之外，这些RFC是很有价值的学习资料。")]),t._v(" "),r("p",[t._v("我觉得如果不涉及机密，团队应该要让更多人参与到项目的设计和决策中，对于新手可以学到很多东西，而对于发起者也可能有考虑不周的情况。")]),t._v(" "),r("p",[t._v("那对于企业应用开发, Issue有用吗?")]),t._v(" "),r("p",[t._v("当然有用, 比如我们可以将这类话题从IM转移到Issue:")]),t._v(" "),r("ul",[r("li",[t._v("设计方案")]),t._v(" "),r("li",[t._v("决策/建议\n"),r("ul",[r("li",[t._v("新功能、新技术引入")]),t._v(" "),r("li",[t._v("重构")]),t._v(" "),r("li",[t._v("性能优化")]),t._v(" "),r("li",[t._v("规范")])])]),t._v(" "),r("li",[t._v("问题讨论")]),t._v(" "),r("li",[t._v("重大事件")]),t._v(" "),r("li",[t._v("计划或进度跟踪")]),t._v(" "),r("li",[t._v("...")])]),t._v(" "),r("p",[t._v("另外Issue通常通过标签来进行分类，方便组织和检索:")]),t._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/方便组织和检索.png"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E6%96%B9%E4%BE%BF%E7%BB%84%E7%BB%87%E5%92%8C%E6%A3%80%E7%B4%A2.png",alt:""}})])]),t._v(" "),r("h2",{attrs:{id:"_6-5-注释即文档"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-注释即文档","aria-hidden":"true"}},[t._v("#")]),t._v(" 6.5 注释即文档")]),t._v(" "),r("p",[t._v("必要和适量的注释对阅读源代码的人来说就是一个路牌, 可以少走很多弯路.")]),t._v(" "),r("p",[t._v("关于注释的一些准则，"),r("a",{attrs:{href:"https://github.com/alibaba/p3c/blob/master/p3c-gitbook/%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6/%E6%B3%A8%E9%87%8A%E8%A7%84%E7%BA%A6.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("<阿里巴巴Java开发手册>"),r("OutboundLink")],1),t._v("总结得非常好, 推荐基于这个来建立注释规范。另外通过ESlint是可以对注释进行一定程度的规范。")]),t._v(" "),r("h2",{attrs:{id:"_6-6-代码即文档"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-代码即文档","aria-hidden":"true"}},[t._v("#")]),t._v(" 6.6 代码即文档")]),t._v(" "),r("p",[t._v("现在有很多种工具支持从代码中解析和生成文档, 这可以给开发者简化很多文档维护的工作。")]),t._v(" "),r("p",[t._v("举个例子，我们经常会遇到修改了代码，但是文档忘记同步的情况。通过‘代码即文档’的方式至少可以保持文档和代码同步更新；另外很多工具会分析代码的数据类型，自动帮我们生成参数和返回值定义，这也可以减少很多文档编写工作以及出错率。")]),t._v(" "),r("p",[t._v("比如可以通过下面注释方式来生成组件文档:")]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("import * as React from  react ;\nimport { Component } from  react ;\n\n/**\n * Props注释\n */\nexport interface ColumnProps extends React.HTMLAttributes<any> {\n  /** prop1 description */\n  prop1?: string;\n  /** prop2 description */\n  prop2: number;\n  /**\n   * prop3 description\n   */\n  prop3: () => void;\n  /** prop4 description */\n  prop4:  option1  |  option2  |  option3 ;\n}\n\n/**\n * 对组件进行注释\n */\nexport class Column extends Component<ColumnProps, {}> {\n  render() {\n    return <div>Column</div>;\n  }\n}\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br"),r("span",{staticClass:"line-number"},[t._v("10")]),r("br"),r("span",{staticClass:"line-number"},[t._v("11")]),r("br"),r("span",{staticClass:"line-number"},[t._v("12")]),r("br"),r("span",{staticClass:"line-number"},[t._v("13")]),r("br"),r("span",{staticClass:"line-number"},[t._v("14")]),r("br"),r("span",{staticClass:"line-number"},[t._v("15")]),r("br"),r("span",{staticClass:"line-number"},[t._v("16")]),r("br"),r("span",{staticClass:"line-number"},[t._v("17")]),r("br"),r("span",{staticClass:"line-number"},[t._v("18")]),r("br"),r("span",{staticClass:"line-number"},[t._v("19")]),r("br"),r("span",{staticClass:"line-number"},[t._v("20")]),r("br"),r("span",{staticClass:"line-number"},[t._v("21")]),r("br"),r("span",{staticClass:"line-number"},[t._v("22")]),r("br"),r("span",{staticClass:"line-number"},[t._v("23")]),r("br"),r("span",{staticClass:"line-number"},[t._v("24")]),r("br"),r("span",{staticClass:"line-number"},[t._v("25")]),r("br"),r("span",{staticClass:"line-number"},[t._v("26")]),r("br"),r("span",{staticClass:"line-number"},[t._v("27")]),r("br")])]),r("p",[t._v("复制代码")]),t._v(" "),r("p",[t._v("相关的工具有:")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("API文档")]),t._v(" "),r("ul",[r("li",[t._v("Typescript\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/TypeStrong/typedoc",target:"_blank",rel:"noopener noreferrer"}},[t._v("typedoc"),r("OutboundLink")],1),t._v(" 基于tsdoc标准的文档生成器")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/microsoft/tsdoc",target:"_blank",rel:"noopener noreferrer"}},[t._v("tsdoc"),r("OutboundLink")],1),t._v(" Typescript官方的注释文档标准")])])]),t._v(" "),r("li",[t._v("Javascript\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/microsoft/tsdoc",target:"_blank",rel:"noopener noreferrer"}},[t._v("jsdoc"),r("OutboundLink")],1),t._v(" Javascript文档注释标准和生成器")])])])])]),t._v(" "),r("li",[r("p",[t._v("后端接口文档")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://swagger.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Swagger"),r("OutboundLink")],1),t._v(" Restful接口文档规范")]),t._v(" "),r("li",[t._v("GraphQL: 这个有很多工具，例如graphiql, 集成了Playground和文档，很先进")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://easy-mock.com/login",target:"_blank",rel:"noopener noreferrer"}},[t._v("Easy Mock"),r("OutboundLink")],1),t._v(" 一个可视化，并且能快速生成模拟数据的服务")])])]),t._v(" "),r("li",[r("p",[t._v("组件文档")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://storybook.js.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("StoryBook"),r("OutboundLink")],1),t._v(" 通用的组件开发、测试、文档工具")]),t._v(" "),r("li",[t._v("React\n"),r("ul",[r("li",[r("a",{attrs:{href:"http://docz.site/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docz"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/styleguidist/react-styleguidist",target:"_blank",rel:"noopener noreferrer"}},[t._v("Styleguidist"),r("OutboundLink")],1)])])]),t._v(" "),r("li",[t._v("Vue\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/vue-styleguidist/vue-styleguidist",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-styleguidist"),r("OutboundLink")],1)])])])])])]),t._v(" "),r("h1",{attrs:{id:"_7-ui设计规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-ui设计规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 7 UI设计规范")]),t._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/UI设计规范.jpeg"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/UI%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83.jpeg",alt:""}})])]),t._v(" "),r("p",[t._v("这是一个容易被忽略的规范类型。笔者就深受其苦，我们公司初期UI并不专业，没有所谓的设计规范，这就导致他们设计出来的产品都是东借西凑，前后不统一，多个应用之间的组件不能复用。这搞得我们不得不浪费时间，写很多定制化样式和组件，为他们的不专业买单.")]),t._v(" "),r("p",[t._v("关于UI设计规范的重要性有兴趣的读者可以看这篇文章"),r("a",{attrs:{href:"https://juejin.im/post/5b766ac56fb9a009aa154c27",target:"_blank",rel:"noopener noreferrer"}},[t._v("<开发和设计沟通有多难？- 你只差一个设计规范>"),r("OutboundLink")],1),t._v(".")]),t._v(" "),r("p",[t._v("简单总结一下UI设计规范的意义：")]),t._v(" "),r("ul",[r("li",[t._v("提供团队协作效率(产品和开发)")]),t._v(" "),r("li",[t._v("提高组件的复用率. 统一的组件规范可以让组件更好管理")]),t._v(" "),r("li",[t._v("保持产品迭代过程中品牌一致性")])]),t._v(" "),r("p",[t._v("建立一个定义良好的设计规范需要UI设计和开发的紧密配合，有时候也可以由我们前端来推动。")]),t._v(" "),r("p",[t._v("比如很多开源的UI框架，一开始都是开发者YY出来的，并没有设计参与，后来组件库慢慢沉淀成型，UI设计师才介入规范一下。")]),t._v(" "),r("p",[t._v("如果你们团队不打算制定自己的UI设计规范，则推荐使用现成的开源组件库：")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://ant.design/index-cn",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ant Design"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://material-ui.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Material-UI"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://element.eleme.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Element UI"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://weui.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("WeUI"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://developer.microsoft.com/en-us/fabric#/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Microsoft Fabric"),r("OutboundLink")],1),t._v("\n这些开源组件库都经过良好的设计和沉淀, 而且配套了完善的设计原则、最佳实践和设计资源文件（Sketch 和 Axure），可以帮助业务快速设计出高质量的产品原型。")]),t._v(" "),r("h2",{attrs:{id:"_8-测试规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-测试规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 8 测试规范")]),t._v(" "),r("p",[t._v("测试是保障代码质量的重要手段，但是很少有人愿意在这里花太多时间。")]),t._v(" "),r("p",[t._v("比如笔者，我很少会去给业务代码和组件写单元测试，除非自己对代码非常没有信心，按照我的理念写测试不如将代码写得更简单一点，比如把一个函数拆分为更小的函数，保持单一职责。")]),t._v(" "),r("p",[t._v("但是对于一些底层、共享的代码模块还是有测试的必要的。")]),t._v(" "),r("p",[t._v("我在"),r("a",{attrs:{href:"https://juejin.im/post/5d2c515d6fb9a07ead5a2bbe",target:"_blank",rel:"noopener noreferrer"}},[t._v("不知道测试什么？这些是你需要知道的软件测试类型和常识"),r("OutboundLink")],1),t._v("文章中，列举了一些开发者需要关注的测试类型和常识, 如果按照测试的阶段进行分类，大概是这样子的:")]),t._v(" "),r("p",[t._v("其中前端开发者需要关注的主要有以下几种测试类型:")]),t._v(" "),r("ul",[r("li",[t._v("单元测试: 对独立的软件模块进行测试")]),t._v(" "),r("li",[t._v("UI组件测试: 包括了快照(Snapshot)测试")]),t._v(" "),r("li",[t._v("集成测试: 在单元测试的基础上，将模块组合起来，测试它们的组合性")]),t._v(" "),r("li",[t._v("E2E测试: 在完整、真实的运行环境下模拟真实用户对应用进行测试。主要测试前端和后端的协调性")]),t._v(" "),r("li",[t._v("兼容性测试: 上面提到了浏览器兼容规范，在将版本提交给测试/发布之前，需要确保能符合兼容性要求")]),t._v(" "),r("li",[t._v("性能测试: 测试和分析是否存在性能问题")]),t._v(" "),r("li",[t._v("其他:\n"),r("ul",[r("li",[t._v("安全测试")]),t._v(" "),r("li",[t._v("SEO测试\n因为对于小公司来说整个软件开发流程可能没有那么规范，比如很难构建一个完整的端对端测试环境，这些都不是前端团队可以操作的范围, 所以自动化测试很难推行。但是可以根据团队和业务情况逐步进行开展。")])])])]),t._v(" "),r("p",[t._v("可实施性比较高的, 也比较简单是单元测试，所以本文也重点关注单元测试.")]),t._v(" "),r("h1",{attrs:{id:"_8-1-测试的流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-测试的流程","aria-hidden":"true"}},[t._v("#")]),t._v(" 8.1 测试的流程")]),t._v(" "),r("p",[t._v("首先要定义一个合适的软件测试流程, 合适的测试流程可以降低开发和测试团队之间的沟通协作成本、提高测试效率。例如我们团队目前的测试流程:\n"),r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/测试的流程.jpeg"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E6%B5%8B%E8%AF%95%E7%9A%84%E6%B5%81%E7%A8%8B.jpeg",alt:""}})])]),t._v(" "),r("h1",{attrs:{id:"_8-2-单元测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-单元测试","aria-hidden":"true"}},[t._v("#")]),t._v(" 8.2 单元测试")]),t._v(" "),r("p",[t._v("单元测试有很多好处, 比如:")]),t._v(" "),r("ul",[r("li",[t._v("提高信心，适应变化和迭代. 如果现有代码有较为完善的单元测试，在代码重构时，可以检验模块是否依然可以工作, 一旦变更导致错误，单元测试也可以帮助我们快速定位并修复错误")]),t._v(" "),r("li",[t._v("单元测试是集成测试的基础")]),t._v(" "),r("li",[t._v("测试即文档。如果文档不能解决你的问题，在你打算看源码之前，可以查看单元测试。通过这些测试用例，开发人员可以直观地理解程序单元的基础API")]),t._v(" "),r("li",[t._v("提升代码质量。易于测试的代码，一般都是好代码")])]),t._v(" "),r("p",[t._v("测什么?")]),t._v(" "),r("p",[t._v("业务代码或业务组件是比较难以实施单元测试的，一方面它们比较多变、另一方面很多团队很少有精力维护这部分单元测试。所以通常只要求对一些基础/底层的组件、框架或者服务进行测试, 视情况考虑是否要测试业务代码")]),t._v(" "),r("p",[t._v("测试的准则:")]),t._v(" "),r("ul",[r("li",[t._v("推荐Petroware的"),r("a",{attrs:{href:"https://petroware.no/unittesting.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Unit Testing Guidelines"),r("OutboundLink")],1),t._v(", 总结了27条单元测试准则，非常受用.")]),t._v(" "),r("li",[t._v("另外<阿里巴巴的Java开发手册>中总结的"),r("a",{attrs:{href:"https://github.com/alibaba/p3c/blob/master/p3c-gitbook/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("单元测试准则"),r("OutboundLink")],1),t._v(", 也不错，虽然书名是Java，准则是通用的.")])]),t._v(" "),r("p",[t._v("单元测试指标:")]),t._v(" "),r("p",[t._v("一般使用"),r("code",[t._v("测试覆盖率")]),t._v("来量化，尽管对于覆盖率能不能衡量单元测试的有效性存在较多争议。")]),t._v(" "),r("p",[t._v("大部分情况下还是推荐尽可能提高覆盖率, 比如要求"),r("strong",[t._v("语句覆盖率达到70%；核心模块的语句覆盖率和分支覆盖率都要达到100%")]),t._v(". 视团队情况而定")]),t._v(" "),r("p",[t._v("扩展:")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.infoq.cn/article/test-coverage-rate-role",target:"_blank",rel:"noopener noreferrer"}},[t._v("测试覆盖（率）到底有什么用？"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("相关工具")]),t._v(" "),r("ul",[r("li",[t._v("Headless Browsers: 无头浏览器是网页自动化的重要运行环境。常用于功能测试、单元测试、网络爬虫\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/GoogleChrome/puppeteer",target:"_blank",rel:"noopener noreferrer"}},[t._v("puppeteer"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Headless Chromium"),r("OutboundLink")],1)])])]),t._v(" "),r("li",[t._v("测试框架\n"),r("a",{attrs:{href:"http://jest.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jest"),r("OutboundLink")],1),t._v(" 🔥Facebook的单元测试框架. 零配置, 支持组件快照测试、模块Mock、Spy. 一般场景, 单元测试学它一个就行了\n"),r("ul",[r("li",[t._v("组件测试\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/testing-library=",target:"_blank",rel:"noopener noreferrer"}},[t._v("testing-library"),r("OutboundLink")],1),t._v(" 🔥")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/airbnb/enzyme",target:"_blank",rel:"noopener noreferrer"}},[t._v("Enzyme"),r("OutboundLink")],1)])])]),t._v(" "),r("li",[r("a",{attrs:{href:"https://theintern.github.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Intern"),r("OutboundLink")],1)])])]),t._v(" "),r("li",[t._v("单元测试\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/avajs/ava",target:"_blank",rel:"noopener noreferrer"}},[t._v("AVA"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"http://jasmine.github.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jasmine"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"http://mochajs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mocha"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/substack/tape",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tape"),r("OutboundLink")],1)])])]),t._v(" "),r("li",[t._v("断言库\n"),r("ul",[r("li",[r("a",{attrs:{href:"http://chaijs.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Chai"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/Automattic/expect.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("expect.js"),r("OutboundLink")],1)])])]),t._v(" "),r("li",[r("a",{attrs:{href:"http://shouldjs.github.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("should.js"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("Mock/Stubs/Spies\n"),r("ul",[r("li",[r("a",{attrs:{href:"http://sinonjs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("sinon.js"),r("OutboundLink")],1)])])]),t._v(" "),r("li",[t._v("代码覆盖率\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/gotwarlost/istanbul",target:"_blank",rel:"noopener noreferrer"}},[t._v("istanbul"),r("OutboundLink")],1)])])]),t._v(" "),r("li",[t._v("基准测试\n"),r("ul",[r("li",[r("a",{attrs:{href:"http://benchmarkjs.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("benchmark.js"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://jsperf.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("jsperf.com"),r("OutboundLink")],1)])])])]),t._v(" "),r("h1",{attrs:{id:"_9-异常处理、监控和调试规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9-异常处理、监控和调试规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 9 异常处理、监控和调试规范")]),t._v(" "),r("p",[t._v("很多开发者常常误用或者轻视异常的处理, 合理有效的异常处理可以提高应用的健壮性和可用性，另外还可以帮助开发者快速定位异常.")]),t._v(" "),r("h2",{attrs:{id:"_9-1-异常处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-异常处理","aria-hidden":"true"}},[t._v("#")]),t._v(" 9.1 异常处理")]),t._v(" "),r("p",[t._v("<阿里巴巴的Java开发手册>中总结的"),r("a",{attrs:{href:"https://github.com/alibaba/p3c/blob/master/p3c-gitbook/%E5%BC%82%E5%B8%B8%E6%97%A5%E5%BF%97/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("异常处理规范"),r("OutboundLink")],1),t._v("对JavaScript的异常处理也很有参考意义，比如:")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("异常不要用来做流程控制，条件控制。")])]),t._v(" "),r("li",[r("p",[t._v("捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。")])]),t._v(" "),r("li",[r("p",[t._v("catch时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。对于非稳定代码的catch尽可能进行区分异常类型，再做对应的异常处理。不要对大段代码进行try-catch")])]),t._v(" "),r("li",[r("p",[t._v("...\n然后再根据JavaScript本身的异常处理特点总结一些规范行为, 例如:")])]),t._v(" "),r("li",[r("p",[t._v("不要throw非Error对象")])]),t._v(" "),r("li",[r("p",[t._v("不要忽略异步异常")])]),t._v(" "),r("li",[r("p",[t._v("全局监控Javascript异常")])]),t._v(" "),r("li",[r("p",[t._v("...")])])]),t._v(" "),r("p",[t._v("资源:")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://rollbar.com/blog/top-10-javascript-errors/",target:"_blank",rel:"noopener noreferrer"}},[t._v("从1000+个项目中总结出来的前10个JavaScript错误, 以及如何避免它们"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://levelup.gitconnected.com/the-definite-guide-to-handling-errors-gracefully-in-javascript-58424d9c60e6",target:"_blank",rel:"noopener noreferrer"}},[t._v("Javascript异常处理‘权威’指南"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/63698500",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端异常处理最佳实践"),r("OutboundLink")],1)]),t._v(" "),r("h2",{attrs:{id:"_9-2-日志"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-日志","aria-hidden":"true"}},[t._v("#")]),t._v(" 9.2 日志")]),t._v(" "),r("p",[t._v("对于前端来说，日志也不是毫无意义(很多框架性能优化建议在生产环境移除console)。尤其是在生产现场调试代码时，这时候可贵的控制台日志可以帮助你快速找到异常的线索.")]),t._v(" "),r("p",[t._v("不过通常我们只要保留必要的、有意义的日志输出，比如你不应该将console.log放到一个React渲染函数中、或者放到一个循环中, DDos式的日志信息并不能帮助我们定位问题，反而会影响运行的性能. 所以需要一个规范来约束日志输出行为, 比如:")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("避免重复打印日志")])]),t._v(" "),r("li",[r("p",[t._v("谨慎地记录日志, 划分日志级别。比如生产环境禁止输出debug日志；有选择地输出info日志；")])]),t._v(" "),r("li",[r("p",[t._v("使用前缀对日志进行分类, 例如: [User] xxxx")])]),t._v(" "),r("li",[r("p",[t._v("只记录关键信息, 这些信息可以帮助你诊断问题")])]),t._v(" "),r("li",[r("p",[t._v("...\n扩展资源")])]),t._v(" "),r("li",[r("p",[t._v("debug 适合Node.js和浏览器的debug日志工具, 支持动态开启日志打印")])]),t._v(" "),r("li",[r("p",[t._v("vConsole 移动端调试利器")])])]),t._v(" "),r("h2",{attrs:{id:"_9-3-异常监控"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9-3-异常监控","aria-hidden":"true"}},[t._v("#")]),t._v(" 9.3 异常监控")]),t._v(" "),r("p",[t._v("因为程序跑在不受控的环境，所以对于客户端应用来说，异常监控在生产环境是非常重要的，它可以收集各种意料之外生产环境问题，帮助开发者快速定位异常。")]),t._v(" "),r("p",[t._v("异常监控通常会通过三种方式来收集异常数据:")]),t._v(" "),r("ul",[r("li",[t._v("全局捕获。例如使用window.onerror, 或者unhandledrejection")]),t._v(" "),r("li",[t._v("主动上报。在try/catch中主动上报.")]),t._v(" "),r("li",[t._v("用户反馈。比如弹窗让用户填写反馈信息.")])]),t._v(" "),r("p",[t._v("和日志一样，不是所有‘异常’都应该上报给异常监控系统，譬如一些预料之内的‘异常’，比如用户输入错误、鉴权失败、网络错误等等. 异常监控主要用来上报一些意料之外的、或者致命性的异常.")]),t._v(" "),r("p",[t._v("要做好前端的异常监控其实并不容易，它需要处理这些东西:")]),t._v(" "),r("ul",[r("li",[t._v("浏览器兼容性。")]),t._v(" "),r("li",[t._v("碎片收集(breadcrumbs)。收集‘灾难’现场的一些线索，这些线索对问题诊断很重要。例如当前用户信息、版本、运行环境、打印的日志、函数调用栈等等")]),t._v(" "),r("li",[t._v("调用栈的转换。通常在浏览器运行的压缩优化过的代码，这种调用栈基本没什么可读性，通常需要通过SourceMap映射到原始代码. 可以使用这个库: "),r("a",{attrs:{href:"https://github.com/mozilla/source-map#sourcemapconsumer",target:"_blank",rel:"noopener noreferrer"}},[t._v("source-map"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("数据的聚合。后端监控系统需要对前端上报的信息进行分析和聚合")])]),t._v(" "),r("p",[t._v("对于小团队未必有能力开发这一套系统，所以推荐使用一些第三方工具。例如")]),t._v(" "),r("ul",[r("li",[t._v("Sentry 🔥免费基本够用")]),t._v(" "),r("li",[t._v("FunDebug 付费增强")])]),t._v(" "),r("p",[t._v("扩展:")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://cdc.tencent.com/2018/09/13/frontend-exception-monitor-research/",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端异常监控解决方案研究"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://www.cnblogs.com/warm-stranger/p/9417084.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("搭建前端监控系统"),r("OutboundLink")],1)]),t._v(" "),r("h1",{attrs:{id:"_10-前后端协作规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10-前后端协作规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 10 前后端协作规范")]),t._v(" "),r("p",[t._v("前端是Web的一个细分领域，往往不能脱离后端而存在。所以和后端协作的时间是最长的.")]),t._v(" "),r("h2",{attrs:{id:"_10-1-协作流程规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-协作流程规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 10.1 协作流程规范")]),t._v(" "),r("p",[t._v("前后端团队经过长期的合作，一般可以总结出一条对于双方开发效率最优的协作流程. 将这个落实为规范，后面的团队成员都遵循这个步调进行协作。")]),t._v(" "),r("p",[t._v("一个典型的前后端协作流程如下:")]),t._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/协作流程规范.jpeg"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E5%8D%8F%E4%BD%9C%E6%B5%81%E7%A8%8B%E8%A7%84%E8%8C%83.jpeg",alt:""}})])]),t._v(" "),r("ul",[r("li",[t._v("需求分析。参与者一般有前后端、测试、以及产品. 由产品主持，对需求进行宣贯，接受开发和测试的反馈，确保大家对需求有一致的认知")]),t._v(" "),r("li",[t._v("前后端开发讨论。讨论应用的一些开发设计，沟通技术点、难点、以及分工问题.")]),t._v(" "),r("li",[t._v("设计接口文档。可以由前后端一起设计；或者由后端设计、前端确认是否符合要求")]),t._v(" "),r("li",[t._v("并行开发。前后端并行开发，在这个阶段，前端可以先实现静态页面; 或者根据接口文档对接口进行Mock, 来模拟对接后端接口")]),t._v(" "),r("li",[t._v("在联调之前，要求后端做好接口测试")]),t._v(" "),r("li",[t._v("真实环境联调。前端将接口请求代理到后端服务，进行真实环境联调。")])]),t._v(" "),r("h2",{attrs:{id:"_10-2-接口规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-接口规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 10.2 接口规范")]),t._v(" "),r("p",[t._v("首先应该确定下来的是接口规范。其实使用哪种接口标准是其次，重要的是统一，且要满足前后端的开发效率要求.")]),t._v(" "),r("p",[t._v("笔者不建议后端去定义自己的接口标准，而应该去选择一些通用的、有标准定义接口形式, 例如:")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://zh.wikipedia.org/zh-hans/%E8%A1%A8%E7%8E%B0%E5%B1%82%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2",target:"_blank",rel:"noopener noreferrer"}},[t._v("RESTful"),r("OutboundLink")],1),t._v(": RESTful是目前使用最为广泛的API设计规范, 基于HTTP本身的机制来实现.")])]),t._v(" "),r("p",[t._v("笔者个人是比较喜欢这个API规范，但是我发现很多开发者并不能真正(或者说没心思)理解它，设计出来的接口，跟我想象的相差甚远。换句话说，对于RESTful，开发者之间很难达成一致的理解，容易产生分歧。")]),t._v(" "),r("p",[t._v("因为是使用最广泛的API形式，所以社区上有很多工具来对RESTful接口进行文档化、测试和模拟.")]),t._v(" "),r("ul",[r("li",[r("p",[r("a",{attrs:{href:"http://wiki.geekdream.com/Specification/json-rpc_2.0.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSONRPC"),r("OutboundLink")],1),t._v(" 这是一种非常简单、容易理解的接口规范。相对于RESTful我更推荐这个，简单则不容易产生分歧，新手也可以很快接受.")])]),t._v(" "),r("li",[r("p",[r("a",{attrs:{href:"https://graphql.org/learn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GraphQL"),r("OutboundLink")],1),t._v(" 🔥更为先进、更有前景的API规范。但是你要说服后端配合你使用这种标准可能很有难度")])])]),t._v(" "),r("blockquote",[r("p",[t._v("接口设计需要注意的点:")])]),t._v(" "),r("ul",[r("li",[t._v("明确区分是正常还是异常, 严格遵循接口的异常原语. 上述接口形式都有明确的异常原语，比如JSONRPC，当出现异常时应该返回错误对象响应，而不是在正常的响应体中返回错误代码. 另外要规范化的错误码, HTTP响应码就是一个不错的学习对象")]),t._v(" "),r("li",[t._v("明确数据类型。很多后端写的接口都是string和number不分的，如果妥协的话、前端就需要针对这个属性做特殊处理，这也可能是潜在的bug")]),t._v(" "),r("li",[t._v("明确空值的意义。比如在做更新操作是，空值是表示重置，还是忽略更新？")]),t._v(" "),r("li",[t._v("响应避免冗余的嵌套。")]),t._v(" "),r("li",[t._v("接口版本化，保持向下兼容。就像我们上文的‘语义化版本规范’说的，对于后端来说，API就是公共的接口. 公共暴露的接口应该有一个版本号，来说明当前描述的接口做了什么变动，是否向下兼容。现在前端代码可能会在客户端被缓存，例如小程序。如果后端做了break change，就会影响这部分用户。")])]),t._v(" "),r("h2",{attrs:{id:"_10-3-接口文档规范"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10-3-接口文档规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 10.3 接口文档规范")]),t._v(" "),r("p",[t._v("后端通过接口文档向前端暴露接口相关的信息。通常需要包含这些信息：")]),t._v(" "),r("ul",[r("li",[t._v("版本号")]),t._v(" "),r("li",[t._v("文档描述")]),t._v(" "),r("li",[t._v("服务的入口. 例如基本路径")]),t._v(" "),r("li",[t._v("测试服务器. 可选")]),t._v(" "),r("li",[t._v("简单使用示例")]),t._v(" "),r("li",[t._v("安全和认证")]),t._v(" "),r("li",[t._v("具体接口定义\n"),r("ul",[r("li",[t._v("方法名称或者URL")]),t._v(" "),r("li",[t._v("方法描述")]),t._v(" "),r("li",[t._v("请求参数及其描述，必须说明类型(数据类型、是否可选等)")]),t._v(" "),r("li",[t._v("响应参数及其描述, 必须说明类型(数据类型、是否可选等)")]),t._v(" "),r("li",[t._v("可能的异常情况、错误代码、以及描述")]),t._v(" "),r("li",[t._v("请求示例，可选")]),t._v(" "),r("li",[t._v("人工维护导致的问题:")])])])]),t._v(" "),r("p",[t._v("上文‘代码即文档’就提到了人工维护接口文档可能导致代码和文档不同步问题。")]),t._v(" "),r("p",[t._v("如果可以从代码或者规范文档(例如OpenAPI这类API描述规范)中生成接口文档，可以解决实现和文档不一致问题, 同时也可以减少文档编写和维护的投入.")]),t._v(" "),r("h2",{attrs:{id:"_10-4-接口测试与模拟"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10-4-接口测试与模拟","aria-hidden":"true"}},[t._v("#")]),t._v(" 10.4 接口测试与模拟")]),t._v(" "),r("p",[t._v("为了做到高效率的前后端并行开发，接口的测试与模拟是必要的。")]),t._v(" "),r("ul",[r("li",[t._v("前端要求后端在联调之前，需要测试验证好自己的接口是否可以正常工作。而不是在联调期间，把前端当‘接口测试员’，阻塞接口联调进度")]),t._v(" "),r("li",[t._v("另外前端需要在后端接口未准备好之前，通过接口模拟的方式，来编写业务逻辑代码。\n针对接口测试与模拟，存在下图这样一个理想的模型:")])]),t._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/接口测试与模拟.png"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%A8%A1%E6%8B%9F.png",alt:""}})]),t._v("\n一切从定义良好的接口文档出发，生成Mock Server和Mock Client, Mock Server给前端提供模拟数据，而Mock Client则辅助后端对它们的接口进行测试.")]),t._v(" "),r("p",[t._v("资源:")]),t._v(" "),r("ul",[r("li",[t._v("RESTful\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://swagger.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Swagger"),r("OutboundLink")],1),t._v(" 这是最为接近上面理想模型的一个解决方案")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/nuysoft/Mock",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSON Server"),r("OutboundLink")],1),t._v(" 快速生成JSON mock服务器")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://easy-mock.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Easy Mock"),r("OutboundLink")],1),t._v(" 可视化的、在线的接口mock服务")])])]),t._v(" "),r("li",[t._v("GraphQl\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/APIs-guru/graphql-faker",target:"_blank",rel:"noopener noreferrer"}},[t._v("GraphQL Faker"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.apollographql.com/docs/graphql-tools/mocking/",target:"_blank",rel:"noopener noreferrer"}},[t._v("graphql-tools"),r("OutboundLink")],1)])])]),t._v(" "),r("li",[t._v("模拟数据生成\n"),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/Marak/faker.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("faker.js"),r("OutboundLink")],1),t._v("🔥强大的模拟数据生成工具，支持Node和浏览器")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/nuysoft/Mock",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mock.js"),r("OutboundLink")],1),t._v(" 数据生成和模拟工具")])])])]),t._v(" "),r("h1",{attrs:{id:"_11-培训-知识管理-技术沉淀"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11-培训-知识管理-技术沉淀","aria-hidden":"true"}},[t._v("#")]),t._v(" 11 培训/知识管理/技术沉淀")]),t._v(" "),r("p",[t._v("我觉得一个团队的知识管理是非常重要的. 你要问一个刚入行的新手加入团队希望得到什么？很多人的回答是 学习 , 希望自己的技术可以更加精进, 钱倒还是其次。")]),t._v(" "),r("p",[t._v("然而现实是目前很多公司的氛围并不是这样的，一天到晚写业务代码、工作量大、每天做重复的事情，而且还加班，工作多年技术也没感觉有多少进步, 确实会让人非常沮丧。包括笔者也是这样的。")]),t._v(" "),r("p",[t._v("所以为了改善这种情况，我来聊聊最近在‘小团队’做的一些尝试.")]),t._v(" "),r("h2",{attrs:{id:"_11-1-新人培训"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-新人培训","aria-hidden":"true"}},[t._v("#")]),t._v(" 11.1 新人培训")]),t._v(" "),r("p",[t._v("如果团队有规范的新成员培训手册，可以节省很多培训的时间，避免每次重复口述一样的内容。培训手册包含以下内容:")]),t._v(" "),r("ul",[r("li",[t._v("产品架构与组织架构. 介绍公司背景和产品，一般组织的团队结构和产品的架构是相关联的. 以笔者所在公司为例, 主要产品是即时通信:")])]),t._v(" "),r("p",[r("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/产品研发流程.jpeg"}},[r("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E6%B5%81%E7%A8%8B.jpeg",alt:""}})])]),t._v(" "),r("ul",[r("li",[r("p",[t._v("产品研发流程: 介绍产品开发和迭代会涉及到的流程、以及团队之间的协作衔接，例如:")])]),t._v(" "),r("li",[r("p",[t._v("工作范围: 团队成员的职责范围")])]),t._v(" "),r("li",[r("p",[t._v("建立资源索引: 开发需要设计到的资源，比如各种文档地址、研发系统入口(例如gitlab、bug跟踪系统、文件共享、发布平台、开发/测试环境、监控系统)、协作规范等等。将这些资源整理好可以减少不必要的沟通成本")])]),t._v(" "),r("li",[r("p",[t._v("规范: 即本文的主体 前端协作规范 。有规范可循，可以让成员以较快的速度入手开发、同时也减少培训成本投入。")])])]),t._v(" "),r("p",[t._v("培训手册将可以文档具象化的内容整理为文档，和上文说到的Code Review一样，一些东西无法通过文档来说明，所以我们一般会搭配一个‘培训导师’，在试用期间，一对一辅导。")]),t._v(" "),r("h2",{attrs:{id:"_11-2-营造技术氛围"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-营造技术氛围","aria-hidden":"true"}},[t._v("#")]),t._v(" 11.2 营造技术氛围")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("鼓励成员写技术博客，或者建立自己的团队专栏. 写一篇好的文章不容易")])]),t._v(" "),r("li",[r("p",[t._v("鼓励参与开源项目")])]),t._v(" "),r("li",[r("p",[t._v("建立面试题库 组织一起解一些面试题或算法题，加深对知识点的理解")])]),t._v(" "),r("li",[r("p",[t._v("定期的专题分享. 鼓励团队成员定期进行专题学习和研究，编写技术博客，并将学习的成果分享给其他成员. 这是一种抱团取暖的学习方式，旨在帮助团队成员一起学习和成长。")])])]),t._v(" "),r("p",[t._v("比如开发老手可以分享自己的经验，研究更深层次的技术；新手则可以研究某些开发技巧、新技术，例如CSS Grid，svg动画等等。推荐团队成员有个明确的研究领域，这样分工合作可以学习到更多东西.")]),t._v(" "),r("p",[t._v("专题怎么来?")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("专题请求. 可以请求其他成员完成专题，比如比较深的知识，可以要求团队比较有经验的进行学习分享")])]),t._v(" "),r("li",[r("p",[t._v("学习总结.")])]),t._v(" "),r("li",[r("p",[t._v("项目回顾")])]),t._v(" "),r("li",[r("p",[t._v("难点攻克")])]),t._v(" "),r("li",[r("p",[t._v("项目规范")])]),t._v(" "),r("li",[r("p",[t._v("工具使用")])]),t._v(" "),r("li",[r("p",[t._v("落实和完善开发规范. 规范本身就是团队知识沉淀的一种直接输出")])]),t._v(" "),r("li",[r("p",[t._v("图书分享. 和离散的文章或教程相比，图书的知识会比较系统，另外很多经典的图书是要静下来好好欣赏的。")])]),t._v(" "),r("li",[r("p",[t._v("鼓励重构和持续优化代码")])]),t._v(" "),r("li",[r("p",[t._v("抽象一套基础库或框架，减少重复工作, 提高工作效率. 不加班先从提高工作效率开始")])])])])},[],!1,null,null,null);e.default=n.exports}}]);