(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{141:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"react"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react","aria-hidden":"true"}},[t._v("#")]),t._v(" react")]),t._v(" "),s("h2",{attrs:{id:"介绍与发展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍与发展","aria-hidden":"true"}},[t._v("#")]),t._v(" 介绍与发展")]),t._v(" "),s("ul",[s("li",[t._v("react是Feckbook开发的一款用来构建用户见面的js库，他只是做一个views，专门是用来用户界面的库,所以react本身只涉及UI层，。")]),t._v(" "),s("li",[t._v("Virtual DOM 是一个模拟DOM树的Javascript对象。React使用 Virtual DOM来渲染UI，同时监听Virtual DOM上的数据变化并自动前一这些变化到UI上")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("传入属性 构建Virtual DOM，状态对应一个内容。")])]),t._v(" "),s("li",[s("p",[t._v("JSX 是React定义的一种Javascript语法扩展，类似与XML。JSX是可选的，我们完全可以使用Javascript来编写React应用，不过JSX提供了一套更为简单的方式；来写react的应用。")])])]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react发展.png"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react%E5%8F%91%E5%B1%95.png",alt:""}})])]),t._v(" "),s("p",[t._v("19年已经更新到了16.8的版本")]),t._v(" "),s("h2",{attrs:{id:"react开发环境与ecmascript6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react开发环境与ecmascript6","aria-hidden":"true"}},[t._v("#")]),t._v(" React开发环境与EcmaScript6")]),t._v(" "),s("h2",{attrs:{id:"jsx使用与介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jsx使用与介绍","aria-hidden":"true"}},[t._v("#")]),t._v(" JSX使用与介绍")]),t._v(" "),s("h3",{attrs:{id:"优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点","aria-hidden":"true"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),s("ul",[s("li",[t._v("JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。")]),t._v(" "),s("li",[t._v("它是类型安全的，在编译过程中就能发现错误。")]),t._v(" "),s("li",[t._v("使用 JSX 编写模板更加简单快速。")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const element = <h1>Hello, world!</h1>;\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("这种看起来可能有些奇怪的标签语法既不是字符串也不是 "),s("code",[t._v("HTML")]),t._v("。")]),t._v(" "),s("p",[t._v("它被称为 "),s("code",[t._v("JSX，")]),t._v(" 一种 "),s("code",[t._v("JavaScript")]),t._v(" 的语法扩展。 我们推荐在 "),s("code",[t._v("React")]),t._v(" 中使用 "),s("code",[t._v("JSX")]),t._v(" 来描述用户界面。")]),t._v(" "),s("p",[s("code",[t._v("JSX")]),t._v(" 是在 "),s("code",[t._v("JavaScript")]),t._v(" 内部实现的。")]),t._v(" "),s("p",[t._v("我们知道元素是构成 "),s("code",[t._v("React")]),t._v(" 应用的最小单位，"),s("code",[t._v("JSX")]),t._v(" 就是用来声明 "),s("code",[t._v("React")]),t._v(" 当中的元素。")]),t._v(" "),s("p",[t._v("与浏览器的 "),s("code",[t._v("DOM")]),t._v(" 元素不同，"),s("code",[t._v("React")]),t._v(" 当中的元素事实上是普通的对象，"),s("code",[t._v("React DOM")]),t._v(" 可以确保 浏览器 "),s("code",[t._v("DOM")]),t._v(" 的数据内容与 "),s("code",[t._v("React")]),t._v(" 元素保持一致。")]),t._v(" "),s("p",[t._v("要将 "),s("code",[t._v("React")]),t._v(" 元素渲染到根 "),s("code",[t._v("DOM")]),t._v(" 节点中，我们通过把它们都传递给 "),s("code",[t._v("ReactDOM.render()")]),t._v(" 的方法来将其渲染到页面上：")]),t._v(" "),s("blockquote",[s("p",[t._v("ES5写法\n"),s("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactes5.png"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactes5.png",alt:""}})])])]),t._v(" "),s("blockquote",[s("p",[t._v("ES6写法\n"),s("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactes6.png"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactes6.png",alt:""}})])])]),t._v(" "),s("blockquote",[s("p",[t._v("react组件怎么用呢\n"),s("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react组件怎么用呢.png"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react%E7%BB%84%E4%BB%B6%E6%80%8E%E4%B9%88%E7%94%A8%E5%91%A2.png",alt:""}})])])]),t._v(" "),s("blockquote",[s("p",[t._v("Dom diff")])]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactdomdiff.png"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactdomdiff.png",alt:""}})])]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactdomdiff例子1.png"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactdomdiff%E4%BE%8B%E5%AD%901.png",alt:""}})])]),t._v(" "),s("p",[t._v("Dom diff是为渲染的性能，最小化的一个渲染机制")]),t._v(" "),s("blockquote",[s("p",[t._v("JSX注意事项\n"),s("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/JSX注意事项.png"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/JSX%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.png",alt:""}})])])]),t._v(" "),s("h2",{attrs:{id:"非dom属性介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非dom属性介绍","aria-hidden":"true"}},[t._v("#")]),t._v(" 非Dom属性介绍")]),t._v(" "),s("p",[t._v("ref与key")]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/非Dom属性介绍.png"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/%E9%9D%9EDom%E5%B1%9E%E6%80%A7%E4%BB%8B%E7%BB%8D.png",alt:""}})])]),t._v(" "),s("h2",{attrs:{id:"webapp缺点与优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webapp缺点与优点","aria-hidden":"true"}},[t._v("#")]),t._v(" webApp缺点与优点")]),t._v(" "),s("p",[t._v("缺点：")]),t._v(" "),s("ul",[s("li",[t._v("1.Web基于DOM，而DOM很慢")]),t._v(" "),s("li",[t._v("2.DOM拖慢JavaScript。")]),t._v(" "),s("li",[t._v("3。网页是单线程的")]),t._v(" "),s("li",[t._v("网页没有硬件加速")])]),t._v(" "),s("p",[t._v("优点：")]),t._v(" "),s("ul",[s("li",[t._v("1.跨平台：所有系统都能使用")]),t._v(" "),s("li",[t._v("2.免安装：打开浏览器就能使用")]),t._v(" "),s("li",[t._v("3.快速部署：升级只需在服务器更新代码")]),t._v(" "),s("li",[t._v("4.超链接：可以与其他网站互联，可以被搜索引擎检索")])]),t._v(" "),s("p",[t._v("react-canvas这个包是基于canvas和react的把jsx语法化成canvas")]),t._v(" "),s("h2",{attrs:{id:"属性、状态的介绍与用法以及对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性、状态的介绍与用法以及对比","aria-hidden":"true"}},[t._v("#")]),t._v(" 属性、状态的介绍与用法以及对比")]),t._v(" "),s("blockquote",[s("p",[t._v("属性（props）的介绍与用法")])]),t._v(" "),s("p",[t._v("属性 是一个事物的性质与关系往往是与生俱来的，无法改变的")]),t._v(" "),s("p",[s("strong",[t._v("属性的用法")])]),t._v(" "),s("ul",[s("li",[t._v("可以传入变量、number、string、数组、等")]),t._v(" "),s("li",[t._v("数组形式用法（需要加key防止整体重新渲染）")])]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactprops用法.png"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactprops%E7%94%A8%E6%B3%95.png",alt:""}})])]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactprops数组用法.png"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactprops%E6%95%B0%E7%BB%84%E7%94%A8%E6%B3%95.png",alt:""}})])]),t._v(" "),s("p",[s("strong",[t._v("默认 Props")])]),t._v(" "),s("p",[t._v("通过组件类的 defaultProps 属性为 props 设置默认值，")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("//属性与状态\nclass HelloMessage extend React.Component{\n    render(){\n        retun <h1 onClick={this.handle} className=\"h1\">{this.props.name}</h1>\n        )\n    }\n}\nHelloMessage.defaultProps = {\n  name: 'Runoob'\n};\nReactDOM.reder(<HelloMessage name=\"吕鉴\" name:{吕鉴} name={123} name={this.data}/>,\ndocument.getElementById('exampdayle'))\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("blockquote",[s("p",[t._v("状态state")])]),t._v(" "),s("p",[t._v("React 把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。")]),t._v(" "),s("p",[t._v("React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。")]),t._v(" "),s("ul",[s("li",[t._v("事物所处的状态")]),t._v(" "),s("li",[t._v("状态是由事物自行处理的，不断变化的，")]),t._v(" "),s("li",[t._v("对于React来讲一切变化全部基于状态，")]),t._v(" "),s("li",[t._v("通过setState进行改变")]),t._v(" "),s("li",[t._v("每次执行"),s("code",[t._v("setState")]),t._v("时"),s("code",[t._v("render")]),t._v("进行"),s("code",[t._v("Dom diff")]),t._v("算法进行重新计算，发生变化后进行更新,")])]),t._v(" "),s("p",[t._v("缺点：即每次state改变都会进行重排")]),t._v(" "),s("p",[t._v("如何优化呢？")]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactstate.png"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/reactstate.png",alt:""}})])]),t._v(" "),s("blockquote",[s("p",[t._v("属性状态对比？")])]),t._v(" "),s("ul",[s("li",[t._v("都是纯js对象")]),t._v(" "),s("li",[t._v("都会触发render更新")]),t._v(" "),s("li",[t._v("props 是不可变的,如果需要改变就需要把state放到props上边，而 state 可以根据与用户交互来改变。")]),t._v(" "),s("li",[t._v("但是props只有一次触发render只传递一次 ，state一直在触发，即实时修改")]),t._v(" "),s("li",[t._v("都具有确定性")]),t._v(" "),s("li",[t._v("组件在运行时需要修改的数据就是状态")])]),t._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react属性与状态对比.png"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react%E5%B1%9E%E6%80%A7%E4%B8%8E%E7%8A%B6%E6%80%81%E5%AF%B9%E6%AF%94.png",alt:""}})])]),t._v(" "),s("p",[t._v("状态是自己的属性是组件之间的")]),t._v(" "),s("blockquote",[s("p",[t._v("单向数据流")])]),t._v(" "),s("p",[t._v("任何状态始终由某些特定组件所有，并且从该状态导出的任何数据或 UI 只能影响树中下方的组件。")]),t._v(" "),s("p",[t._v("如果你想象一个组件树作为属性的瀑布，每个组件的状态就像一个额外的水源，它连接在一个任意点，但也流下来。")]),t._v(" "),s("h2",{attrs:{id:"生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期","aria-hidden":"true"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),s("p",[s("strong",[t._v("React v16.3之前生命周期")]),t._v(" "),s("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react16.3之前生命周期.png"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react16.3%E4%B9%8B%E5%89%8D%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png",alt:""}})]),t._v(" "),s("strong",[t._v("React v16.3生命周期")]),t._v(" "),s("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react16.3生命周期.png"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react16.3%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png",alt:""}})])]),t._v(" "),s("p",[s("strong",[t._v("React v16.4生命周期")]),t._v(" "),s("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react16.4生命周期.png"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react16.4%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png",alt:""}})])]),t._v(" "),s("blockquote",[s("p",[t._v("生命周期介绍与初始化阶段\n组件本质上是状态机，输入确定，输出确定。状态发生转换时会触发不同的钩子函数，从而让开发者有机会做出响应。可以用事件的思路来理解状态。\n初始化-> 运行中-> 销毁\n"),s("a",{attrs:{"data-fancybox":"",title:"",href:"https://raw.githubusercontent.com/ColaStar/static/master/images/react初始化生命周期.png"}},[s("img",{attrs:{src:"https://raw.githubusercontent.com/ColaStar/static/master/images/react%E5%88%9D%E5%A7%8B%E5%8C%96%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png",alt:""}})]),t._v("\ngetDeaultProps\ngetInitalState\ncomponentWill\n运行中阶段\n运行中拿到上拿到下")])]),t._v(" "),s("p",[t._v("componentWillReceiveProps 在组件接收到一个新的 prop (更新后)时被调用。这个方法在初始化render时不会被调用。")]),t._v(" "),s("p",[t._v("shouldComponentUpdate 返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。\n可以在你确认不需要更新组件时使用。\n默认return true")]),t._v(" "),s("p",[t._v("componentWillUpdate在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。")]),t._v(" "),s("p",[t._v("render")]),t._v(" "),s("p",[t._v("componentDidUpdate 在组件完成更新后立即调用。在初始化时不会被调用。")]),t._v(" "),s("blockquote",[s("p",[t._v("销毁阶段")])]),t._v(" "),s("p",[t._v("componentDidUnmount")]),t._v(" "),s("h2",{attrs:{id:"组件介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件介绍","aria-hidden":"true"}},[t._v("#")]),t._v(" 组件介绍")]),t._v(" "),s("ul",[s("li",[t._v("普通组件component")]),t._v(" "),s("li",[t._v("纯组件PureComponent\n"),s("code",[t._v("PureComponent")]),t._v("的自动为我们添加的"),s("code",[t._v("shouldComponentUpate")]),t._v("函数")]),t._v(" "),s("li",[t._v("纯函数组件\n没有自身的状态，相同的props输入必然会获得完全相同的组件展示。不需要关心组件的一些生命周期函数和渲染的钩子更简洁。")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const Button = ({ day }) => {\n  return (\n    <div>\n      <button className=\"btn btn-warning\">我是 {day.name}</button>\n    </div>\n  );\n};\nconst message = {\n  name:'纯函数组件'\n}\nclass Greeting extends Component {\n  render() {\n    return <Button day={message}></Button>;\n  }\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("ul",[s("li",[t._v("高阶组件")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('//注值 localStorage.username = "老袁"\nconst wrapWithUsername = WrappedComponent => {\n  class NewComponent extends Component {\n    constructor() {\n      super();\n      this.state = {\n        username: ""\n      };\n    }\n    componentWillMount() {\n      let username = localStorage.getItem("username");\n      this.setState({\n        username: username\n      });\n    }\n\n    render() {\n      return <WrappedComponent username={this.state.username} />;\n    }\n  }\n\n  return NewComponent;\n};\nclass Welcome extends Component {\n  render() {\n    return <div className="text-warning">welcome {this.props.username}</div>;\n  }\n}\n//升级高阶组件\nWelcome = wrapWithUsername(Welcome);\n\nclass Goodbye extends Component {\n  render() {\n    return <div className="text-info">goodbye {this.props.username}</div>;\n  }\n}\n//升级高阶组件\nGoodbye = wrapWithUsername(Goodbye);\nclass Greeting extends Component {\n  render() {\n    return (\n      <>\n        <Welcome /> <Goodbye />\n      </>\n    );\n  }\n}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br"),s("span",{staticClass:"line-number"},[t._v("40")]),s("br"),s("span",{staticClass:"line-number"},[t._v("41")]),s("br"),s("span",{staticClass:"line-number"},[t._v("42")]),s("br"),s("span",{staticClass:"line-number"},[t._v("43")]),s("br"),s("span",{staticClass:"line-number"},[t._v("44")]),s("br"),s("span",{staticClass:"line-number"},[t._v("45")]),s("br"),s("span",{staticClass:"line-number"},[t._v("46")]),s("br"),s("span",{staticClass:"line-number"},[t._v("47")]),s("br")])]),s("ul",[s("li",[t._v("组件插槽\n提供了一个顶级的方法，使得我们有能力把一个子组件渲染到父组件 DOM 层级以外的 DOM 节点上。")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('//组件插槽\nconst portalElm = document.createElement(\'div\');\nportalElm.className="txtcenter"\ndocument.body.appendChild(portalElm)\n\nclass App extends React.Component {\n  state = {\n    show: true,\n  }\n\n  handleClick = () => {\n    this.setState({\n      show: !this.state.show,\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <button className="btn btn-primary" onClick={this.handleClick}>动态展现Portal组件</button>\n        {this.state.show ? (\n          <div>{ReactDOM.createPortal(<span>Portal组件</span>, portalElm)}</div>\n        ) : null}\n      </div>\n    )\n  }\n}\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br")])]),s("p",[t._v("React可控与不可控控件")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("//不可控控件\n<input defaultvalue={'aaa'}/>\n通过refs或者findDOMNode去获取值\n//可控空间\n<input value={this.state.name}/>\n直接取this.state获取\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("可控控件的好处")]),t._v(" "),s("ul",[s("li",[t._v("符合react的数据流")]),t._v(" "),s("li",[t._v("数据存储在state中便于取用")]),t._v(" "),s("li",[t._v("便于对数据进行处理")])]),t._v(" "),s("p",[t._v("React不同表单元素的使用\nlabel  HtmlFor")]),t._v(" "),s("p",[t._v("事件处理函数以及this\n驼峰\nthis处理使用bind或箭头函数")]),t._v(" "),s("h2",{attrs:{id:"react性能调优"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react性能调优","aria-hidden":"true"}},[t._v("#")]),t._v(" react性能调优")]),t._v(" "),s("p",[t._v("循环渲染的组件，你改变一个组件所有的组件都跟着重新渲染，\n解决方法")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("1.可以通过"),s("code",[t._v("shouldComponentUpdate")]),t._v("去判断上一个与现在这个状态判断解决，")])]),t._v(" "),s("li",[s("p",[t._v("2.通过插件解决："),s("code",[t._v("mixins：[React.addons.PureRenderMixin]")])])])]),t._v(" "),s("p",[t._v("当对象里边套对象，这俩个东西就都挂了。")]),t._v(" "),s("p",[t._v("终极解决方法：")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("constructor")]),t._v("做一些操作")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("constructor(props){\n     super(props);\n     this.shouldComponentUpdate = React.addons.PureRenderMixin.shouldComponentUpdate.bind(this);\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("子组件更新触发父组件。父组件更新所有的子组件要Diff，一旦更改了state类型，上边全部办法歇菜，相当于直接生成一颗新的树🌲可以使用IMMUTABLE库")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("IMMUTABLE库  不可变对象\n"),s("img",{attrs:{src:"immuable1.png",alt:""}}),t._v("\n通过fromjs方法包一下目标对象，后边用一个get和set方法去更改对象。\n"),s("img",{attrs:{src:"immuable.png",alt:""}}),t._v("\n从上图可以看出immuable库相当于生成俩个不一样的对象，不是在引用传递，相当于生成一个对象，深拷贝过了。\n"),s("img",{attrs:{src:"immuable%E4%BD%BF%E7%94%A8.png",alt:"使用"}})])]),t._v(" "),s("li",[s("p",[t._v("react")])])]),t._v(" "),s("p",[t._v("React 16.8的新特性")]),t._v(" "),s("p",[t._v("函数式组件与hooks")]),t._v(" "),s("p",[t._v("函数式组件其实就是对函数式编程的践行。")]),t._v(" "),s("p",[t._v("不可变对象imm")])])},[],!1,null,null,null);a.default=n.exports}}]);