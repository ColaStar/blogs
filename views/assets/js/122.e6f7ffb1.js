(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{467:function(e,n,s){"use strict";s.r(n);var a=s(42),t=Object(a.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"nodemon-基本配置与使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nodemon-基本配置与使用","aria-hidden":"true"}},[e._v("#")]),e._v(" nodemon 基本配置与使用")]),e._v(" "),s("p",[e._v("在开发环境下，往往需要一个工具来自动重启项目工程，之前接触过 python 的 supervisor，现在写 node 的时候发现 supervisior 在很多地方都有他的身影，node 也有一个 npm 模块 "),s("a",{attrs:{href:"https://github.com/petruisfan/node-supervisor",target:"_blank",rel:"noopener noreferrer"}},[e._v("supervisior"),s("OutboundLink")],1),e._v(" 也是用来监控进程的，不过除了 supervisior 外，还有很多其他的工具，从 github 的评分上看，比较热门的有 forever，nodemon，node-dev，具体这些工具的区别可以参考这篇文章  "),s("a",{attrs:{href:"https://strongloop.com/strongblog/comparison-tools-to-automate-restarting-node-js-server-after-code-changes-forever-nodemon-nodesupervisor-nodedev/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Comparison: Tools to Automate Restarting Node.js Server After Code Changes0"),s("OutboundLink")],1),e._v(" ，个人觉得在开发环境还是用 nodemon，因为配置比较方便，文档也很清晰。所以这里先主要讲 nodemon。")]),e._v(" "),s("h2",{attrs:{id:"nodemon-的安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nodemon-的安装","aria-hidden":"true"}},[e._v("#")]),e._v(" nodemon 的安装：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install -g nodemon\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h2",{attrs:{id:"启动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动","aria-hidden":"true"}},[e._v("#")]),e._v(" 启动")]),e._v(" "),s("p",[e._v("安装完 nodemon 后，就可以用 nodemon 来代替 node 来启动应用：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("nodemon [your node app]（相当于 node [your node app]）\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("如果没有在应用中指定端口，可以在命令中指定：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("nodemon ./server.js localhost 8080\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("可以运行 "),s("code",[e._v("debug")]),e._v(" 模式：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("nodemon --debug ./server.js 80\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("查看帮助，帮助里面有很多选项都是一目了然：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("nodemon -h 或者 nodemon -help\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("nodemon 比较流行的原因之一就是它的"),s("code",[e._v("可配置性比较高")]),e._v("，下面是官网给出的配置文件 "),s("code",[e._v("nodemon.json")]),e._v("  的例子，加上我自己了解到的有用的一些配置，开发环境建议可以把每个参数都写上备用，生产环境就把没有必要的参数去掉，有些字段是可以在命令行模式以参数形式给出的，可以通过 -h 查看，下面逐个解释：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('  {\n      "restartable": "rs",\n      "ignore": [\n          ".git",\n          "node_modules/**/node_modules"\n      ],\n      "verbose": true,\n      "execMap": {\n          "": "node"\n         "js": "node --harmony"\n     },\n     "events": {\n         "restart": "osascript -e \'display notification \\"App restarted due to:\\n\'$FILENAME\'\\" with title \\"nodemon\\"\'"\n     },\n     "watch": [\n         "test/fixtures/",\n         "test/samples/"\n     ],\n     "env": {\n         "NODE_ENV": "development",\n         "PORT": "3000"\n     },\n     "ext": "js json",\n     "legacy-watch": false\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br")])]),s("h2",{attrs:{id:"重启"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重启","aria-hidden":"true"}},[e._v("#")]),e._v(" 重启")]),e._v(" "),s("p",[s("code",[e._v("restartable")]),e._v("：重启的命令，默认是 rs ，可以改成你自己喜欢的字符串。当用 nodemon 启动应用时，可以直接键入 rs 直接重启服务。除了字符串值外，还可以设置 false 值，这个值的意思是当 nodemon 影响了你自己的终端命令时，设置为 false 则不会在 nodemon 运行期间监听 rs 的重启命令。")]),e._v(" "),s("h2",{attrs:{id:"忽略文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#忽略文件","aria-hidden":"true"}},[e._v("#")]),e._v(" 忽略文件")]),e._v(" "),s("p",[s("code",[e._v("ignore")]),e._v('：忽略的文件后缀名或者文件夹，文件路径的书写用相对于 nodemon.json 所在位置的相对路径，下同。nodemon 会默认忽略一些文件，默认忽略的文件有：.git, node_modules, bower_components, .sass-cache，如果这些文件想要加入监控，需要重写默认忽略参数字段 ignoreRoot，比如加入："ignoreRoot": [".git", "bower_components", ".sass-cache"]，然后在 watch 中将 node_modules 文件路径加入监控，那么 node_modules 内的文件也加入了监控了。')]),e._v(" "),s("p",[s("code",[e._v("verbose：true")]),e._v(" 表示输出详细启动与重启信息，如下图：")]),e._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"",href:"http://img2.tuicool.com/fERfuu.png!web"}},[s("img",{attrs:{src:"http://img2.tuicool.com/fERfuu.png!web",alt:""}})])]),e._v(" "),s("p",[s("code",[e._v("false")]),e._v(" 表示不输出这些运行信息，如下图：")]),e._v(" "),s("p",[s("a",{attrs:{"data-fancybox":"",title:"",href:"http://img1.tuicool.com/uEJJZfv.png!web"}},[s("img",{attrs:{src:"http://img1.tuicool.com/uEJJZfv.png!web",alt:""}})])]),e._v(" "),s("p",[s("code",[e._v("execMap")]),e._v('：运行服务的后缀名和对应的运行命令，"js": "node --harmony" 表示用 nodemon 代替 node  --harmony 运行 js 后缀文件；"" 指 www 这些没有后缀名的文件；默认的 defaults.js 配置文件会识别一些文件：py: \'python\',rb: \'ruby\'。')]),e._v(" "),s("p",[s("code",[e._v("events")]),e._v("：这个字段表示 nodemon 运行到某些状态时的一些触发事件，总共有五个状态：")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("start - 子进程（即监控的应用）启动")])]),e._v(" "),s("li",[s("p",[e._v("crash - 子进程崩溃，不会触发 exit")])]),e._v(" "),s("li",[s("p",[e._v("exit - 子进程完全退出，不是非正常的崩溃")])]),e._v(" "),s("li",[s("p",[e._v("restart - 子进程重启")])]),e._v(" "),s("li",[s("p",[e._v("config:update - nodemon 的 config 文件改变")])])]),e._v(" "),s("p",[e._v('状态后面可以带标准输入输出语句，比如 mac 系统下设置： "start": "echo \'app start\'"，那么启动应用时会输出 app start 信息，其他类似命令如 ls，ps 等等标准命令都可以在这里定义。除此之外，也可以写js来监控，')]),e._v(" "),s("p",[s("code",[e._v("watch")]),e._v("：监控的文件夹路径或者文件路径。")]),e._v(" "),s("p",[s("code",[e._v("env")]),e._v("：运行环境 development 是开发环境，production 是生产环境。port 是端口号。")]),e._v(" "),s("p",[s("code",[e._v("ext")]),e._v("：监控指定后缀名的文件，用空格间隔。默认监控的后缀文件：.js, .coffee, .litcoffee, .json。但是对于没有文件后缀的文件，比如 www 文件，我暂时找不到怎么用 nodemon 去监控，就算在 watch 中包含了，nodemon 也会忽略掉。")]),e._v(" "),s("p",[s("strong",[e._v("注")]),e._v("：关于监控以及忽略文件修改有个顺序的问题，或者说优先级，首先 nodemon 会先读取 watch 里面需要监控的文件或文件路径，再从文件中选择监控 ext 中指定的后缀名，最后去掉从 ignore 中指定的忽略文件或文件路径。")]),e._v(" "),s("p",[s("code",[e._v("legacy-watch")]),e._v("：nodemon 使用  Chokidar 作为底层监控系统，但是如果监控失效，或者提示没有需要监控的文件时，就需要使用轮询模式（polling mode），即设置 legacy-watch 为 true，也可以在命令行中指定：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ nodemon --legacy-watch \n$ nodemon -L # 简写\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[s("span",[s("span",{staticStyle:{"font-family":"verdana, Arial, Helvetica, sans-serif","line-height":"1.5"}},[e._v("下面贴出 nodemon 的默认配置文件 ")]),s("a",{staticStyle:{"font-family":"verdana, Arial, Helvetica, sans-serif","line-height":"1.5"},attrs:{href:"https://github.com/remy/nodemon/blob/master/lib/config/defaults.js"}},[e._v("default.js")]),s("span",{staticStyle:{"font-family":"verdana, Arial, Helvetica, sans-serif","line-height":"1.5"}},[e._v("：")])])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("  // default options for config.options\n  module.exports = {\n      restartable: 'rs',\n      colours: true,\n      execMap: {\n          py: 'python',\n          rb: 'ruby',\n          // more can be added here such as ls: lsc - but please ensure it's cross\n          // compatible with linux, mac and windows, or make the default.js\n         // dynamically append the `.cmd` for node based utilities\n     },\n     ignoreRoot: ['.git', 'node_modules', 'bower_components', '.sass-cache'],\n     watch: ['*.*'],\n     stdin: true,\n    runOnChangeOnly: false,\n     verbose: false,\n     // 'stdout' refers to the default behaviour of a required nodemon's child,\n     // but also includes stderr. If this is false, data is still dispatched via\n     // nodemon.on('stdout/stderr')\n     stdout: true,\n};\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br")])]),s("p",[e._v("有几个比较少用到的配置字段：")]),e._v(" "),s("p",[e._v("1） "),s("code",[e._v("colous")]),e._v(" ：输出信息颜色标示。")]),e._v(" "),s("p",[e._v("2） "),s("code",[e._v("runOnChangeOnly")]),e._v(" ：true 时运行 nodemon www 项目不会启动，只保持对文件的监控，当监控的文件有修改并保存时才会启动应用，其他没有影响。默认是 false 即一开始就启动应用并监控文件改动。")]),e._v(" "),s("p",[e._v("3）"),s("code",[e._v("stdin，stdout")]),e._v("：这个是关于"),s("code",[e._v("标准输入输出的设置")]),e._v("，上文提到 nodemon.json 文件中的 events 字段可以为状态设置标准输入输出语句，如果这里设置了 false，标准输入输入语句就会实效。")]),e._v(" "),s("p",[e._v("一些比较常见的列举如下：")]),e._v(" "),s("ul",[s("li",[e._v("1）当自己的应用启动服务带的参数和 nodemon 冲突时，可以利用下面的方法来解决冲突：")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("$ nodemon app.js -- -L -opt2 -opt3\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("以 -- 为分隔，nodemon 不会去读取 -- 后面的参数，而是传给 app.js。")]),e._v(" "),s("ul",[s("li",[e._v("2）当应用因为某些原因奔溃时，nodemon 不会自动重启，会输出以下信息：")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("[nodemon] app crashed - waiting for file changes before starting...\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这个时需要修改文件并保存后 nodemon 才会重启应用，这在开发环境没什么关系，但是如果想把 nodemon 放在线上时，我们往往希望 nodemon 能够自动重启崩溃的应用，这个时候就需要 forever 来辅助了，有一个  issue 专门讲这个问题。使用 forever 来重启 nodemon 时，在 nodemon 启动时需要加个参数 --exitcrash：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("nodemon www --exitcrash\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("这样当应用崩溃后，nodemon 会自动中断退出，forever 检测到 nodemon 退出后就会重启 nodemon，nodemon 又会重启应用。其他就是 forever 的配置了，因为这里只讲 nodemon，所以就不涉及 forever，到时候总结 forever 的时候再讲，感兴趣的看 这里 。")]),e._v(" "),s("ul",[s("li",[e._v("3）如果想通过 npm start 命令来启动应用同时又想用 nodemon 来监控文件改动，可以修改 npm 的 package.js 文件中的 scripts.start：")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v(' "scripts": {\n     "start": "nodemon ./bin/www"\n }\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("p",[e._v("那么用 npm start 启动后就是执行 nodemon ./bin/www。")]),e._v(" "),s("p",[s("strong",[e._v("参考文档：")])]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/remy/nodemon",target:"_blank",rel:"noopener noreferrer"}},[e._v("git-nodemon"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://archive.codeplex.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("codeplex-nodemon"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://www.npmjs.com/package/nodemon",target:"_blank",rel:"noopener noreferrer"}},[e._v("npm-nodemon"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=t.exports}}]);