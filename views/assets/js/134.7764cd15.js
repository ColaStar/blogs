(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{140:function(n,e,t){"use strict";t.r(e);var r=t(0),a=Object(r.a)({},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"面试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面试","aria-hidden":"true"}},[n._v("#")]),n._v(" 面试")]),n._v(" "),t("h2",{attrs:{id:"手写new"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#手写new","aria-hidden":"true"}},[n._v("#")]),n._v(" 手写new")]),n._v(" "),t("p",[t("code",[n._v("` function new (fun){ if(typeof fun !== 'function'){ throw Error(` $ {fun} is not a function ` ) } var obj = {} obj.__proto__ = fun.prototype; var result = fun.apply(obj,Array.prototype.slice(arguments,1)) return result } `")])]),n._v(" "),t("h2",{attrs:{id:"手写json-stringify-boolean-number-string-类型会自动转换成对应的原始值。-undefined、任意函数以及symbol，会被忽略（出现在非数组对象的属性值中时），或者被转换成-null（出现在数组中时）。-不可枚举的属性会被忽略-如果一个对象的属性值通过某种间接的方式指回该对象本身，即循环引用，属性也会被忽略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#手写json-stringify-boolean-number-string-类型会自动转换成对应的原始值。-undefined、任意函数以及symbol，会被忽略（出现在非数组对象的属性值中时），或者被转换成-null（出现在数组中时）。-不可枚举的属性会被忽略-如果一个对象的属性值通过某种间接的方式指回该对象本身，即循环引用，属性也会被忽略","aria-hidden":"true"}},[n._v("#")]),n._v(" 手写JSON.stringify - Boolean | Number | String 类型会自动转换成对应的原始值。 - undefined、任意函数以及symbol，会被忽略（出现在非数组对象的属性值中时），或者被转换成 null（出现在数组中时）。 - 不可枚举的属性会被忽略 - 如果一个对象的属性值通过某种间接的方式指回该对象本身，即循环引用，属性也会被忽略")]),n._v(" "),t("p",[t("code",[n._v('` function stringify(obj){ let type = typeof obj; if (type !== "object") { if (/string|undefined|function/.test(type)) { obj = \'"\' + obj + \'"\'; } return String(obj); } else { let json = [] let arr = Array.isArray(obj) for (let k in obj) { let v = obj[k]; let type = typeof v; if (/string|undefined|function/.test(type)) { v = \'"\' + v + \'"\'; } else if (type === "object") { v = jsonStringify(v); } json.push((arr ? "" : \'"\' + k + \'":\') + String(v)); } return (arr ? "[" : "{") + String(json) + (arr ? "]" : "}") } } `')])]),n._v(" "),t("h2",{attrs:{id:"手写json-parse-最简单的肯定是直接eval了，但是eval-是一个危险的函数，-他执行的代码拥有着执行者的权利。如果你用-eval-运行的字符串代码被恶意方（不怀好意的人）操控修改，您最终可能会在您的网页-扩展程序的权限下，在用户计算机上运行恶意代码。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#手写json-parse-最简单的肯定是直接eval了，但是eval-是一个危险的函数，-他执行的代码拥有着执行者的权利。如果你用-eval-运行的字符串代码被恶意方（不怀好意的人）操控修改，您最终可能会在您的网页-扩展程序的权限下，在用户计算机上运行恶意代码。","aria-hidden":"true"}},[n._v("#")]),n._v(" 手写JSON.parse - 最简单的肯定是直接eval了，但是eval()是一个危险的函数， 他执行的代码拥有着执行者的权利。如果你用 eval()运行的字符串代码被恶意方（不怀好意的人）操控修改，您最终可能会在您的网页 / 扩展程序的权限下，在用户计算机上运行恶意代码。")]),n._v(" "),t("p",[n._v("即会有XSS 漏洞。触发条件：参数 json 并非真正的 JSON 数据，而是可执行的 JS 代码。\n"),t("code",[n._v("` function jsonParse(opt) { return eval('(' + opt + ')'); } `")])]),n._v(" "),t("p",[n._v("所以对参数 json 做校验，只有真正符合 JSON 格式，才能调用 eval，具体就是下面这几个正则匹配。\n`` `\nvar rx_one = /^[],:{}\\s]"),t("em",[n._v('$/;\nvar rx_two = /\\(?:["\\/bfnrt]|u[0-9a-fA-F]{4})/g;\nvar rx_three = /"[^"\\\\n\\r]')]),n._v('"|true|false|null|-?\\d+(?:.\\d*)?(?:[eE][+-]?\\d+)?/g;\nvar rx_four = /(?:^|:|,)(?:\\s*[)+/g;')]),n._v(" "),t("p",[n._v('if (\nrx_one.test(\njson\n.replace(rx_two, "@")\n.replace(rx_three, "]")\n.replace(rx_four, "")\n)\n) {\nvar obj = eval("(" +json + ")");\n}\n` ``')]),n._v(" "),t("h2",{attrs:{id:"手写一个call或-apply-call"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#手写一个call或-apply-call","aria-hidden":"true"}},[n._v("#")]),n._v(" 手写一个call或 apply - call")]),n._v(" "),t("p",[n._v("a.call(obj, '1')")]),n._v(" "),t("p",[t("code",[n._v("` Function.prototype.call = function(context){ if(typeof this !== 'function'){ Throw new Error('this is not a function') } context = context | window context.fn = this; var argus = [...arguments].slice(1) var result = context.fn(...argus) delete context.fn return result } `")]),n._v(" - apply")]),n._v(" "),t("p",[t("code",[n._v("` Function.prototype.apply = function(context,arr){ if(typeof this !== 'function'){ Throw new Error('this is not a function') } context = context | window context.fn = this; if(arr){ var result = context.fn(arr) }else{ var result = context.fn(arr) } delete context.fn; return result; } `")])]),n._v(" "),t("h2",{attrs:{id:"手写一个function-bind"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#手写一个function-bind","aria-hidden":"true"}},[n._v("#")]),n._v(" 手写一个Function.bind")]),n._v(" "),t("p",[n._v("var b = a.bind(obj, 1)\nb(2)\n"),t("code",[n._v("` Function.prototype.bind(context){ if(typeof this !== 'function'){ Throw new Error('Function.prototype.bind - what is trying to be bound is not callable') } var _self = this; var augus = Array.prototype.slice.call(arguments,1); var trFn = function(){} var returnFn = function(){ var bindArgus = Array.prototype.slice.call(arguments); return _self.apply(this in trFn ? this : context,argus.concat(bindArgus)) } trFn.prototype = this.prototype; returnFn.prototype = new trFn() return returnFn; } `")])]),n._v(" "),t("pre",[t("code",[n._v("## 手写一个继承\n寄生组合式继承\n\n一般只建议写这种，因为其它方式的继承会在一次实例中调用两次父类的构造函数或有其它缺点。\n\n核心实现是：用一个 F 空的构造函数去取代执行了 Parent 这个构造函数。\n\n`` `\n")])]),n._v(" "),t("p",[n._v("function Parent(name) {\nthis.name = name;\n}\nParent.prototype.sayName = function() {\nconsole.log('parent name:', this.name);\n}\nfunction Child(name, parentName) {\nParent.call(this, parentName);"),t("br"),n._v("\nthis.name = name;"),t("br"),n._v("\n}\nfunction create(proto) {\nfunction F(){}\nF.prototype = proto;\nreturn new F();\n}\nChild.prototype = create(Parent.prototype);\nChild.prototype.sayName = function() {\nconsole.log('child name:', this.name);\n}\nChild.prototype.constructor = Child;")]),n._v(" "),t("p",[n._v("var parent = new Parent('father');\nparent.sayName();    // parent name: father")]),n._v(" "),t("p",[n._v("var child = new Child('son', 'father');")]),n._v(" "),t("p",[n._v("//牛逼的继承")]),n._v(" "),t("p",[n._v("function Rectangle(length,width){\nthis.l = length\nthis.w = width\n}\nRectangle.protoType.getArea = function(){\nreturn this.l + this.w\n}\nfunction Square(length){\nRectangle.call(this.length,length)\n}\nSquare.protoType = Object.create(Rectangle.prototype,{\nconstructor:{\nvalue:Square\n}\n})\nvar square = new Square(3);\nconsole.log(square.getArea())\nconsole.log(square instanceof Square)\nconsole.log(square instanceof Rectangle)\n` ``")]),n._v(" "),t("pre",[t("code",[n._v("## 手写一个JS函数柯里化和反柯里化\n\n`` `\n")])]),n._v(" "),t("p",[n._v("function curry(fn,args){\nvar length = fn.length;\nvar args = args || [];\nreturn function(){\nnewArgs = args.concat(Array.prototype.slice.call(arguments));\nif (newArgs.length < length) {\nreturn curry.call(this,fn,newArgs);\n}else{\nreturn fn.apply(this,newArgs);\n}\n}\n}")]),n._v(" "),t("p",[n._v("function multiFn(a, b, c) {\nreturn a * b * c;\n}")]),n._v(" "),t("p",[n._v("var multi = curry(multiFn);")]),n._v(" "),t("p",[n._v("multi(2)(3)(4);\nmulti(2,3,4);\nmulti(2)(3,4);\nmulti(2,3)(4);")]),n._v(" "),t("p",[n._v("//ES6")]),n._v(" "),t("p",[n._v("const curry = (fn, arr = []) => (...args) => (\narg => arg.length === fn.length\n? fn(...arg)\n: curry(fn, arg)\n)([...arr, ...args])")]),n._v(" "),t("p",[n._v("let curryTest=curry((a,b,c,d)=>a+b+c+d)\ncurryTest(1,2,3)(4) //返回10\ncurryTest(1,2)(4)(3) //返回10\ncurryTest(1,2)(3,4) //返回10")]),n._v(" "),t("p",[n._v("` ``")]),n._v(" "),t("pre",[t("code",[n._v("## 手写一个Promise\n\n`` `\n")])]),n._v(" "),t("p",[n._v("function Promise(executor) {\nlet that = this;\nthat.status = 'pending';\nthat.value = null;\nthat.reason = null;\nthat.onFilFulledCallbacks = [];\nthat.onRejectedCallbacks = [];")]),n._v(" "),t("pre",[t("code",[n._v("function resolve(value) {\n    if (that.status === 'pending') {\n        that.status = 'resolved';\n        that.value = value;\n        that.onFilFulledCallbacks.forEach((fn) = & gt; {\n            fn();\n        });\n    }\n}\n\nfunction reject(reason) {\n    if (that.status === 'pending') {\n        that.status = 'rejected';\n        that.reason = reason;\n        that.onRejectedCallbacks.forEach((fn) = & gt; {\n            fn();\n        });\n    }\n}\nexecutor(resolve, reject);\n")])]),n._v(" "),t("p",[n._v("}")]),n._v(" "),t("p",[n._v("Promise.prototype.then = function (onFilfulled, onRejected) {\nlet that = this;\n/** 1 让promise2等于一个新的Promise 并将promise2返回 "),t("em",[n._v("/\nlet promise2 = new Promise((resolve, reject) = & gt; {\nif (that.status === 'resolved') {\n/")]),n._v("* 2 因为返回了promise2\n*  并且第3步resolvePromiseRelation函数中传递了promise2\n*  而目前promise2并没有拿到\n*  所以加一个定时器 异步执行 等到promise2拿到后\n*  再去执行 resolvePromiseRelation()方法 并将promise2传递进去*/\nsetTimeout(() = & gt; {\ntry {\nlet promise3 = onFilfulled(that.value);\n/** 3 判断新返回值是什么类型的函数\n*  并将当前的promise：promise2  新的返回值：promise3\n*  和 成功时回调：esolve  失败时回调：reject 作为参数传进去 "),t("em",[n._v("/\nresolvePromiseRelation(promise2, promise3, resolve, reject);\n} catch (e) {\nreject(e);\n}\n}, 0);\n}\nif (that.status === 'rejected') {\n/")]),n._v("* 同2 "),t("em",[n._v("/\nsetTimeout(() = & gt; {\ntry {\nlet promise3 = onRejected(that.reason);\n/")]),n._v("* 同3*/\nresolvePromiseRelation(promise2, promise3, resolve, reject);\n} catch (e) {\nreject(e);\n}\n}, 0);\n}\nif (that.status === 'pending') {\nthat.onFilFulledCallbacks.push(function () {\n/** 同2 "),t("em",[n._v("/\nsetTimeout(() = & gt; {\ntry {\nlet promise3 = onFilfulled(that.value);\n/")]),n._v("* 同3*/\nresolvePromiseRelation(promise2, promise3, resolve, reject);\n} catch (e) {\nreject(e);\n}\n}, 0);\n});\n}\nif (that.status === 'pending') {\nthat.onRejectedCallbacks.push(function () {\n/** 同2 "),t("em",[n._v("/\nsetTimeout(() = & gt; {\ntry {\nlet promise3 = onRejected(that.reason);\n/")]),n._v("* 同3*/\nresolvePromiseRelation(promise2, promise3, resolve, reject);\n} catch (e) {\nreject(e);\n}\n}, 0);\n});\n}\n});\n/** 同1 */\nreturn promise2;\n}")]),n._v(" "),t("p",[n._v("function resolvePromiseRelation(promise2, promise3, resolve, reject) {\n/** 4 防止自己等待自己 一直循环等待 "),t("em",[n._v("/\nif (promise2 === promise3) {\nreturn reject(new TypeError('循环引用了!'));\n}\n/")]),n._v("*  8 一个标示 表示当前没有被调用过\n*   确保resolve或者reject后的状态不会再次发生变更\n"),t("em",[n._v("/\nlet called;\n/")]),n._v("* 5 保证promise3是一个引用类型\n*  判断新返回值promise3的类型\n*  如果是普通值常量 就直接resolve导出 "),t("em",[n._v("/\nif (promise3 !== null & amp; & amp;\n(typeof promise3 === 'object' || typeof promise3 === 'function')) {\ntry {\nlet then = promise3.then;\n/")]),n._v("* 6 确保promise3是一个Promise\n*  判断promise3的then方法\n*  如果存在 并且是一个function类型\n*  就表示promise3是一个Promise "),t("em",[n._v("/\nif (typeof then === 'function') {\n/")]),n._v("* 9 执行promise3的then方法\n*  因为promise3也是一个Promise\n*  需要再次解析promise3的then方法\n*  直到解析到最后的返回值不是一个Promise类型为止\n"),t("em",[n._v("/\nthen(promise3, (promise4) = & gt; {\n/")]),n._v("* 同8 "),t("em",[n._v("/\nif (called) return;\ncalled = true;\n/")]),n._v("* 10 递归解析新的返回值的类型\n*  解析到返回值不是一个Promise类型为止\n"),t("em",[n._v("/\nresolvePromiseRelation(promise3, promise4, resolve, reject);\n}, (r) = & gt; {\n/")]),n._v("* 同8 "),t("em",[n._v("/\nif (called) return;\ncalled = true;\nreject(r);\n});\n} else {\n/")]),n._v("* 7 此时promise3是一个普通对象 直接resolve() "),t("em",[n._v("/\nresolve(promise3);\n}\n} catch (e) {\n/")]),n._v("* 同8 "),t("em",[n._v("/\nif (called) return;\ncalled = true;\nreject(e);\n};\n} else {\n//常量\n/")]),n._v("* 同5 普通值直接resolve()"),t("em",[n._v("/\nresolve(promise3);\n}\n}\nPromise.prototype.all = function(values){\nreturn new Promise((resolve,reject)=>{\n/** 2 定义一个存放最终结果的数组result和一个index "),t("em",[n._v("/\nlet results = [];\nlet index = 0;\n/")]),n._v("* 3 定义一个方法addToArr()"),t("br"),n._v("\n*  让index每次执行增加results数组元素的函数的时候都+1\n*  当index === values的长度的时候 说明此时所有promsie都执行完毕并放到的数组中\n*  然后直接resolve(results)就行了\n"),t("em",[n._v("/\nfunction addToArr(key,value){\nindex++;\nresults[key] = value;\n/")]),n._v("* 6 当满足条件时 说明所有的promise都执行完毕 直接resolve(results) "),t("em",[n._v("/\nif(index === values.length){\nresolve(results);\n}\n}\n/")]),n._v("* 4 循环values中的每一项promsie "),t("em",[n._v("/\nfor(let i = 0; i < values.length; i++){\nlet current = values[i];\n/")]),n._v("* 5 判断每一项promise的返回值是不是一个Promsie\n*  是的话就执行该Promise的then方法 拿到返回值 并放到数组results中\n*  是一个普通值的话就直接将该值放到数组results中\n"),t("em",[n._v("/\nif(current && current.then && typeof current.then === 'function'){\ncurrent.then((value)=>{\n/")]),n._v("* 同5 把返回值放到数组results中")]),n._v("/\naddToArr(i,value);\n},reject);\n}else{\n/** 同5 把返回值放到数组results中*/\naddToArr(i,current);\n}\n}\n});\n}")]),n._v(" "),t("p",[n._v("//类方法，多个 Promise 任务同时执行，返回最先执行结束的 Promise 任务的结果，不管这个 Promise 结果是成功还是失败。\n。\n/** race方法相比较于all方法简单很多")]),n._v(" "),t("ul",[t("li",[n._v("因为race中的promsie成功resolve一个")]),n._v(" "),t("li",[n._v("整个race就resolve "),t("em",[n._v("/\nPromise.prototype.race = function(values){\nreturn new Promise((resolve,reject)=>{\n/")]),n._v("* 同4 "),t("em",[n._v("/\nfor(let i = 0; i < values.length; i++){\nlet current = values[i];\n/")]),n._v("* 同5 "),t("em",[n._v("/\nif(current&&current.then&&typeof current.then === 'function'){\n/")]),n._v("* 7 直接执行then就好 "),t("em",[n._v("/\ncurrent.then(resolve,reject);\n}else{\n/")]),n._v("* 8 普通值直接resolve */\nresolve(current);\n}\n}\n});\n}")])]),n._v(" "),t("p",[n._v("// resolve方法\nPromise.resolve = function(value){\nreturn new Promise((resolve,reject)=>{\nresolve(value);\n});\n}\n// reject方法\nPromise.reject = function(reason){\nreturn new Promise((resolve,reject)=>{\nreject(reason);\n});\n}")]),n._v(" "),t("p",[n._v("module.exports = Promise;\n` ``")]),n._v(" "),t("pre",[t("code",[n._v("## 手写防抖(Debouncing)和节流(Throttling)\n\n某些代码不可以在没有间断的情况连续重复执行\n\n1 、DOM操作比起非DOM交互，需要更多地内存和CPU时间，连续尝试过多的DOM操作有可能会导致浏览器挂起，甚至奔溃。 2 、防止恶意脚本攻击\n\n由于节流在resize中是最常用的，如果基于该事件来改变页面布局的话，最好控制处理频率，以确保浏览器不会在极短的时间内进行过多次的计算。\n\n节流\n`` `\n")])]),n._v(" "),t("p",[n._v("let oBtn=document.getElementById('show');\nlet oBox=document.getElementById('box');")]),n._v(" "),t("p",[n._v("/*\n节流函数\nhandle:buy函数\nwait:规定在一秒钟内只能执行一次\n*/\nfunction tab(add, wite){\nlet lastTime = 0;\nreturn function(e) {\nlet nowTime = new Date().getTime()\nif(nowTime - lastTime > wite){\nadd()\nlastTime = nowTime\n}\n}\n}\nfunction add (){\noBox.innerText = parseInt(oBox.innerText) +1\n}\noBtn.onclick = tab(add ,1000)\n"),t("code",[n._v("`` 防抖 ``")]),n._v("\nlet oIpt = document.getElementById('ipt');")]),n._v(" "),t("pre",[t("code",[n._v("let time = null;\n\nfunction debounce (handle, delay) {\n\n    let time = null;\n\n    return function () {\n\n        let self = this,arg = arguments;\n\n        clearTimeout(time);\n\n        time = setTimeout(function () {\n\n            handle.apply(self,arg);　　//this绑定\n\n        },delay)\n\n    }\n\n}\n\nfunction ajax (e) {\n\n    console.log(e,this.value)\n\n}\n\noIpt.oninput = debounce(ajax, 1000)  //1s后发出请求\n")])]),n._v(" "),t("p",[n._v("` ``")]),n._v(" "),t("pre",[t("code",[n._v("## 手写一个JS深拷贝(由浅入深多种解法) > 乞丐版\n`` `\n")])]),n._v(" "),t("p",[n._v("var newObj = JSON.parse( JSON.stringify( someObj ) );\n"),t("code",[n._v("`` > 递归 ``")]),n._v('\nfunction deepCopy(obj){\n//判断是否是简单数据类型，\nif(typeof obj == "object"){\n//复杂数据类型\nvar result = obj.constructor == Array ? [] : {};\nfor(let i in obj){\nresult[i] = typeof obj[i] == "object" ? deepCopy(obj[i]) : obj[i];\n}\n}else {\n//简单数据类型 直接 == 赋值\nvar result = obj;\n}\nreturn result;\n}')]),n._v(" "),t("p",[n._v("` ``")]),n._v(" "),t("pre",[t("code",[n._v("## 手写一个instanceOf原理\n\n`` `\n")])]),n._v(" "),t("p",[n._v("function instanceOf(left,right) {")]),n._v(" "),t("pre",[t("code",[n._v("let proto = left.__proto__;\nlet prototype = right.prototype\nwhile(true) {\n    if(proto === null) return false\n    if(proto === prototype) return true\n    proto = proto.__proto__;\n}\n")])]),n._v(" "),t("p",[n._v("}\n` ``")]),n._v(" "),t("pre",[t("code",[n._v("## 手写一个map\n`` `\n")])]),n._v(" "),t("p",[n._v("if (!Array.prototype.map) {\nArray.prototype.map = function(callback, thisArg) {")]),n._v(" "),t("pre",[t("code",[n._v('var T, A, k;\n\nif (this == null) {\n  throw new TypeError(" this is null or not defined");\n}\n\n// 1. 将O赋值为调用map方法的数组.\nvar O = Object(this);\n\n// 2.将len赋值为数组O的长度.\nvar len = O.length >>> 0;\n\n// 3.如果callback不是函数,则抛出TypeError异常.\nif (Object.prototype.toString.call(callback) != "[object Function]") {\n  throw new TypeError(callback + " is not a function");\n}\n\n// 4. 如果参数thisArg有值,则将T赋值为thisArg;否则T为undefined.\nif (thisArg) {\n  T = thisArg;\n}\n\n// 5. 创建新数组A,长度为原数组O长度len\nA = new Array(len);\n\n// 6. 将k赋值为0\nk = 0;\n\n// 7. 当 k < len 时,执行循环.\nwhile(k < len) {\n\n  var kValue, mappedValue;\n\n  //遍历O,k为原数组索引\n  if (k in O) {\n\n    //kValue为索引k对应的值.\n    kValue = O[ k ];\n\n    // 执行callback,this指向T,参数有三个.分别是kValue:值,k:索引,O:原数组.\n    mappedValue = callback.call(T, kValue, k, O);\n\n    // 返回值添加到新数组A中.\n    A[ k ] = mappedValue;\n  }\n  // k自增1\n  k++;\n}\n\n// 8. 返回新数组A\nreturn A;\n')])]),n._v(" "),t("p",[n._v("};"),t("br"),n._v("\n}\n` ``")]),n._v(" "),t("pre",[t("code",[n._v("## 手写reduce\n`` `\n")])]),n._v(" "),t("p",[n._v("if (!Array.prototype.reduce) {\nObject.defineProperty(Array.prototype, 'reduce', {\nvalue: function(callback /"),t("em",[n._v(", initialValue")]),n._v("/) {\nif (this === null) {\nthrow new TypeError( 'Array.prototype.reduce ' +\n'called on null or undefined' );\n}\nif (typeof callback !== 'function') {\nthrow new TypeError( callback +\n' is not a function');\n}")]),n._v(" "),t("pre",[t("code",[n._v("  // 1. Let O be ? ToObject(this value).\n  var o = Object(this);\n\n  // 2. Let len be ? ToLength(? Get(O, \"length\")).\n  var len = o.length >>> 0; \n\n  // Steps 3, 4, 5, 6, 7      \n  var k = 0; \n  var value;\n\n  if (arguments.length >= 2) {\n    value = arguments[1];\n  } else {\n    while (k < len && !(k in o)) {\n      k++; \n    }\n\n    // 3. If len is 0 and initialValue is not present,\n    //    throw a TypeError exception.\n    if (k >= len) {\n      throw new TypeError( 'Reduce of empty array ' +\n        'with no initial value' );\n    }\n    value = o[k++];\n  }\n\n  // 8. Repeat, while k < len\n  while (k < len) {\n    // a. Let Pk be ! ToString(k).\n    // b. Let kPresent be ? HasProperty(O, Pk).\n    // c. If kPresent is true, then\n    //    i.  Let kValue be ? Get(O, Pk).\n    //    ii. Let accumulator be ? Call(\n    //          callbackfn, undefined,\n    //          « accumulator, kValue, k, O »).\n    if (k in o) {\n      value = callback(value, o[k], k, o);\n    }\n\n    // d. Increase k by 1.      \n    k++;\n  }\n\n  // 9. Return accumulator.\n  return value;\n}\n")])]),n._v(" "),t("p",[n._v("});\n}")]),n._v(" "),t("p",[n._v("方法二、")]),n._v(" "),t("p",[n._v("Array.prototype.myReduce = function(fn, init){\nvar len = this.length;\nvar pre = init;\nvar i = 0;\n//判断是否传入初始值\nif(init == undefined){\n//没有传入初始值，数组第一位默认为初始值，当前元素索引值变为1。\npre = this[0];\ni = 1;\n}\nfor(i; i < len; i ++){\n//当前函数返回值为下一次的初始值\npre = fn(pre, this[i], i)\n}\nreturn pre;")]),n._v(" "),t("p",[n._v("` ``")]),n._v(" "),t("pre",[t("code",[n._v("## 手写实现拖拽\n`` `\n")])]),n._v(" "),t("meta",{attrs:{charset:"UTF-8"}}),n._v(" "),t("meta",{attrs:{name:"Generator",content:"EditPlus®"}}),n._v(" "),t("meta",{attrs:{name:"Author",content:""}}),n._v(" "),t("meta",{attrs:{name:"Keywords",content:""}}),n._v(" "),t("meta",{attrs:{name:"Description",content:""}}),n._v(" "),t("title",[n._v("Document")]),n._v(" "),t("style",{attrs:{type:"text/css"}},[n._v('\n *{\n margin:0;\n padding:0;\n }\n body{\n background:url("img/2345_image_file_copy_1.jpg");\n }\n #d1{\n width:100px;\n height:100px;\n background:red;\n margin-left:300px;\n }\n ')]),n._v(" "),t("body",[t("div",{attrs:{id:"d1"}})]),n._v(" "),t("script",[n._v('\n window.onload=function(){\n    var d1=document.getElementById("d1");\n    d1.onmousedown=function(e){\n        var mouseX=e.clientX;\n        var mouseY=e.clientY;//计算xy\n        var pianyiX=mouseX-d1.offsetLeft;\n        var pianyiY=mouseY-d1.offsetTop;\n        document.onmousemove=function(e){\n            var newX=e.clientX-pianyiX;\n            var newY=e.clientY-pianyiY;\n            d1.style.marginLeft=newX+"px";\n            d1.style.marginTop=newY+"px";\n        }\n    };\n document.onmouseup = function(e){\n   document.onmousemove = null ;\n    };\n }\n ')]),n._v(" "),n._v("\n` ``\n"),t("pre",[t("code",[n._v("## 使用setTimeout模拟setInterval\n\n`` `\n")])]),n._v(" "),t("p",[n._v("setTimeout(function () {\n// 任务\nsetTimeout(arguments.callee, interval);\n}, interval)\n` ``")]),n._v(" "),t("pre",[t("code",[n._v("## 手写实现Object.create的基本原理\n`` `\n")])]),n._v(" "),t("p",[n._v("Object.create= function (obj, properties) {\nfunction F () {}\nF.prototype = obj;\nlet o = new F();\n// 注意Object.create可以传入第二个参数，是一个对象，但格式必须是Object.defineProperties()方法一样\nif (typeof properties === 'object') {\nObject.defineProperties(o, properties);\n}\nreturn o;\n}")]),n._v(" "),t("p",[n._v("` ``")]),n._v(" "),t("pre",[t("code",[n._v("## 手写实现一个基本的Event Bus\n`` `\n")])]),n._v(" "),t("p",[n._v("最简单版：")]),n._v(" "),t("p",[n._v("function event (){\n// 存储事件\nthis.events = this.events || new Map()\n}\nevent.prototype.on = function(type,fn){\nif(!this.events.get(type)){\nthis.events.set(type,fn)\n}\n}\nevent.prototype.emit = function(type){\nvar handle = this.events.get(type)\nif(!handle){\nthrow new Error('未监听这个函数')\n}else{\nhandle.apply(this,[...argumnets].slice(1))\n}\n}\nevent.prototype.off = function(type,fn){\nvar handle = this.events.get(type)\nif(handle){\nthis.events.delete(type)")]),n._v(" "),t("pre",[t("code",[n._v("}\n")])]),n._v(" "),t("p",[n._v("}\n"),t("code",[n._v("`` ``")]),n._v('\n(function (exporter) {\nfunction isFunc(fn) { return typeof fn === "function" }\nfunction str(s) {\nif (s == null) {\nreturn null;\n}\ns = s.replace(/^\\s+|\\s+$/g, "");\nreturn s.length > 0 ? s.toLowerCase() : null;\n}')]),n._v(" "),t("pre",[t("code",[n._v('function handler() {\n    var fns = [];\n    var datas = [];\n    this.add = function (fn, data) {\n        fns.push(fn);\n        datas.push(data);\n    }\n    this.remove = function (fn) {\n        var i = fns.indexOf(fn);\n        if (i >= 0) {\n            fns.splice(i, 1);\n            datas.splice(i, 1);\n        }\n    }\n    this.invoke = function (sender, data) {\n        fns.forEach((fn, i) => {\n            try {\n                fn(sender, data, datas[i])\n            } catch (error) {\n                console.error(error);\n            }\n        });\n    }\n}\n\nfunction eventBus() {\n    var handers = {}\n    this.on = function (eventName, fnOrData, fn) {\n        eventName = str(eventName);\n        if (eventName == null) {\n            throw new Error("事件名无效");\n        }\n        if (!isFunc(fn)) {\n            var temp = fn;\n            fn = fnOrData;\n            fnOrData = temp;\n        }\n        if (!isFunc(fn)) {\n            throw new Error("必须提供事件函数");\n        }\n        var handle = handers[eventName];\n        if (handle == null) {\n            handle = new handler();\n            handers[eventName] = handle;\n        }\n        handle.add(fn, fnOrData);\n    }\n    this.off = function (eventName, fn) {\n        eventName = str(eventName);\n        if (eventName == null) {\n            return;\n        }\n        var handle = handers[eventName];\n        if (handle != null) {\n            if (fn == null) {\n                delete handers[eventName];\n            } else {\n                handle.remove(fn);\n            }\n        }\n    }\n    this.fire = this.emit = this.trigger =\n        function (eventName, sender, data) {\n            eventName = str(eventName);\n            if (eventName == null) {\n                return;\n            }\n            var handle = handers[eventName];\n            if (handle != null) {\n                handle.invoke(sender, data);\n            }\n        }\n    var bus = this;\n    this.bindTo = function(obj){\n        if(obj == null){\n            throw new Error("obj is null");\n        }\n        for (const key in bus) {\n            if (bus.hasOwnProperty(key) && key !== "bindTo") {\n                obj[key] = bus[key];\n            }\n        }\n    }\n}\nvar instance = new eventBus();\ninstance.bindTo(eventBus);\nexporter(eventBus);\n')])]),n._v(" "),t("p",[n._v("})(c => window.eventBus = c)")]),n._v(" "),t("p",[n._v('//绑定\neventBus.on("data_completed", function (sender, data, obj) {\nconsole.log({ sender, data, sign: obj.sign });\n}, { sign: "F6243749AFF04C0581E1DD178A0B737A" });')]),n._v(" "),t("p",[n._v('//触发\neventBus.emit(eventName[, sender][, data]);\neventBus.trigger(eventName[, sender][, data]);\neventBus.fire(eventName[, sender][, data]);\neventBus.emit("Data_Completed", window, [1,2,3,4,5,6]);')]),n._v(" "),t("p",[n._v('//多次绑定\nvar f2 = function (sender, data, obj) {\nconsole.log({ sender, data, sign: obj.sign });\n}\neventBus.on("data_completed", f2 , { sign: "722F9C19C9704412B93216BD70F2AE52" });\neventBus.emit("Data_Completed", window, [1,2,3,4,5,6]);')]),n._v(" "),t("p",[n._v('//解绑、清空\neventBus.off("Data_Completed", f2);\neventBus.emit("Data_Completed", window, [1,2,3,4,5,6]);\neventBus.off("Data_Completed");\neventBus.emit("Data_Completed", window, [1,2,3,4,5,6]);')]),n._v(" "),t("p",[n._v("//初始化一个新的\nvar myEventBus = new eventBus();\n` ``")]),n._v(" "),t("pre",[t("code",[n._v("## 手写reduce\n2 个参数，回调，初始值\n有返回值\n一个累积的过程\narr.reduce((pre, cur, index, arr) => {\n    return cur + 1\n}, [])\n`` `\n")])]),n._v(" "),t("p",[n._v("Array.prototype.reduce(callback,init){\n//判断当前的数组是否存在\nif(this == null){\nthrow new TypeError( 'Array.prototype.reduce ' +\n'called on null or undefined' );\n}\n//判断当前的回调是否存在\nif(typeof callback == 'function'){\nthrow new TypeError( callback +\n' is not a function');\n}\n//把数组拿回来,并保存数组长度\nvar o = Object(this)\nvar len = o.length >>0")]),n._v(" "),t("pre",[t("code",[n._v("  var k = 0;  设置索引\n  var value; //返回值\n\n  if (arguments.length >= 2) {\n    value = arguments[1];//如果有初始值\n  } else {\n    //没有的话,把len赋值给k，判断条件是k小于当前的len并且k索引是否在原数组o上边其实就是判断k的边界值\n    while (k < len && !(k in o)) {\n      k++; \n    }\n    //如果len为0且initialvalue不存在，引发typeerror异常。\n    if (k >= len) {\n      throw new TypeError( 'Reduce of empty array ' +\n        'with no initial value' );\n    }\n    到这块k为len减1，得到初始值为第一个\n    value = o[k++];\n  }\n  // 8. 重复, while k < len\n  while (k < len) {\n    if (k in o) {\n      value = callback(value, o[k], k, o);//回调进行计算并得到累加值\n    }\n    k++;\n  }\n  return value 返回累加值\n")])]),n._v(" "),t("p",[n._v("}\n` ``")]),n._v(" "),t("pre",[t("code",[n._v("## 设计并实现一个JSONP 函数 - 1. 超时处理 - 2. promise\n`` `\n")])]),n._v(" "),t("p",[n._v("function jsonp(url,params,callback,time){\nreturn new Promise((resolve, reject) => {\nvar body = document.body\nvar fnName = \"_json\"+Math.random(10)\nwindow[fnName] = function(data){    //发回数据回调的内容\ncallback(data);//用户写的函数\nif (data) {\nresolve(data)\n} else {\nreject('没有返回数据')\n}\n//执行完毕之后,删除该函数\ndelete window[fnName];\nbody.removeChild(script);\n};\nvar script = document.createElement('script');\nvar src = '';\nfor(let key in params){\nsrc += key + params[key] + '&'\n}\nsrc+='callback='+fnName;\nscript.src = url + '?' + src;\ndocument.body.appendChild(script)")]),n._v(" "),t("pre",[t("code",[n._v("//超时处理\nif(time){\n    var timer = setTimeout(()=>{\n         //jsonp的超时处理，移除回调函数\n     body.removeChild(script);\n     clearTimeout(timer);\n    },time)\n}\n// js加载异常的情况\njsNode.addEventListener('error', () => {\n    delete window[callbackName]\n    document.body.removeChild(jsNode)\n    reject('JavaScript资源加载失败')\n}, false)\n")])]),n._v(" "),t("p",[n._v("}\n}\n` ``")]),n._v(" "),t("pre",[t("code",[n._v("## rem基本设置\n`` `\n")])]),n._v(" "),t("p",[n._v("// 原始配置\nfunction setRem () {\nlet doc = document.documentElement\nlet width = doc.getBoundingClientRect().width\nlet rem = width / 75\ndoc.style.fontSize = rem + 'px'\n}\n// 监听窗口变化\naddEventListener(\"resize\", setRem)\n` ``")]),n._v(" "),t("pre",[t("code",[n._v("## 手写实现AJAX\n`` `\n")])]),n._v(" "),t("p",[n._v("// 1. 简单流程")]),n._v(" "),t("p",[n._v("// 实例化\nlet xhr = new XMLHttpRequest()\n// 初始化\nxhr.open(method, url, async)\n// 发送请求\nxhr.send(data)\n// 设置状态变化回调处理请求结果\nxhr.onreadystatechange = () => {\nif (xhr.readyStatus === 4 && xhr.status === 200) {\nconsole.log(xhr.responseText)\n}\n}")]),n._v(" "),t("p",[n._v("// 2. 基于promise实现")]),n._v(" "),t("p",[n._v("function ajax (options) {\n// 请求地址\nconst url = options.url\n// 请求方法\nconst method = options.method.toLocaleLowerCase() || 'get'\n// 默认为异步true\nconst async = options.async\n// 请求参数\nconst data = options.data\n// 实例化\nconst xhr = new XMLHttpRequest()\n// 请求超时\nif (options.timeout && options.timeout > 0) {\nxhr.timeout = options.timeout\n}\n// 返回一个Promise实例\nreturn new Promise ((resolve, reject) => {\nxhr.ontimeout = () => reject && reject('请求超时')\n// 监听状态变化回调\nxhr.onreadystatechange = () => {\nif (xhr.readyState == 4) {\n// 200-300 之间表示请求成功，304资源未变，取缓存\nif (xhr.status >= 200 && xhr.status < 300 || xhr.status == 304) {\nresolve && resolve(xhr.responseText)\n} else {\nreject && reject()\n}\n}\n}\n// 错误回调\nxhr.onerror = err => reject && reject(err)\nlet paramArr = []\nlet encodeData\n// 处理请求参数\nif (data instanceof Object) {\nfor (let key in data) {\n// 参数拼接需要通过 encodeURIComponent 进行编码\nparamArr.push(encodeURIComponent(key) + '=' + encodeURIComponent(data[key]))\n}\nencodeData = paramArr.join('&')\n}\n// get请求拼接参数\nif (method === 'get') {\n// 检测url中是否已存在 ? 及其位置\nconst index = url.indexOf('?')\nif (index === -1) url += '?'\nelse if (index !== url.length -1) url += '&'\n// 拼接url\nurl += encodeData\n}\n// 初始化\nxhr.open(method, url, async)\n// 发送请求\nif (method === 'get') xhr.send(null)\nelse {\n// post 方式需要设置请求头\nxhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded;charset=UTF-8')\nxhr.send(encodeData)\n}\n})\n}\n` ``")]),n._v(" "),t("pre",[t("code",[n._v("## 手写sleep函数\n\n方法一：简单粗暴法，缺点确实sleep了，会卡死了，cpu增高，无论你的服务器多么牛逼\n\n`` `\n")])]),n._v(" "),t("p",[n._v("function sleep(sleepTime){\nfor(var start = new Date();new Date() - start > sleepTime ){}\n}\nvar t1 = +new Date()\nsleep(3000)\nvar t2 = +new Date()\nconsole.log(t2-t1)\n"),t("code",[n._v("`` 方法二：使用promise实现, 嵌套太多，不方便使用 ``")]),n._v("\nfunction sleep(sleepTime){\nreturn new promise(reslove => setTimeout(reslove,sleepTime))\n}\nconst t1 = +new Date()\nsleep(3000).then(()=>{\nvar t2 = +new Date()\nconsole.log(t2-t1)\n})\n` ``\n加入 async / Await")]),n._v(" "),t("pre",[t("code",[n._v("`` `\n")])]),n._v(" "),t("p",[n._v("!async function test(){\nconst t1 = +new Date()\nawit sleep(3000)\nvar t2 = +new Date()\nconsole.log(t2-t1)\n}\n` ``")]),n._v(" "),t("pre",[t("code",[n._v("开源库也可以做到 sleep模块\n\n`` `\n")])]),n._v(" "),t("p",[n._v("var sleep = require('sleep')")]),n._v(" "),t("p",[n._v("const t1 = +new Date()")]),n._v(" "),t("p",[n._v("sleep.msleep(3000)\nconst t2 = +new Date()\nconsole.log(t2 - t1)\n` ``\n## 实现vue的双向数据绑定")]),n._v(" "),t("pre",[t("code",[n._v("`` `\n")])]),n._v(" "),t("p",[n._v("let obj = {}\nlet input = document.getElementById('input')\nlet span = document.getElementById('span')\n// 数据劫持\nObject.defineProperty(obj, 'text', {\nconfigurable: true,\nenumerable: true,\nget() {\nconsole.log('获取数据了')\n},\nset(newVal) {\nconsole.log('数据更新了')\ninput.value = newVal\nspan.innerHTML = newVal\n}\n})\n// 输入监听\ninput.addEventListener('keyup', function(e) {\nobj.text = e.target.value\n})\n"),t("code",[n._v("`` ## 实现一个简单路由 ``")]),n._v("\n// hash路由\nclass Route{\nconstructor(){\n// 路由存储对象\nthis.routes = {}\n// 当前hash\nthis.currentHash = ''\n// 绑定this，避免监听时this指向改变\nthis.freshRoute = this.freshRoute.bind(this)\n// 监听\nwindow.addEventListener('load', this.freshRoute, false)\nwindow.addEventListener('hashchange', this.freshRoute, false)\n}\n// 存储\nstoreRoute (path, cb) {\nthis.routes[path] = cb || function () {}\n}\n// 更新\nfreshRoute () {\nthis.currentHash = location.hash.slice(1) || '/'\nthis.routes"),t("a",{attrs:{href:""}},[n._v("this.currentHash")]),n._v("\n}"),t("br"),n._v("\n}\n` ``\n## 原生js实现自定义事件")]),n._v(" "),t("pre",[t("code",[n._v("使用是三种原生的方法 实现事件 - new Event(typeArg, eventInit);\n-CustomEvent(DOMString type, optional CustomEventInit eventInitDict) - document.createEvent\n\n[参考](https : //blog.csdn.net/jyb123/article/details/86574365)\n\n        ## 实现斐波那契函数 四种方法 `` `\n")])]),n._v(" "),t("p",[n._v("//递归\nfunction feibonaqie(n){\nif(n<0){\nthrow new Error('输入的数不能小于0')\n}\nif(n == 1 || n == 2){\nreturn 1\n}\nreturn feibonaqie(n- 1) + feibonaqie(n - 2)\n}")]),n._v(" "),t("p",[n._v("//动态规划\nfunction feibonaqie(n){\nif(n<0){\nthrow new Error('输入的数不能小于0')\n}\nlet arr = [0,1,1];\nif(n<2){\nreturn arr[n]\n}\nfor(var i = 3; i<=n;i++){\narr[i] = arr[i-1] + arr[i-2]\n}\nreturn arr[n]\n}\n//使用闭包保存变量")]),n._v(" "),t("p",[n._v("function feibonaqie(n){\nif(n<0){  throw new Error('输入的数不能小于0') }\nvar arr = [0,1]\nfunction calc(n){\nif(arr[n] !== undefined){\nreturn arr[n]\n}\nlet data = calc(n - 1) + calc(n-2)\narr[n] = data;\nreturn data\n}\nreturn calc(n)\n}")]),n._v(" "),t("p",[n._v("//直接暴力\nfunction feibonaqie(n){\nvar pre = 0,cur=1,data;\nif(n<0){  throw new Error('输入的数不能小于0') }\nif(n==1){ return 1}\nif(n==2){ return 1}\nfor(var i = 2;i<=n;i++){\ndata = pre+cur;\npre = cur;\ncur = data\n}\nreturn data\n}\n//最简单的递归\nfunction feibonaqie(n,n1,n2){\nif(n<=1){return n1}\nreturn feibonaqie(n-1,n2,n1+n2)\n}\n"),t("code",[n._v("`` ### 爬楼梯问题 1 步或者2步 ``")]),n._v("\n1 2 3 5 8 ....\n"),t("code",[n._v("`` ``")]),n._v("\nfunction palouti(n,n1,n2){\nif(n == 1){return 1}\nif(n == 2){return 2}\nreturn palouti(n-1)+palouti(n-2)\n}")]),n._v(" "),t("p",[t("code",[n._v("`` ## lzay ## 手写洋葱模型 koa 举例他有一个中间件的数组专门储存，当使用use的时候就把他push进去 ``")]),n._v("\napp = {\nmiddlewares = [],\napp:function(fn){\nthis.middlewares.push(fn)\n}\n}")]),n._v(" "),t("p",[n._v("app.compose = function (middlewares){\nreturn async function (){\n// 从第一个函数开始\nawait dispath(0);\nasync function dispath(idx){\n// 说明所有中间件都执行结束\nif(idx == middlewares.length) return ;\n// 取出当前函数\nvar fn = middlewares[idx];\n// 执行当前函数，传入next函数\nfn(function next(){\n// 并将下一个函数放入next中\nawait dispath(idx+1)\n})\n}\n}\n}")]),n._v(" "),t("p",[n._v("简单的compose函数")]),n._v(" "),t("p",[n._v("const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);")]),n._v(" "),t("p",[n._v("const add1ThenDouble = pipe(\nadd1,\ndouble\n);\nadd1ThenDouble(2); // 6")]),n._v(" "),t("p",[n._v("简单函数实现组合\nlet middleware = []\nmiddleware.push((next) => {\nconsole.log(0)\nnext()\nconsole.log(3)\n})\nmiddleware.push((next) => {\nconsole.log(1)\nnext()\nconsole.log(1.1)\n})\nmiddleware.push(() => {\nconsole.log(2)\n})")]),n._v(" "),t("p",[n._v("let fn = compose(middleware)")]),n._v(" "),t("p",[n._v("function compose(middleware) {\nlet next = () => {}")]),n._v(" "),t("pre",[t("code",[n._v("function creatNext(older, news) {\n    return () => {\n        older(news)\n    }\n}\nlet len = middleware.length - 1;\nfor (let i = len; i >= 0; i--) {\n    next = creatNext(middleware[i], next)\n}\nnext()\n")])]),n._v(" "),t("p",[n._v("}")]),n._v(" "),t("h2",{attrs:{id:"实现一个懒加载x"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个懒加载x","aria-hidden":"true"}},[n._v("#")]),n._v(" 实现一个懒加载x")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<ul>\n <li><img src="./imgs/default.png" data="./imgs/1.png" alt=""></li>\n <li><img src="./imgs/default.png" data="./imgs/2.png" alt=""></li>\n <li><img src="./imgs/default.png" data="./imgs/3.png" alt=""></li>\n <li><img src="./imgs/default.png" data="./imgs/4.png" alt=""></li>\n <li><img src="./imgs/default.png" data="./imgs/5.png" alt=""></li>\n <li><img src="./imgs/default.png" data="./imgs/6.png" alt=""></li>\n <li><img src="./imgs/default.png" data="./imgs/7.png" alt=""></li>\n <li><img src="./imgs/default.png" data="./imgs/8.png" alt=""></li>\n <li><img src="./imgs/default.png" data="./imgs/9.png" alt=""></li>\n <li><img src="./imgs/default.png" data="./imgs/10.png" alt=""></li>\n</ul>\n\nlet imgs =  document.querySelectorAll(\'img\')\n// 可视区高度\nlet clientHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight\nfunction lazyLoad () {\n // 滚动卷去的高度\n let scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop\n for (let i = 0; i < imgs.length; i ++) {\n   // 图片在可视区冒出的高度\n   let x = clientHeight + scrollTop - imgs[i].offsetTop\n   // 图片在可视区内\n   if (x > 0 && x < clientHeight+imgs[i].height) {\n     imgs[i].src = imgs[i].getAttribute(\'data\')\n   } \n }      \n}\n// addEventListener(\'scroll\', lazyLoad) or setInterval(lazyLoad, 1000)\n` `` # React - hooks相关 ## 实现useState function useState(initialValue) {\n       var _val = initialValue\n       function setState(newVal) {\n           _val = newVal\n       }\n       return [_val, setState]\n   }\n\n   ## 如何在 web 端实现异步请求结果的复用，即只产生一次 ajax 请求并保证所有调用方获取到数据 ··· 简单版通过 localstorage function getAjax(url, method, parmas, flag = true) {\n       var request = function (url, method, parmas) {\n           var xhr = new XMLHttpRequest();\n           var cache;\n           xhr.open(method, url, true);\n           xhr.send(parmas);\n           xhr.onreadystatechange = () => {\n               if (xhr.readyState == 4) {\n                   // 200-300 之间表示请求成功，304资源未变，取缓存\n                   if (xhr.status >= 200 && xhr.status < 300 || xhr.status == 304) {\n                       localstorage.setItem(`${method}${url}`, responseText)\n                   } else {\n                       throw new Error(\'请求错误\')\n                   }\n               }\n           }\n           if (flag) {\n               request(url, method, parmas);\n           }\n           cache = localstorage.getItem(`${method}${url}\n           return cache\n       }\n       通过promise做\n\n       function getAjax(url, method, parmas, flag = true) {\n           return new promise((resolve, reject) => {\n               var request = function (url, method, parmas) {\n                   var xhr = new XMLHttpRequest();\n                   var cache;\n                   xhr.open(method, url, true);\n                   xhr.send(parmas);\n                   xhr.onreadystatechange = () => {\n                       if (xhr.readyState == 4) {\n                           // 200-300 之间表示请求成功，304资源未变，取缓存\n                           if (xhr.status >= 200 && xhr.status < 300 || xhr.status == 304)  resolve && resolve(xhr.responseText)\n                       } else {\n                           reject && reject()\n                       }\n                   }\n               }\n               })\n       }\n\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br"),t("span",{staticClass:"line-number"},[n._v("66")]),t("br"),t("span",{staticClass:"line-number"},[n._v("67")]),t("br"),t("span",{staticClass:"line-number"},[n._v("68")]),t("br"),t("span",{staticClass:"line-number"},[n._v("69")]),t("br"),t("span",{staticClass:"line-number"},[n._v("70")]),t("br"),t("span",{staticClass:"line-number"},[n._v("71")]),t("br"),t("span",{staticClass:"line-number"},[n._v("72")]),t("br"),t("span",{staticClass:"line-number"},[n._v("73")]),t("br"),t("span",{staticClass:"line-number"},[n._v("74")]),t("br"),t("span",{staticClass:"line-number"},[n._v("75")]),t("br"),t("span",{staticClass:"line-number"},[n._v("76")]),t("br"),t("span",{staticClass:"line-number"},[n._v("77")]),t("br"),t("span",{staticClass:"line-number"},[n._v("78")]),t("br"),t("span",{staticClass:"line-number"},[n._v("79")]),t("br"),t("span",{staticClass:"line-number"},[n._v("80")]),t("br")])])])},[],!1,null,null,null);e.default=a.exports}}]);