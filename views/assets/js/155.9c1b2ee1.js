(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{642:function(s,e,n){"use strict";n.r(e);var a=n(63),t=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"typescript入门"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typescript入门"}},[s._v("#")]),s._v(" TypeScript入门")]),s._v(" "),n("h2",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[s._v("#")]),s._v(" 简介")]),s._v(" "),n("h3",{attrs:{id:"什么是typescript"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是typescript"}},[s._v("#")]),s._v(" 什么是typeScript")]),s._v(" "),n("p",[s._v("首先，我对 TypeScript 的理解如下：")]),s._v(" "),n("p",[s._v("​TypeScript 是 JavaScript 的一个超集，主要提供了"),n("strong",[s._v("类型系统")]),s._v("和对 "),n("strong",[s._v("ES6")]),s._v(" 的支持，它由"),n("strong",[s._v("Microsoft")]),s._v(" 开发，代码开源于 "),n("strong",[s._v("GitHub")]),s._v(" 上。")]),s._v(" "),n("p",[s._v("其次引用官网的定义：")]),s._v(" "),n("blockquote",[n("p",[s._v("TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. Any browser. Any host. Any OS. Open source.")])]),s._v(" "),n("p",[s._v("翻译成中文即是：")]),s._v(" "),n("blockquote",[n("p",[s._v("TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript。编译出来的 JavaScript 可以运行在任何浏览器上。TypeScript 编译工具可以运行在任何服务器和任何系统上。TypeScript 是开源的。")])]),s._v(" "),n("h3",{attrs:{id:"为什么选择-typescript"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么选择-typescript"}},[s._v("#")]),s._v(" 为什么选择 TypeScript")]),s._v(" "),n("p",[s._v("​TypeScript 官网列举了一些优势，不过我更愿意自己总结一下：")]),s._v(" "),n("blockquote",[n("p",[s._v("TypeScript 增加了代码的可读性和可维护性")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("类型系统实际上是最好的文档，大部分的函数看看类型的定义就可以知道如何使用了")])]),s._v(" "),n("li",[n("p",[s._v("可以在编译阶段就发现大部分错误，这总比在运行时候出错好")])]),s._v(" "),n("li",[n("p",[s._v("增强了编辑器和 IDE 的功能，包括代码补全、接口提示、跳转到定义、重构等")])])]),s._v(" "),n("blockquote",[n("p",[s._v("TypeScript 非常包容")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("TypeScript 是 JavaScript 的超集，.js 文件可以直接重命名为 .ts 即可")])]),s._v(" "),n("li",[n("p",[s._v("即使不显式的定义类型，也能够自动做出类型推论​")])]),s._v(" "),n("li",[n("p",[s._v("可以定义从简单到复杂的几乎一切类型")])]),s._v(" "),n("li",[n("p",[s._v("即使 TypeScript 编译报错，也可以生成 JavaScript 文件")])]),s._v(" "),n("li",[n("p",[s._v("兼容第三方库，即使第三方库不是用 TypeScript 写的，也可以编写单独的类型文件供 "),n("code",[s._v("TypeScript")]),s._v(" 读取")])])]),s._v(" "),n("blockquote",[n("p",[s._v("TypeScript 拥有活跃的社区")])]),s._v(" "),n("ul",[n("li",[n("p",[s._v("大部分第三方库都有提供给 "),n("code",[s._v("TypeScript")]),s._v(" 的类型定义文件")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("Google")]),s._v(" 开发的 "),n("code",[s._v("Angular2")]),s._v(" 就是使用 "),n("code",[s._v("TypeScript")]),s._v(" 编写的")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("vue3")]),s._v(" 就是使用 "),n("code",[s._v("TypeScript")]),s._v(" 编写的")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("TypeScript")]),s._v(" 拥抱了 "),n("code",[s._v("ES6")]),s._v(" 规范，也支持部分 "),n("code",[s._v("ESNext")]),s._v(" 草案的规范")])])]),s._v(" "),n("blockquote",[n("p",[s._v("TypeScript 的缺点")])]),s._v(" "),n("p",[s._v("任何事物都是有两面性的，我认为 TypeScript 的弊端在于：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("有一定的学习成本，需要理解接口（Interfaces）、泛型（Generics）、类（Classes）、枚举类型（Enums）等前端工程师可能不是很熟悉的概念")])]),s._v(" "),n("li",[n("p",[s._v("短期可能会增加一些开发成本，毕竟要多写一些类型的定义，不过对于一个需要长期维护的项目，TypeScript 能够减少其维护成本")])]),s._v(" "),n("li",[n("p",[s._v("集成到构建流程需要一些工作量")])]),s._v(" "),n("li",[n("p",[s._v("可能和一些库结合的不是很完美")])])]),s._v(" "),n("p",[s._v("所以大家可以根据自己团队和项目的情况判断是否需要使用 TypeScript。")]),s._v(" "),n("h2",{attrs:{id:"安装与使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装与使用"}},[s._v("#")]),s._v(" 安装与使用")]),s._v(" "),n("p",[s._v("TypeScript 的命令行工具安装方法如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("npm install -g typescript\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("以上命令会在全局环境下安装 "),n("code",[s._v("tsc")]),s._v(" 命令，安装完成之后，我们就可以在任何地方执行 "),n("code",[s._v("tsc")]),s._v(" 命令了。")]),s._v(" "),n("p",[s._v("编译一个 TypeScript 文件很简单：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("tsc hello.ts\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("我们约定使用 "),n("code",[s._v("TypeScript")]),s._v(" 编写的文件以 "),n("code",[s._v(".ts")]),s._v(" 为后缀，用 "),n("code",[s._v("TypeScript")]),s._v(" 编写 "),n("code",[s._v("React")]),s._v(" 时，以 "),n("code",[s._v(".tsx")]),s._v(" 为后缀。")]),s._v(" "),n("blockquote",[n("p",[s._v("编辑器\nTypeScript 最大的优势便是增强了编辑器和 IDE 的功能，包括代码补全、接口提示、跳转到定义、重构等。")])]),s._v(" "),n("p",[s._v("主流的编辑器都支持 "),n("code",[s._v("TypeScript")]),s._v("，这里我推荐使用 "),n("code",[s._v("Visual Studio Code")])]),s._v(" "),n("p",[s._v("它是一款开源，跨终端的轻量级编辑器，内置了 "),n("code",[s._v("TypeScript")]),s._v(" 支持。\n另外它本身也是用 "),n("code",[s._v("TypeScript")]),s._v(" 编写的。")]),s._v(" "),n("h3",{attrs:{id:"hello-typescript"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hello-typescript"}},[s._v("#")]),s._v(" Hello TypeScript")]),s._v(" "),n("p",[s._v("我们从一个简单的例子开始。")]),s._v(" "),n("p",[s._v("将以下代码复制到 hello.ts 中：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function sayHello(person: string) {\n    return 'Hello, ' + person;\n}\n​\nlet user = 'Tom';\nconsole.log(sayHello(user));\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("然后执行")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("tsc hello.ts\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("这时候会生成一个编译好的文件 hello.js：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function sayHello(person) {\n    return 'Hello, ' + person;\n}\nvar user = 'Tom';\nconsole.log(sayHello(user));\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("code",[s._v("TypeScript")]),s._v(" 中，使用 "),n("code",[s._v(":")]),s._v("指定变量的类型，"),n("code",[s._v(":")]),n("strong",[s._v("的前后有没有空格都可以")]),s._v("。")]),s._v(" "),n("p",[s._v("上述例子中，我们用 : 指定 "),n("code",[s._v("person")]),s._v(" 参数类型为 string。但是编译为 js 之后，并没有什么检查的代码被插入进来。")]),s._v(" "),n("p",[n("strong",[s._v("TypeScript 只会进行静态检查，如果发现有错误，编译的时候就会报错。")])]),s._v(" "),n("p",[s._v("let 是 ES6 中的关键字，和 var 类似，用于定义一个局部变量，可以参阅 let 和 const 命令。")]),s._v(" "),n("p",[s._v("下面尝试把这段代码编译一下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function sayHello(person: string) {\n    return 'Hello, ' + person;\n}\n​\nlet user = [0, 1, 2];\nconsole.log(sayHello(user));\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[n("strong",[s._v("编辑器中会提示错误，编译的时候也会出错：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("index.ts(6,22): error TS2345: Argument of type 'number[]' is not assignable to parameter of type 'string'.\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("但是还是生成了 js 文件：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function sayHello(person) {\n    return 'Hello, ' + person;\n}\nvar user = [0, 1, 2];\nconsole.log(sayHello(user));\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[n("strong",[s._v("TypeScript 编译的时候即使报错了，还是会生成编译结果")]),s._v("，我们仍然可以使用这个编译之后的文件。")]),s._v(" "),n("p",[s._v("如果要在报错的时候终止 "),n("code",[s._v("js")]),s._v(" 文件的生成，可以在 "),n("code",[s._v("tsconfig.json")]),s._v(" 中配置 "),n("code",[s._v("noEmitOnError")]),s._v(" 即可。关于 "),n("code",[s._v("tsconfig.json")]),s._v("，请参阅"),n("a",{attrs:{href:"https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/tsconfig.json.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("官方手册（中文版）"),n("OutboundLink")],1),s._v("。")]),s._v(" "),n("h2",{attrs:{id:"基础类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基础类型"}},[s._v("#")]),s._v(" 基础类型")]),s._v(" "),n("h3",{attrs:{id:"原始数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原始数据类型"}},[s._v("#")]),s._v(" 原始数据类型")]),s._v(" "),n("h4",{attrs:{id:"布尔值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#布尔值"}},[s._v("#")]),s._v(" 布尔值")]),s._v(" "),n("p",[s._v("布尔值是最基础的数据类型，在 "),n("code",[s._v("TypeScript")]),s._v(" 中，使用 "),n("code",[s._v("boolean")]),s._v(" 定义布尔值类型")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//布尔值\nlet boolean = true;\nlet isflag:boolean = true\nlet isdone:boolean = false\n\n//编译通过\nvar boolean = true;\nvar isflag = true;\nvar isdone = false;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("注意，使用构造函数 "),n("code",[s._v("Boolean")]),s._v(" 创造的对象不是布尔值：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let createdByNewBoolean: boolean = new Boolean(1);\n\n// index.ts(1,5): error TS2322: Type 'Boolean' is not assignable to type 'boolean'.\n// 后面约定，注释中标出了编译报错的代码片段，表示编译未通过\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("事实上 "),n("code",[s._v("new Boolean()")]),s._v(" 返回的是一个 "),n("code",[s._v("Boolean")]),s._v(" "),n("strong",[s._v("对象")]),s._v("：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let createdByNewBoolean: Boolean = new Boolean(1);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("直接调用 "),n("code",[s._v("Boolean")]),s._v(" 也可以返回一个 "),n("code",[s._v("boolean")]),s._v(" 类型：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let createdByBoolean: boolean = Boolean(1);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("在 "),n("code",[s._v("TypeScript")]),s._v(" "),n("code",[s._v("中，boolean")]),s._v(" 是 "),n("code",[s._v("JavaScript")]),s._v(" 中的基本类型，而 "),n("code",[s._v("Boolean")]),s._v(" 是 "),n("code",[s._v("JavaScript")]),s._v(" 中的构造函数。其他基本类型（除了 "),n("code",[s._v("null")]),s._v(" 和 "),n("code",[s._v("undefined")]),s._v("）一样，不再赘述。")]),s._v(" "),n("h4",{attrs:{id:"数值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数值"}},[s._v("#")]),s._v(" 数值")]),s._v(" "),n("p",[s._v("使用 number 定义数值类型：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let decLiteral: number = 6;\nlet hexLiteral: number = 0xf00d;\n// ES6 中的二进制表示法\nlet binaryLiteral: number = 0b1010;\n// ES6 中的八进制表示法\nlet octalLiteral: number = 0o744;\nlet notANumber: number = NaN;\nlet infinityNumber: number = Infinity;\n\n//编译结果\nvar decLiteral = 6;\nvar hexLiteral = 0xf00d;\n// ES6 中的二进制表示法\nvar binaryLiteral = 10;\n// ES6 中的八进制表示法\nvar octalLiteral = 484;\nvar notANumber = NaN;\nvar infinityNumber = Infinity;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("其中 0b1010 和 0o744 是 ES6 中的二进制和八进制表示法，它们会被编译为十进制数字。")]),s._v(" "),n("h4",{attrs:{id:"字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[s._v("#")]),s._v(" 字符串")]),s._v(" "),n("p",[s._v("使用 "),n("code",[s._v("string")]),s._v(" 定义字符串类型(可以使用双引号（"),n("code",[s._v('"')]),s._v("）或单引号（`）表示字符串)：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let name: string = "bob";\nname = "smith";\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("你还可以使用模版字符串，它可以定义多行文本和内嵌表达式。 这种字符串是被反引号包围（`），并且以${ expr }这种形式嵌入表达式")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let name: string = `Gene`;\nlet age: number = 37;\nlet sentence: string = `Hello, my name is ${ name }.\n\nI'll be ${ age + 1 } years old next month.`;\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("这与下面定义"),n("code",[s._v("sentence")]),s._v("的方式效果相同：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let sentence: string = "Hello, my name is " + name + ".\\n\\n" +\n    "I\'ll be " + (age + 1) + " years old next month.";\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[s._v("#")]),s._v(" 数组")]),s._v(" "),n("p",[n("code",[s._v("TypeScript")]),s._v("像"),n("code",[s._v("JavaScript")]),s._v("一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 "),n("code",[s._v("[]")]),s._v("，表示由此类型元素组成的一个数组：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let list: number[] = [1, 2, 3];\nlet arr1: string[] = [undefined, '2'];\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("第二种方式是使用数组泛型，Array<元素类型>：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let list: Array<number> = [1, 2, 3];\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"枚举-enum"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#枚举-enum"}},[s._v("#")]),s._v(" 枚举 enum")]),s._v(" "),n("p",[n("code",[s._v("enum")]),s._v("类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("enum Color {Red, Green, Blue}\nlet c: Color = Color.Green;\n\nconsole.log(Color)\n\n编译结果\n\nvar Color;\n(function (Color) {\n    Color[Color[\"Red\"] = 0] = \"Red\";\n    Color[Color[\"Green\"] = 1] = \"Green\";\n    Color[Color[\"Blue\"] = 2] = \"Blue\";\n})(Color || (Color = {}));\nvar c = Color.Green;\n\nconsole.log(Color);  //{ '0': 'Red', '1': 'Green', '2': 'Blue', Red: 0, Green: 1, Blue: 2 }\nconsole.log(c);  //1\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("默认情况下，"),n("strong",[s._v("从0开始为元素编号")]),s._v("。 你也可以手动的指定成员的数值。 例如，我们将上面的例子改成从 1开始编号：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("enum Color {Red = 1, Green, Blue}\nlet c: Color = Color.Green;\n\nconsole.log(Color);  //{ '1': 'Red', '2': 'Green', '3': 'Blue', Red: 1, Green: 2, Blue: 3 }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("或者，全部都采用手动赋值：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("enum Color {Red = 1, Green = 2, Blue = 4}\nlet c: Color = Color.Green;\n\n{ '1': 'Red', '2': 'Green', '4': 'Blue', Red: 1, Green: 2, Blue: 4 }\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为2，但是不确定它映射到Color里的哪个名字，我们可以查找相应的名字：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("enum Color {Red = 1, Green, Blue}\nlet colorName: string = Color[2];\n\nconsole.log(colorName);  // 显示'Green'因为上面代码里它的值是2\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"任意值any"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#任意值any"}},[s._v("#")]),s._v(" 任意值Any")]),s._v(" "),n("p",[s._v("有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 any类型来标记这些变量：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let notSure: any = 4;\nnotSure = "maybe a string instead";\nnotSure = false; // okay, definitely a boolean\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("在对现有代码进行改写的时候，any类型是十分有用的，它允许你在编译时可选择地包含或移除类型检查。 你可能认为 Object有相似的作用，就像它在其它语言中那样。 但是 Object类型的变量只是允许你给它赋任意值 - 但是却不能够在它上面调用任意的方法，即便它真的有这些方法：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let notSure: any = 4;\nnotSure.ifItExists(); // okay, ifItExists might exist at runtime\nnotSure.toFixed(); // okay, toFixed exists (but the compiler doesn't check)\n\nlet prettySure: Object = 4;\nprettySure.toFixed(); // Error: Property 'toFixed' doesn't exist on type 'Object'.\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("当你只知道一部分数据的类型时，any类型也是有用的。 比如，你有一个数组，它包含了不同的类型的数据：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let list: any[] = [1, true, "free"];\n\nlist[1] = 100;\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let something;\nsomething = 'seven';\nsomething = 7;\n\nsomething.setName('Tom');\n\n等价于\nlet something: any;\nsomething = 'seven';\nsomething = 7;\n\nsomething.setName('Tom');\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h3",{attrs:{id:"void"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#void"}},[s._v("#")]),s._v(" Void")]),s._v(" "),n("p",[s._v("使用 "),n("code",[s._v(":void")]),s._v(" 来表示一个函数没有一个返回值")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function warnUser(): void {\n    console.log("This is my warning message");\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined和null：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let unusable: void = undefined;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"null-和-undefined"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined"}},[s._v("#")]),s._v(" Null 和 Undefined")]),s._v(" "),n("p",[s._v("TypeScript里，"),n("code",[s._v("undefined")]),s._v("和"),n("code",[s._v("null")]),s._v("两者各自有自己的类型分别叫做"),n("code",[s._v("undefined")]),s._v("和"),n("code",[s._v("null")]),s._v("。 和 "),n("code",[s._v("void")]),s._v("相似，它们的本身的类型用处不是很大：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// Not much else we can assign to these variables!\nlet u: undefined = undefined;\nlet n: null = null;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("默认情况下"),n("code",[s._v("null")]),s._v("和"),n("code",[s._v("undefined")]),s._v("是"),n("strong",[s._v("所有类型的子类型")]),s._v("。 就是说你可以把 "),n("code",[s._v("null")]),s._v("和"),n("code",[s._v("undefined")]),s._v("赋值给"),n("code",[s._v("number")]),s._v("类型的变量。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let v:number = undefined;\nlet v:number = null;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"never"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#never"}},[s._v("#")]),s._v(" Never")]),s._v(" "),n("p",[n("code",[s._v("never")]),s._v("类型表示的是那些永不存在的值的类型。 例如， "),n("code",[s._v("never")]),s._v("类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 "),n("code",[s._v("never")]),s._v("类型，当它们被永不为真的类型保护所约束时。")]),s._v(" "),n("p",[n("code",[s._v("never")]),s._v("类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是"),n("code",[s._v("never")]),s._v("的子类型或可以赋值给"),n("code",[s._v("never")]),s._v("类型（除了never本身之外）。 即使 "),n("code",[s._v("any")]),s._v("也不可以赋值给"),n("code",[s._v("never")]),s._v("。")]),s._v(" "),n("p",[s._v("下面是一些返回never类型的函数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 返回never的函数必须存在无法达到的终点\nfunction error(message: string): never {\n    throw new Error(message);\n}\n\n// 推断的返回值类型为never\nfunction fail() {\n    return error("Something failed");\n}\n\n// 返回never的函数必须存在无法达到的终点\nfunction infiniteLoop(): never {\n    while (true) {\n    }\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h3",{attrs:{id:"object"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[s._v("#")]),s._v(" Object")]),s._v(" "),n("p",[n("code",[s._v("object")]),s._v("表示非原始类型，也就是除"),n("code",[s._v("number")]),s._v("，"),n("code",[s._v("string")]),s._v("，"),n("code",[s._v("boolean")]),s._v("，"),n("code",[s._v("symbol")]),s._v("，"),n("code",[s._v("null")]),s._v("或"),n("code",[s._v("undefined")]),s._v("之外的类型。")]),s._v(" "),n("p",[s._v("使用"),n("code",[s._v("object")]),s._v("类型，就可以更好的表示像"),n("code",[s._v("Object.create")]),s._v("这样的"),n("code",[s._v("API")]),s._v("。例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('declare function create(o: object | null): void;\n\ncreate({ prop: 0 }); // OK\ncreate(null); // OK\n\ncreate(42); // Error\ncreate("string"); // Error\ncreate(false); // Error\ncreate(undefined); // Error\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h2",{attrs:{id:"变量声明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#变量声明"}},[s._v("#")]),s._v(" 变量声明")]),s._v(" "),n("p",[n("code",[s._v("let")]),s._v("和"),n("code",[s._v("const")]),s._v("是JavaScript里相对较新的变量声明方式。 像我们之前提到过的， "),n("code",[s._v("let")]),s._v("在很多方面与"),n("code",[s._v("var")]),s._v("是相似的，但是可以帮助大家避免在JavaScript里常见一些问题。 "),n("code",[s._v("const")]),s._v("是对"),n("code",[s._v("let")]),s._v("的一个增强，它能阻止对一个变量再次赋值。")]),s._v(" "),n("p",[n("strong",[s._v("因为TypeScript是JavaScript的超集")]),s._v("，所以它本身就支持"),n("code",[s._v("let")]),s._v("和"),n("code",[s._v("const")]),s._v("。 下面我们会详细说明这些新的声明方式以及为什么推荐使用它们来代替 "),n("code",[s._v("var")]),s._v("。")]),s._v(" "),n("p",[s._v("如果你之前使用JavaScript时没有特别在意，那么这节内容会唤起你的回忆。 如果你已经对 var声明的怪异之处了如指掌，那么你可以轻松地略过这节。")]),s._v(" "),n("h3",{attrs:{id:"let-与-const"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#let-与-const"}},[s._v("#")]),s._v(" let 与 const")]),s._v(" "),n("h4",{attrs:{id:"var-声明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#var-声明"}},[s._v("#")]),s._v(" var 声明")]),s._v(" "),n("p",[s._v("一直以来我们都是通过"),n("code",[s._v("var")]),s._v("关键字定义JavaScript变量。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var a = 10;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("大家都能理解，这里定义了一个名为"),n("code",[s._v("a")]),s._v("值为"),n("code",[s._v("10")]),s._v("的变量。")]),s._v(" "),n("p",[s._v("我们也可以在函数内部定义变量：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function f() {\n    var message = "Hello, world!";\n\n    return message;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("并且我们也可以在其它函数内部访问相同的变量。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function f() {\n    var a = 10;\n    return function g() {\n        var b = a + 1;\n        return b;\n    }\n}\n\n\nvar g = f();\ng(); // returns 11;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("上面的例子里，g可以获取到f函数里定义的a变量。 每当 g被调用时，它都可以访问到f里的a变量。 即使当 g在f已经执行完后才被调用，它仍然可以访问及修改a。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function f() {\n    var a = 1;\n    a = 2;\n    var b = g();\n    a = 3;\n    return b;\n    function g() {\n        return a;\n    }\n}\n\nf(); // returns 2\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h4",{attrs:{id:"作用域规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#作用域规则"}},[s._v("#")]),s._v(" 作用域规则")]),s._v(" "),n("p",[s._v("对于熟悉其它语言的人来说，"),n("code",[s._v("var")]),s._v("声明有些奇怪的作用域规则。 看下面的例子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function f(shouldInitialize: boolean) {\n    if (shouldInitialize) {\n        var x = 10;\n    }\n\n    return x;\n}\nf(true);  // returns '10'\nf(false); // returns 'undefined'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("有些读者可能要多看几遍这个例子。 变量 "),n("code",[s._v("x")]),s._v("是定义在"),n("strong",[s._v("if语句里面")]),s._v("，但是我们却可以在语句的外面访问它。 这是因为 var声明可以在包含它的函数，模块，命名空间或全局作用域内部任何位置被访问（我们后面会详细介绍），包含它的代码块对此没有什么影响。 有些人称此为"),n("strong",[s._v("var作用域或函数作用域")]),s._v("。 函数参数也使用函数作用域。")]),s._v(" "),n("p",[s._v("这些作用域规则可能会引发一些错误。 其中之一就是，多次声明同一个变量并不会报错：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function sumMatrix(matrix: number[][]) {\n    var sum = 0;\n    for (var i = 0; i < matrix.length; i++) {\n        var currentRow = matrix[i];\n        for (var i = 0; i < currentRow.length; i++) {\n            sum += currentRow[i];\n        }\n    }\n\n    return sum;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("这里很容易看出一些问题，里层的for循环会覆盖变量i，因为所有i都引用相同的函数作用域内的变量。 有经验的开发者们很清楚，这些问题可能在代码审查时漏掉，引发无穷的麻烦。")]),s._v(" "),n("h4",{attrs:{id:"捕获变量怪异之处"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#捕获变量怪异之处"}},[s._v("#")]),s._v(" 捕获变量怪异之处")]),s._v(" "),n("p",[s._v("快速的猜一下下面的代码会返回什么：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("for (var i = 0; i < 5; i++) {\n    setTimeout(function() { console.log(i); }, 100 * i);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("介绍一下，setTimeout会在若干毫秒的延时后执行一个函数（等待其它代码执行完毕）。")]),s._v(" "),n("p",[s._v("好吧，看一下结果：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("5 5 5 5 5\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("很多JavaScript程序员对这种行为已经很熟悉了，但如果你很不解，你并不是一个人。 大多数人期望输出结果是这样：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("0 1 2 3 4 \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("还记得我们上面提到的捕获变量吗？")]),s._v(" "),n("p",[s._v("我们传给setTimeout的每一个函数表达式实际上都引用了相同作用域里的同一个i。")]),s._v(" "),n("p",[s._v("让我们花点时间思考一下这是为什么。 "),n("code",[s._v("setTimeout")]),s._v("在若干毫秒后执行一个函数，并且是在for循环结束后。 for循环结束后，i的值为10。 所以当函数被调用的时候，它会打印出 10！")]),s._v(" "),n("p",[s._v("一个通常的解决方法是使用立即执行的函数表达式（IIFE）来捕获每次迭代时i的值：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("for (var i = 0; i < 10; i++) {\n    // capture the current state of 'i'\n    // by invoking a function with its current value\n    (function(i) {\n        setTimeout(function() { console.log(i); }, 100 * i);\n    })(i);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("这种奇怪的形式我们已经司空见惯了。 参数 "),n("code",[s._v("i")]),s._v("会覆盖"),n("code",[s._v("for")]),s._v("循环里的"),n("code",[s._v("i")]),s._v("，但是因为我们起了同样的名字，所以我们不用怎么改"),n("code",[s._v("for")]),s._v("循环体里的代码。")]),s._v(" "),n("h4",{attrs:{id:"let-声明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#let-声明"}},[s._v("#")]),s._v(" let 声明")]),s._v(" "),n("p",[s._v("现在你已经知道了var存在一些问题，这恰好说明了为什么用let语句来声明变量。 除了名字不同外， let与var的写法一致。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let hello = "Hello!";\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("主要的区别不在语法上，而是语义，我们接下来会深入研究。")]),s._v(" "),n("h4",{attrs:{id:"块作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#块作用域"}},[s._v("#")]),s._v(" 块作用域")]),s._v(" "),n("p",[s._v("当用let声明一个变量，它使用的是词法作用域或块作用域。 不同于使用 var声明的变量那样可以在包含它们的函数外访问，块作用域变量在包含它们的块或for循环之外是不能访问的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function f(input: boolean) {\n    let a = 100;\n\n    if (input) {\n        // Still okay to reference 'a'\n        let b = a + 1;\n        return b;\n    }\n\n    // Error: 'b' doesn't exist here\n    return b;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("这里我们定义了2个变量"),n("code",[s._v("a")]),s._v("和"),n("code",[s._v("b")]),s._v("。 "),n("code",[s._v("a")]),s._v("的作用域是"),n("code",[s._v("f")]),s._v("函数体内，而"),n("code",[s._v("b")]),s._v("的作用域是"),n("code",[s._v("if")]),s._v("语句块里。")]),s._v(" "),n("p",[s._v("在catch语句里声明的变量也具有同样的作用域规则。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('try {\n    throw "oh no!";\n}\ncatch (e) {\n    console.log("Oh well.");\n}\n\n// Error: \'e\' doesn\'t exist here\nconsole.log(e);\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("拥有块级作用域的变量的另一个特点是，它们不能在被声明之前读或写,即拥有暂时性死区。 虽然这些变量始终“存在”于它们的作用域里，但在直到声明它的代码之前的区域都属于 "),n("strong",[s._v("暂时性死区。")]),s._v(" 它只是用来说明我们不能在 let语句之前访问它们，幸运的是TypeScript可以告诉我们这些信息。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("a++; // illegal to use 'a' before it's declared;\nlet a;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("注意一点，我们仍然可以在一个拥有块作用域变量被声明前获取它。 只是我们不能在变量声明前去调用那个函数。 如果生成代码目标为ES2015，现代的运行时会抛出一个错误；然而，现今TypeScript是不会报错的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function foo() {\n    // okay to capture 'a'\n    return a;\n}\n\n// 不能在'a'被声明前调用'foo'\n// 运行时应该抛出错误\nfoo();\n\nlet a;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("关于暂时性死区的更多信息，查看这里Mozilla Developer Network.")]),s._v(" "),n("h4",{attrs:{id:"重定义及屏蔽"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重定义及屏蔽"}},[s._v("#")]),s._v(" 重定义及屏蔽")]),s._v(" "),n("p",[s._v("我们提过使用"),n("code",[s._v("var")]),s._v("声明时，它不在乎你声明多少次；你只会得到1个。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function f(x) {\n    var x;\n    var x;\n\n    if (true) {\n        var x;\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("在上面的例子里，所有x的声明实际上都引用一个相同的"),n("code",[s._v("x")]),s._v("，并且这是完全有效的代码。 这经常会成为bug的来源。 好的是， let声明就不会这么宽松了,它不允许重复声明。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let x = 10;\nlet x = 20; // 错误，不能在1个作用域里多次声明`x`\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("并不是要求两个均是块级作用域的声明TypeScript才会给出一个错误的警告。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function f(x) {\n    let x = 100; // error: interferes with parameter declaration\n}\n\nfunction g() {\n    let x = 100;\n    var x = 100; // error: can't have both declarations of 'x'\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("并不是说块级作用域变量不能用函数作用域变量来声明。 而是块级作用域变量需要在明显不同的块里声明。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function f(condition, x) {\n    if (condition) {\n        let x = 100;\n        return x;\n    }\n\n    return x;\n}\n\nf(false, 0); // returns 0\nf(true, 0);  // returns 100\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("在一个嵌套作用域里引入一个新名字的行为称做屏蔽。 它是一把双刃剑，它可能会不小心地引入新问题，同时也可能会解决一些错误。 例如，假设我们现在用 let重写之前的sumMatrix函数。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function sumMatrix(matrix: number[][]) {\n    let sum = 0;\n    for (let i = 0; i < matrix.length; i++) {\n        var currentRow = matrix[i];\n        for (let i = 0; i < currentRow.length; i++) {\n            sum += currentRow[i];\n        }\n    }\n\n    return sum;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("这个版本的循环能得到正确的结果，因为内层循环的i可以屏蔽掉外层循环的i。")]),s._v(" "),n("p",[s._v("通常来讲应该避免使用屏蔽，因为我们需要写出清晰的代码。 同时也有些场景适合利用它，你需要好好打算一下。")]),s._v(" "),n("h4",{attrs:{id:"块级作用域变量的获取"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#块级作用域变量的获取"}},[s._v("#")]),s._v(" 块级作用域变量的获取")]),s._v(" "),n("p",[s._v("在我们最初谈及获取用var声明的变量时，我们简略地探究了一下在获取到了变量之后它的行为是怎样的。 直观地讲，每次进入一个作用域时，它创建了一个变量的 环境。 就算作用域内代码已经执行完毕，这个环境与其捕获的变量依然存在。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function theCityThatAlwaysSleeps() {\n    let getCity;\n\n    if (true) {\n        let city = "Seattle";\n        getCity = function() {\n            return city;\n        }\n    }\n\n    return getCity();\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("因为我们已经在city的环境里获取到了"),n("code",[s._v("city")]),s._v("，所以就算"),n("code",[s._v("if")]),s._v("语句执行结束后我们仍然可以访问它。")]),s._v(" "),n("p",[s._v("回想一下前面"),n("code",[s._v("setTimeout")]),s._v("的例子，我们最后需要使用立即执行的函数表达式来获取每次"),n("code",[s._v("for")]),s._v("循环迭代里的状态。 实际上，我们做的是为获取到的变量创建了一个新的变量环境。 这样做挺痛苦的，但是幸运的是，你不必在TypeScript里这样做了。")]),s._v(" "),n("p",[s._v("当let声明出现在循环体里时拥有完全不同的行为。 不仅是在循环里引入了一个新的变量环境，而是针对 每次迭代都会创建这样一个新作用域。 这就是我们在使用立即执行的函数表达式时做的事，所以在 setTimeout例子里我们仅使用let声明就可以了。")]),s._v(" "),n("p",[s._v("for (let i = 0; i < 5 ; i++) {\nsetTimeout(function() {console.log(i); }, 100 * i);\n}\n会输出与预料一致的结果：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("0\n1\n2\n3\n4\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h4",{attrs:{id:"const-声明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#const-声明"}},[s._v("#")]),s._v(" const 声明")]),s._v(" "),n("p",[n("code",[s._v("const")]),s._v("声明是声明变量的另一种方式。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const numLivesForCat = 9;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("它们与let声明相似，但是就像它的名字所表达的，它们被赋值后不能再改变。 换句话说，它们拥有与 let相同的作用域规则，但是不能对它们重新赋值。")]),s._v(" "),n("p",[s._v("这很好理解，它们引用的值是不可变的。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('const numLivesForCat = 9;\nconst kitty = {\n    name: "Aurora",\n    numLives: numLivesForCat,\n}\n\n// Error\nkitty = {\n    name: "Danielle",\n    numLives: numLivesForCat\n};\n\n// all "okay"\nkitty.name = "Rory";\nkitty.name = "Kitty";\nkitty.name = "Cat";\nkitty.numLives--;\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("p",[s._v("除非你使用特殊的方法去避免，实际上"),n("code",[s._v("const")]),s._v("变量的内部状态是可修改的。 幸运的是，TypeScript允许你将对象的成员设置成只读的。 接口一章有详细说明。")]),s._v(" "),n("h4",{attrs:{id:"let-vs-const"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#let-vs-const"}},[s._v("#")]),s._v(" let vs. const")]),s._v(" "),n("p",[s._v("现在我们有两种作用域相似的声明方式，我们自然会问到底应该使用哪个。 与大多数泛泛的问题一样，答案是：依情况而定。")]),s._v(" "),n("p",[s._v("使用最小特权原则，所有变量除了你计划去修改的都应该使用"),n("code",[s._v("const")]),s._v("。 基本原则就是如果一个变量不需要对它写入，那么其它使用这些代码的人也不能够写入它们，并且要思考为什么会需要对这些变量重新赋值。 使用 "),n("code",[s._v("const")]),s._v("也可以让我们更容易的推测数据的流动。")]),s._v(" "),n("p",[s._v("跟据你的自己判断，如果合适的话，与团队成员商议一下。")]),s._v(" "),n("p",[s._v("这个手册大部分地方都使用了let声明。")]),s._v(" "),n("h3",{attrs:{id:"解构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解构"}},[s._v("#")]),s._v(" 解构")]),s._v(" "),n("p",[s._v("Another TypeScript已经可以解析其它 ECMAScript 2015 特性了。 完整列表请参见 "),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",target:"_blank",rel:"noopener noreferrer"}},[s._v("the article on the Mozilla Developer Network"),n("OutboundLink")],1),s._v("。 本章，我们将给出一个简短的概述。")]),s._v(" "),n("h4",{attrs:{id:"解构数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#解构数组"}},[s._v("#")]),s._v(" 解构数组")]),s._v(" "),n("p",[s._v("最简单的解构莫过于数组的解构赋值了：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let input = [1, 2];\nlet [first, second] = input;\nconsole.log(first); // outputs 1\nconsole.log(second); // outputs 2\n这创建了2个命名变量 first 和 second。 相当于使用了索引，但更为方便：\n\nfirst = input[0];\nsecond = input[1];\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("解构作用于已声明的变量会更好：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// swap variables\n[first, second] = [second, first];\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("作用于函数参数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function f([first, second]: [number, number]) {\n    console.log(first);\n    console.log(second);\n}\nf(input);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("你可以在数组里使用"),n("code",[s._v("...")]),s._v("语法创建剩余变量：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let [first, ...rest] = [1, 2, 3, 4];\nconsole.log(first); // outputs 1\nconsole.log(rest); // outputs [ 2, 3, 4 ]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("当然，由于是JavaScript, 你可以忽略你不关心的尾随元素：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let [first] = [1, 2, 3, 4];\nconsole.log(first); // outputs 1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("或其它元素：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let [, second, , fourth] = [1, 2, 3, 4];\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h4",{attrs:{id:"对象解构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象解构"}},[s._v("#")]),s._v(" 对象解构")]),s._v(" "),n("p",[s._v("你也可以解构对象：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let o = {\n    a: "foo",\n    b: 12,\n    c: "bar"\n};\nlet { a, b } = o;\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("这通过 o.a and o.b 创建了 a 和 b 。 注意，如果你不需要 c 你可以忽略它。")]),s._v(" "),n("p",[s._v("就像数组解构，你可以用没有声明的赋值：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('({ a, b } = { a: "baz", b: 101 });\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("注意，我们需要用括号将它括起来，因为Javascript通常会将以 { 起始的语句解析为一个块。")]),s._v(" "),n("p",[s._v("你可以在对象里使用...语法创建剩余变量：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let { a, ...passthrough } = o;\nlet total = passthrough.b + passthrough.c.length;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h4",{attrs:{id:"属性重命名"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#属性重命名"}},[s._v("#")]),s._v(" 属性重命名")]),s._v(" "),n("p",[s._v("你也可以给属性以不同的名字：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let { a: newName1, b: newName2 } = o;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v('这里的语法开始变得混乱。 你可以将 a: newName1 读做 "a 作为 newName1"。 方向是从左到右，好像你写成了以下样子：')]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let newName1 = o.a;\nlet newName2 = o.b;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("令人困惑的是，这里的冒号不是指示类型的。 如果你想指定它的类型， 仍然需要在其后写上完整的模式。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let {a, b}: {a: string, b: number} = o;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h4",{attrs:{id:"默认值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#默认值"}},[s._v("#")]),s._v(" 默认值")]),s._v(" "),n("p",[s._v("默认值可以让你在属性为 "),n("code",[s._v("undefined")]),s._v(" 时使用缺省值：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function keepWholeObject(wholeObject: { a: string, b?: number }) {\n    let { a, b = 1001 } = wholeObject;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("现在，即使 b 为 "),n("code",[s._v("undefined")]),s._v(" ， "),n("code",[s._v("keepWholeObject")]),s._v(" 函数的变量 "),n("code",[s._v("wholeObject")]),s._v(" 的属性 "),n("code",[s._v("a")]),s._v(" 和 "),n("code",[s._v("b")]),s._v(" 都会有值。")]),s._v(" "),n("h4",{attrs:{id:"函数声明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数声明"}},[s._v("#")]),s._v(" 函数声明")]),s._v(" "),n("p",[s._v("解构也能用于函数声明。 看以下简单的情况：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("type C = { a: string, b?: number }\nfunction f({ a, b }: C): void {\n    // ...\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("但是，通常情况下更多的是指定默认值，解构默认值有些棘手。 首先，你需要在默认值之前设置其格式。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function f({ a="", b=0 } = {}): void {\n    // ...\n}\nf();\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("上面的代码是一个类型推断的例子，将在本手册后文介绍。")]),s._v(" "),n("p",[s._v("其次，你需要知道在解构属性上给予一个默认或可选的属性用来替换主初始化列表。 要知道 C 的定义有一个 b 可选属性：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function f({ a, b = 0 } = { a: "" }): void {\n    // ...\n}\nf({ a: "yes" }); // ok, default b = 0\nf(); // ok, default to {a: ""}, which then defaults b = 0\nf({}); // error, \'a\' is required if you supply an argument\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("要小心使用解构。 从前面的例子可以看出，就算是最简单的解构表达式也是难以理解的。 尤其当存在深层嵌套解构的时候，就算这时没有堆叠在一起的重命名，默认值和类型注解，也是令人难以理解的。 解构表达式要尽量保持小而简单。 你自己也可以直接使用解构将会生成的赋值表达式。")]),s._v(" "),n("h4",{attrs:{id:"展开"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#展开"}},[s._v("#")]),s._v(" 展开...")]),s._v(" "),n("p",[s._v("展开操作符正与解构相反。 它允许你将一个数组展开为另一个数组，或将一个对象展开为另一个对象。 例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let first = [1, 2];\nlet second = [3, 4];\nlet bothPlus = [0, ...first, ...second, 5];\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("这会令"),n("code",[s._v("bothPlus")]),s._v("的值为"),n("code",[s._v("[0, 1, 2, 3, 4, 5]")]),s._v("。 展开操作创建了 "),n("code",[s._v("first")]),s._v("和"),n("code",[s._v("second")]),s._v("的一份浅拷贝。 它们不会被展开操作所改变。")]),s._v(" "),n("p",[s._v("你还可以展开对象：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let defaults = { food: "spicy", price: "$$", ambiance: "noisy" };\nlet search = { ...defaults, food: "rich" };\nsearch的值为{ food: "rich", price: "$$", ambiance: "noisy" }。 \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("对象的展开比数组的展开要复杂的多。 像数组展开一样，它是从左至右进行处理，但结果仍为对象。 这就意味着出现在展开对象后面的属性会覆盖前面的属性。 因此，如果我们修改上面的例子，在结尾处进行展开的话：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let defaults = { food: "spicy", price: "$$", ambiance: "noisy" };\nlet search = { food: "rich", ...defaults };\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("那么，"),n("code",[s._v("defaults")]),s._v("里的"),n("code",[s._v("food")]),s._v("属性会重写"),n("code",[s._v('food: "rich"')]),s._v("，在这里这并不是我们想要的结果。")]),s._v(" "),n("p",[s._v("对象展开还有其它一些意想不到的限制。 首先，"),n("strong",[s._v("它仅包含对象 自身的可枚举属性")]),s._v("。 大体上是说当你展开一个对象实例时，你会丢失其方法：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class C {\n  p = 12;\n  m() {\n  }\n}\nlet c = new C();\nlet clone = { ...c };\nclone.p; // ok\nclone.m(); // error!\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("其次，TypeScript编译器"),n("strong",[s._v("不允许展开泛型函数上的类型参数")]),s._v("。 这个特性会在TypeScript的未来版本中考虑实现。")]),s._v(" "),n("h2",{attrs:{id:"类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[s._v("#")]),s._v(" 类")]),s._v(" "),n("h3",{attrs:{id:"介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[s._v("#")]),s._v(" 介绍")]),s._v(" "),n("p",[s._v("传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。 从ECMAScript 2015，也就是ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式。 使用TypeScript，我们允许开发者现在就使用这些特性，并且编译后的JavaScript可以在所有主流浏览器和平台上运行，而不需要等到下个JavaScript版本。")]),s._v(" "),n("p",[s._v("下面看一个使用类的例子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class Greeter {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return "Hello, " + this.greeting;\n    }\n}\n\nlet greeter = new Greeter("world");\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("如果你使用过"),n("code",[s._v("C#或Java")]),s._v("，你会对这种语法非常熟悉。 我们声明一个"),n("code",[s._v("Greeter")]),s._v("类。这个类有3个成员：一个叫做 "),n("code",[s._v("greeting")]),s._v("的属性，一个构造函数和一个 "),n("code",[s._v("greet")]),s._v("方法。")]),s._v(" "),n("p",[s._v("你会注意到，我们在引用任何一个类成员的时候都用了 "),n("code",[s._v("this")]),s._v("。 它表示我们访问的是类的成员。")]),s._v(" "),n("p",[s._v("最后一行，我们使用 "),n("code",[s._v("new")]),s._v("构造了 "),n("code",[s._v("Greeter")]),s._v("类的一个实例。 它会调用之前定义的构造函数，创建一个 "),n("code",[s._v("Greeter")]),s._v("类型的新对象，并执行构造函数初始化它。")]),s._v(" "),n("h3",{attrs:{id:"继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[s._v("#")]),s._v(" 继承")]),s._v(" "),n("p",[s._v("在TypeScript里，我们可以使用常用的面向对象模式。 基于类的程序设计中一种最基本的模式是允许使用继承来扩展现有的类。")]),s._v(" "),n("p",[s._v("看下面的例子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Animal {\n    move(distanceInMeters: number = 0) {\n        console.log(`Animal moved ${distanceInMeters}m.`);\n    }\n}\n\nclass Dog extends Animal {\n    bark() {\n        console.log('Woof! Woof!');\n    }\n}\nconst dog = new Dog();\ndog.bark();Woof! Woof!\ndog.move(10);Animal moved 10m.\ndog.bark();Woof! Woof!\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("这个例子展示了最基本的继承：类从基类中继承了属性和方法。 这里， "),n("code",[s._v("Dog")]),s._v("是一个 "),n("code",[s._v("派生类")]),s._v("，它派生自 "),n("code",[s._v("Animal")]),s._v(" 基类，通过 "),n("code",[s._v("extends")]),s._v("关键字。 "),n("strong",[s._v("派生类")]),s._v("通常被称作 "),n("strong",[s._v("子类")]),s._v("，基类通常被称作 "),n("strong",[s._v("超类")]),s._v("。")]),s._v(" "),n("p",[s._v("因为 "),n("code",[s._v("Dog")]),s._v("继承了 "),n("code",[s._v("Animal")]),s._v("的功能，因此我们可以创建一个 "),n("code",[s._v("Dog")]),s._v("的实例，它能够 "),n("code",[s._v("bark()")]),s._v("和 "),n("code",[s._v("move()")]),s._v("。")]),s._v(" "),n("p",[s._v("下面我们来看个更加复杂的例子。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class Animal {\n    name: string;\n    constructor(theName: string) { this.name = theName; }\n    move(distanceInMeters: number = 0) {\n        console.log(`${this.name} moved ${distanceInMeters}m.`);\n    }\n}\n\nclass Snake extends Animal {\n    constructor(name: string) { super(name); }\n    move(distanceInMeters = 5) {\n        console.log("Slithering...");\n        super.move(distanceInMeters);\n    }\n}\n\nclass Horse extends Animal {\n    constructor(name: string) { super(name); }\n    move(distanceInMeters = 45) {\n        console.log("Galloping...");\n        super.move(distanceInMeters);\n    }\n}\n\nlet sam = new Snake("Sammy the Python");\nlet tom: Animal = new Horse("Tommy the Palomino");\n\nsam.move(); //Sammy the Python  moved  5m\ntom.move(34); //Tommy the Palomino moved 34m\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("p",[s._v("这个例子展示了一些上面没有提到的特性。 这一次，我们使用 "),n("code",[s._v("extends")]),s._v("关键字创建了 "),n("code",[s._v("Animal")]),s._v("的两个子类： "),n("code",[s._v("Horse")]),s._v("和 "),n("code",[s._v("Snake")]),s._v("。")]),s._v(" "),n("p",[s._v("与前一个例子的不同点是，派生类包含了一个构造函数，它 必须调用 "),n("code",[s._v("super()")]),s._v("，它会执行基类的构造函数。 而且，在构造函数里访问 "),n("code",[s._v("this")]),s._v("的属性之前，我们 一定要调用 "),n("code",[s._v("super()")]),s._v("。 这个是TypeScript强制执行的一条重要规则。")]),s._v(" "),n("p",[s._v("这个例子演示了如何在子类里可以重写父类的方法。 "),n("code",[s._v("Snake")]),s._v("类和 "),n("code",[s._v("Horse")]),s._v("类都创建了 "),n("code",[s._v("move")]),s._v("方法，它们重写了从 "),n("code",[s._v("Animal")]),s._v("继承来的 "),n("code",[s._v("move")]),s._v("方法，使得 "),n("code",[s._v("move")]),s._v("方法根据不同的类而具有不同的功能。 注意，即使 "),n("code",[s._v("tom")]),s._v("被声明为 "),n("code",[s._v("Animal")]),s._v("类型，但因为它的值是 "),n("code",[s._v("Horse")]),s._v("，调用 "),n("code",[s._v("tom.move(34)")]),s._v("时，它会调用 "),n("code",[s._v("Horse")]),s._v("里重写的方法：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Slithering...\nSammy the Python moved 5m.\nGalloping...\nTommy the Palomino moved 34m.\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"公共-私有与受保护的修饰符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#公共-私有与受保护的修饰符"}},[s._v("#")]),s._v(" 公共，私有与受保护的修饰符")]),s._v(" "),n("h4",{attrs:{id:"默认为-public"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#默认为-public"}},[s._v("#")]),s._v(" 默认为 public")]),s._v(" "),n("p",[s._v("在上面的例子里，我们可以自由的访问程序里定义的成员。 如果你对其它语言中的类比较了解，就会注意到我们在之前的代码里并没有使用 public来做修饰；例如，C#要求必须明确地使用 public指定成员是可见的。 在TypeScript里，成员都默认为 "),n("code",[s._v("public")]),s._v("。")]),s._v(" "),n("p",[s._v("你也可以明确的将一个成员标记成 public。 我们可以用下面的方式来重写上面的 Animal类：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Animal {\n    public name: string;\n    public constructor(theName: string) { this.name = theName; }\n    public move(distanceInMeters: number) {\n        console.log(`${this.name} moved ${distanceInMeters}m.`);\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h4",{attrs:{id:"private私有的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#private私有的"}},[s._v("#")]),s._v(" private私有的")]),s._v(" "),n("p",[s._v("当成员被标记成 "),n("code",[s._v("private")]),s._v("时，它就不能在声明它的类的外部访问。比如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Animal {\n    private name: string;\n    constructor(theName: string) { this.name = theName; }\n}\n\nnew Animal(\"Cat\").name; // 错误: 'name' 是私有的.\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("TypeScript使用的是结构性类型系统。 当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的。")]),s._v(" "),n("p",[s._v("然而，当我们比较带有 "),n("code",[s._v("private")]),s._v("或 "),n("code",[s._v("protected")]),s._v("成员的类型的时候，情况就不同了。 如果其中一个类型里包含一个 "),n("code",[s._v("private")]),s._v("成员，那么只有当另外一个类型中也存在这样一个 "),n("code",[s._v("private")]),s._v("成员， 并且它们都是来自同一处声明时，我们才认为这两个类型是兼容的。 对于 "),n("code",[s._v("protected")]),s._v("成员也使用这个规则。")]),s._v(" "),n("p",[s._v("下面来看一个例子，更好地说明了这一点：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class Animal {\n    private name: string;\n    constructor(theName: string) { this.name = theName; }\n}\n\nclass Rhino extends Animal {\n    constructor() { super("Rhino"); }\n}\n\nclass Employee {\n    private name: string;\n    constructor(theName: string) { this.name = theName; }\n}\n\nlet animal = new Animal("Goat");\nlet rhino = new Rhino();\nlet employee = new Employee("Bob");\n\nanimal = rhino;\nanimal = employee; // 错误: Animal 与 Employee 不兼容.\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[s._v("这个例子中有 "),n("code",[s._v("Animal")]),s._v("和 "),n("code",[s._v("Rhino")]),s._v("两个类， "),n("code",[s._v("Rhino")]),s._v("是 "),n("code",[s._v("Animal")]),s._v("类的子类。 还有一个 "),n("code",[s._v("Employee")]),s._v("类，其类型看上去与 "),n("code",[s._v("Animal")]),s._v("是相同的。 我们创建了几个这些类的实例，并相互赋值来看看会发生什么。 因为 "),n("code",[s._v("Animal")]),s._v("和 "),n("code",[s._v("Rhino")]),s._v("共享了来自 Animal里的私有成员定义 "),n("code",[s._v("private name: string")]),s._v("，因此它们是兼容的。 然而 "),n("code",[s._v("Employee")]),s._v("却不是这样。当把 "),n("code",[s._v("Employee")]),s._v("赋值给 "),n("code",[s._v("Animal")]),s._v("的时候，得到一个错误，说它们的类型不兼容。 尽管 "),n("code",[s._v("Employee")]),s._v("里也有一个私有成员 "),n("code",[s._v("name")]),s._v("，但它明显不是 "),n("code",[s._v("Animal")]),s._v("里面定义的那个。")]),s._v(" "),n("h4",{attrs:{id:"protected-受保护的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#protected-受保护的"}},[s._v("#")]),s._v(" protected 受保护的")]),s._v(" "),n("p",[n("code",[s._v("protected")]),s._v("修饰符与 "),n("code",[s._v("private")]),s._v("修饰符的行为很相似，但有一点不同， "),n("code",[s._v("protected")]),s._v("成员在派生类中仍然可以访问。例如：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class Person {\n    protected name: string;\n    constructor(name: string) { this.name = name; }\n}\n\nclass Employee extends Person {\n    private department: string;\n\n    constructor(name: string, department: string) {\n        super(name)\n        this.department = department;\n    }\n\n    public getElevatorPitch() {\n        return `Hello, my name is ${this.name} and I work in ${this.department}.`;\n    }\n}\n\nlet howard = new Employee("Howard", "Sales");\nconsole.log(howard.getElevatorPitch());\nconsole.log(howard.name); // 错误\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("p",[s._v("注意，我们不能在 "),n("code",[s._v("Person")]),s._v("类外使用 "),n("code",[s._v("name")]),s._v("，但是我们仍然可以通过 Employee类的实例方法访问，因为 "),n("code",[s._v("Employee")]),s._v("是由 "),n("strong",[s._v("Person派生")]),s._v("而来的。")]),s._v(" "),n("p",[s._v("构造函数也可以被标记成 protected。 这意味着这个类不能在包含它的类外被实例化，但是能被继承。比如，")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class Person {\n    protected name: string;\n    protected constructor(theName: string) { this.name = theName; }\n}\n\n// Employee 能够继承 Person\nclass Employee extends Person {\n    private department: string;\n\n    constructor(name: string, department: string) {\n        super(name);\n        this.department = department;\n    }\n\n    public getElevatorPitch() {\n        return `Hello, my name is ${this.name} and I work in ${this.department}.`;\n    }\n}\n\nlet howard = new Employee("Howard", "Sales");\nlet john = new Person("John"); // 错误: \'Person\' 的构造函数是被保护的.\n\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("h3",{attrs:{id:"readonly修饰符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#readonly修饰符"}},[s._v("#")]),s._v(" readonly修饰符")]),s._v(" "),n("p",[s._v("你可以使用 "),n("code",[s._v("readonly")]),s._v("关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class Octopus {\n    readonly name: string;\n    readonly numberOfLegs: number = 8;\n    constructor (theName: string) {\n        this.name = theName;\n    }\n}\n\nlet dad = new Octopus("Man with the 8 strong legs");\ndad.name = "Man with the 3-piece suit"; // 错误! name 是只读的.\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"参数属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参数属性"}},[s._v("#")]),s._v(" 参数属性")]),s._v(" "),n("p",[s._v("在上面的例子中，我们必须在"),n("code",[s._v("Octopus")]),s._v("类里定义一个只读成员 name和一个参数为 theName的构造函数，并且立刻将 theName的值赋给 name，这种情况经常会遇到。 参数属性可以方便地让我们在一个地方定义并初始化一个成员。 下面的例子是对之前 Octopus类的修改版，使用了参数属性：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Octopus {\n    readonly numberOfLegs: number = 8;\n    constructor(readonly name: string) {\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("注意看我们是如何舍弃了 "),n("code",[s._v("theName")]),s._v("，仅在构造函数里使用 "),n("code",[s._v("readonly name: string")]),s._v("参数来创建和初始化 "),n("code",[s._v("name")]),s._v("成员。 我们把声明和赋值合并至一处。")]),s._v(" "),n("p",[s._v("参数属性通过给构造函数参数前面添加一个访问限定符来声明。 使用 "),n("code",[s._v("private")]),s._v("限定一个参数属性会声明并初始化一个私有成员；对于 "),n("code",[s._v("public和 protected")]),s._v("来说也是一样。")]),s._v(" "),n("h3",{attrs:{id:"存取器-get-set"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#存取器-get-set"}},[s._v("#")]),s._v(" 存取器 get set")]),s._v(" "),n("p",[s._v("TypeScript支持通过"),n("code",[s._v("getters/setters")]),s._v("来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问。")]),s._v(" "),n("p",[s._v("下面来看如何把一个简单的类改写成使用 "),n("code",[s._v("get和 set")]),s._v("。 首先，我们从一个没有使用存取器的例子开始。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class Employee {\n    fullName: string;\n}\n\nlet employee = new Employee();\nemployee.fullName = "Bob Smith";\nif (employee.fullName) {\n    console.log(employee.fullName);\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("我们可以随意的设置 fullName，这是非常方便的，但是这也可能会带来麻烦。")]),s._v(" "),n("p",[s._v("下面这个版本里，我们先检查用户密码是否正确，然后再允许其修改员工信息。 我们把对 fullName的直接访问改成了可以检查密码的 set方法。 我们也加了一个 get方法，让上面的例子仍然可以工作。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let passcode = "secret passcode";\n\nclass Employee {\n    private _fullName: string;\n\n    get fullName(): string {\n        return this._fullName;\n    }\n\n    set fullName(newName: string) {\n        if (passcode && passcode == "secret passcode") {\n            this._fullName = newName;\n        }\n        else {\n            console.log("Error: Unauthorized update of employee!");\n        }\n    }\n}\n\nlet employee = new Employee();\nemployee.fullName = "Bob Smith";\nif (employee.fullName) {\n    alert(employee.fullName);\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("p",[s._v("我们可以修改一下密码，来验证一下存取器是否是工作的。当密码不对时，会提示我们没有权限去修改员工。")]),s._v(" "),n("p",[s._v("对于存取器有下面几点需要注意的：")]),s._v(" "),n("p",[s._v("首先，存取器要求你将编译器设置为输出ECMAScript 5或更高。 不支持降级到ECMAScript 3。 其次，只带有 get不带有 set的存取器自动被推断为 "),n("code",[s._v("readonly")]),s._v("。 这在从代码生成 "),n("code",[s._v(".d.ts")]),s._v("文件时是有帮助的，因为利用这个属性的用户会看到不允许够改变它的值。")]),s._v(" "),n("h3",{attrs:{id:"静态属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#静态属性"}},[s._v("#")]),s._v(" 静态属性")]),s._v(" "),n("p",[s._v("到目前为止，我们只讨论了类的实例成员，那些仅当类被实例化的时候才会被初始化的属性。 我们也可以创建类的静态成员，"),n("strong",[s._v("这些属性存在于类本身上面而不是类的实例上")]),s._v("。 在这个例子里，我们使用 "),n("code",[s._v("static")]),s._v("定义 "),n("code",[s._v("origin")]),s._v("，因为它是所有网格都会用到的属性。 每个实例想要访问这个属性的时候，都要在 "),n("code",[s._v("origin")]),s._v("前面加上类名。 如同在实例属性上使用 "),n("code",[s._v("this")]),s._v(".前缀来访问属性一样，这里我们使用 Grid.来访问静态属性。")]),s._v(" "),n("p",[s._v("class Grid {\nstatic origin = {x: 0, y: 0};\ncalculateDistanceFromOrigin(point: {x: number; y: number;}) {\nlet xDist = (point.x - Grid.origin.x);\nlet yDist = (point.y - Grid.origin.y);\nreturn Math.sqrt(xDist * xDist + yDist * yDist) / this.scale;\n}\nconstructor (public scale: number) { }\n}")]),s._v(" "),n("p",[s._v("let grid1 = new Grid(1.0);  // 1x scale\nlet grid2 = new Grid(5.0);  // 5x scale")]),s._v(" "),n("p",[s._v("console.log(grid1.calculateDistanceFromOrigin({x: 10, y: 10}));\nconsole.log(grid2.calculateDistanceFromOrigin({x: 10, y: 10}));")]),s._v(" "),n("h3",{attrs:{id:"抽象类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#抽象类"}},[s._v("#")]),s._v(" 抽象类")]),s._v(" "),n("p",[n("strong",[s._v("抽象类做为其它派生类的基类使用")]),s._v("。 它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。 abstract关键字是用于定义抽象类和在抽象类内部定义抽象方法。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("abstract class Animal {\n    abstract makeSound(): void;\n    move(): void {\n        console.log('roaming the earch...');\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。 抽象方法的语法与接口方法相似。 两者都是定义方法签名但不包含方法体。 然而，抽象方法必须包含 abstract关键字并且可以包含访问修饰符。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("abstract class Department {\n\n    constructor(public name: string) {\n    }\n\n    printName(): void {\n        console.log('Department name: ' + this.name);\n    }\n\n    abstract printMeeting(): void; // 必须在派生类中实现\n}\n\nclass AccountingDepartment extends Department {\n\n    constructor() {\n        super('Accounting and Auditing'); // 在派生类的构造函数中必须调用 super()\n    }\n\n    printMeeting(): void {\n        console.log('The Accounting Department meets each Monday at 10am.');\n    }\n\n    generateReports(): void {\n        console.log('Generating accounting reports...');\n    }\n}\n\nlet department: Department; // 允许创建一个对抽象类型的引用\ndepartment = new Department(); // 错误: 不能创建一个抽象类的实例\ndepartment = new AccountingDepartment(); // 允许对一个抽象子类进行实例化和赋值\ndepartment.printName();\ndepartment.printMeeting();\ndepartment.generateReports(); // 错误: 方法在声明的抽象类中不存在\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br")])]),n("h3",{attrs:{id:"高级技巧"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#高级技巧"}},[s._v("#")]),s._v(" 高级技巧")]),s._v(" "),n("h4",{attrs:{id:"构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[s._v("#")]),s._v(" 构造函数")]),s._v(" "),n("p",[s._v("当你在TypeScript里声明了一个类的时候，实际上同时声明了很多东西。 首先就是类的 实例的类型。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class Greeter {\n    greeting: string;\n    constructor(message: string) {\n        this.greeting = message;\n    }\n    greet() {\n        return "Hello, " + this.greeting;\n    }\n}\n\nlet greeter: Greeter;\ngreeter = new Greeter("world");\nconsole.log(greeter.greet());\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("这里，我们写了 "),n("code",[s._v("let greeter: Greeter")]),s._v("，意思是 "),n("code",[s._v("Greeter")]),s._v("类的实例的类型是 "),n("code",[s._v("Greeter")]),s._v("。 这对于用过其它面向对象语言的程序员来讲已经是老习惯了。")]),s._v(" "),n("p",[s._v("我们也创建了一个叫做 构造函数的值。 这个函数会在我们使用 new创建类实例的时候被调用。 下面我们来看看，上面的代码被编译成JavaScript后是什么样子的：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let Greeter = (function () {\n    function Greeter(message) {\n        this.greeting = message;\n    }\n    Greeter.prototype.greet = function () {\n        return "Hello, " + this.greeting;\n    };\n    return Greeter;\n})();\n\nlet greeter;\ngreeter = new Greeter("world");\nconsole.log(greeter.greet());\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("上面的代码里， let Greeter将被赋值为构造函数。 当我们调用 new并执行了这个函数后，便会得到一个类的实例。 这个构造函数也包含了类的所有静态属性。 换个角度说，我们可以认为类具有 "),n("strong",[s._v("实例部分与 静态部分这两个部分。")])]),s._v(" "),n("p",[s._v("让我们稍微改写一下这个例子，看看它们之间的区别：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class Greeter {\n    static standardGreeting = "Hello, there";\n    greeting: string;\n    greet() {\n        if (this.greeting) {\n            return "Hello, " + this.greeting;\n        }\n        else {\n            return Greeter.standardGreeting;\n        }\n    }\n}\n\nlet greeter1: Greeter;\ngreeter1 = new Greeter();\nconsole.log(greeter1.greet());\n\nlet greeterMaker: typeof Greeter = Greeter;\ngreeterMaker.standardGreeting = "Hey there!";\n\nlet greeter2: Greeter = new greeterMaker();\nconsole.log(greeter2.greet());\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("p",[s._v("这个例子里， greeter1与之前看到的一样。 我们实例化 Greeter类，并使用这个对象。 与我们之前看到的一样。")]),s._v(" "),n("p",[s._v("再之后，我们直接使用类。 我们创建了一个叫做 "),n("code",[s._v("greeterMaker")]),s._v("的变量。 这个变量保存了这个类或者说保存了类构造函数。 然后我们使用 "),n("code",[s._v("typeof Greeter")]),s._v("，意思是取"),n("code",[s._v("Greeter")]),s._v('类的类型，而不是实例的类型。 或者更确切的说，"告诉我 Greeter标识符的类型"，也就是构造函数的类型。 这个类型包含了类的所有静态成员和构造函数。 之后，就和前面一样，我们在 '),n("code",[s._v("greeterMaker")]),s._v("上使用 "),n("code",[s._v("new")]),s._v("，创建 "),n("code",[s._v("Greeter")]),s._v("的实例。")]),s._v(" "),n("h4",{attrs:{id:"把类当做接口使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#把类当做接口使用"}},[s._v("#")]),s._v(" 把类当做接口使用")]),s._v(" "),n("p",[s._v("如上一节里所讲的，类定义会创建两个东西：类的实例类型和一个构造函数。 因为类可以创建出类型，所以你能够在允许使用接口的地方使用类。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class Point {\n    x: number;\n    y: number;\n}\n\ninterface Point3d extends Point {\n    z: number;\n}\n\nlet point3d: Point3d = {x: 1, y: 2, z: 3};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h2",{attrs:{id:"接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[s._v("#")]),s._v(" 接口")]),s._v(" "),n("ul",[n("li",[s._v("普通接口定义 interface")]),s._v(" "),n("li",[s._v("可选属性 ?")]),s._v(" "),n("li",[s._v("只读属性 readonly")]),s._v(" "),n("li",[s._v("额外的属性检查")]),s._v(" "),n("li",[s._v("重写 as")])]),s._v(" "),n("h3",{attrs:{id:"介绍-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍-2"}},[s._v("#")]),s._v(" 介绍")]),s._v(" "),n("p",[s._v("TypeScript的核心原则之一是对值所具有的结构进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在TypeScript里，"),n("strong",[s._v("接口的作用")]),s._v("就是为这些类型命名和为你的代码或第三方代码定义契约。")]),s._v(" "),n("h4",{attrs:{id:"普通接口定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#普通接口定义"}},[s._v("#")]),s._v(" 普通接口定义")]),s._v(" "),n("p",[s._v("下面通过一个简单示例来观察接口是如何工作的：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function printLabel(labelledObj: { label: string }) {\n  console.log(labelledObj.label);\n}\n\nlet myObj = { size: 10, label: "Size 10 Object" };\nprintLabel(myObj);\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("类型检查器会查看"),n("code",[s._v("printLabel")]),s._v("的调用。 "),n("code",[s._v("printLabel")]),s._v("有一个参数，并要求这个对象参数有一个名为"),n("code",[s._v("label")]),s._v("类型为"),n("code",[s._v("string")]),s._v("的属性。 需要注意的是，我们传入的对象参数实际上会包含很多属性，但是编译器只会检查那些必需的属性是否存在，并且其类型是否匹配。 然而，有些时候TypeScript却并不会这么宽松，我们下面会稍做讲解。")]),s._v(" "),n("p",[s._v("下面我们重写上面的例子，这次使用接口来描述：必须包含一个"),n("code",[s._v("label")]),s._v("属性且类型为"),n("code",[s._v("string")]),s._v("：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('interface LabelledValue {\n  label: string;\n}\n\nfunction printLabel(labelledObj: LabelledValue) {\n  console.log(labelledObj.label);\n}\n\nlet myObj = {size: 10, label: "Size 10 Object"};\nprintLabel(myObj);\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[n("code",[s._v("LabelledValue")]),s._v("接口就好比一个名字，"),n("strong",[s._v("用来描述上面例子里的要求")]),s._v("。 它代表了有一个 "),n("code",[s._v("label")]),s._v("属性且类型为"),n("code",[s._v("string")]),s._v("的对象。 需要注意的是，我们在这里并不能像在其它语言里一样，说传给 "),n("code",[s._v("printLabel")]),s._v("的对象实现了这个接口。我们只会去关注值的外形。 只要传入的对象满足上面提到的必要条件，那么它就是被允许的。")]),s._v(" "),n("p",[s._v("还有一点值得提的是，类型检查器不会去检查属性的顺序，只要相应的属性存在并且类型也是对的就可以。")]),s._v(" "),n("h4",{attrs:{id:"可选属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#可选属性"}},[s._v("#")]),s._v(" 可选属性")]),s._v(" "),n("p",[s._v("接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。 可选属性在应用“option bags”模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('interface SquareConfig {\n  color?: string;\n  width?: number;\n}\n\nfunction createSquare(config: SquareConfig): {color: string; area: number} {\n  let newSquare = {color: "white", area: 100};\n  if (config.color) {\n    newSquare.color = config.color;\n  }\n  if (config.width) {\n    newSquare.area = config.width * config.width;\n  }\n  return newSquare;\n}\n\nlet mySquare = createSquare({color: "black"});\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("p",[s._v("带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个?符号。")]),s._v(" "),n("p",[s._v("可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。 比如，我们故意将 "),n("code",[s._v("createSquare")]),s._v("里的"),n("code",[s._v("color")]),s._v("属性名拼错，就会得到一个错误提示：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("interface SquareConfig {\n  color?: string;\n  width?: number;\n}\n\nfunction createSquare(config: SquareConfig): { color: string; area: number } {\n  let newSquare = {color: \"white\", area: 100};\n  if (config.clor) {\n    // Error: Property 'clor' does not exist on type 'SquareConfig'\n    newSquare.color = config.clor;\n  }\n  if (config.width) {\n    newSquare.area = config.width * config.width;\n  }\n  return newSquare;\n}\n\nlet mySquare = createSquare({color: \"black\"});\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("h4",{attrs:{id:"只读属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#只读属性"}},[s._v("#")]),s._v(" 只读属性")]),s._v(" "),n("p",[s._v("一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性:")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("interface Point {\n    readonly x: number;\n    readonly y: number;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("你可以通过赋值一个对象字面量来构造一个"),n("code",[s._v("Point")]),s._v("。 赋值后， "),n("code",[s._v("x")]),s._v("和"),n("code",[s._v("y")]),s._v("再也不能被改变了。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let p1: Point = { x: 10, y: 20 };\np1.x = 5; // error!\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("TypeScript具有"),n("code",[s._v("ReadonlyArray<T>")]),s._v("类型，它与Array"),n("T",[s._v("相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改：")])],1),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let a: number[] = [1, 2, 3, 4];\nlet ro: ReadonlyArray<number> = a;\nro[0] = 12; // error!\nro.push(5); // error!\nro.length = 100; // error!\na = ro; // error!\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("上面代码的最后一行，可以看到就算把整个ReadonlyArray赋值到一个普通数组也是不可以的。 但是你可以用类型断言"),n("code",[s._v("as")]),s._v("重写：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("a = ro as number[];\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("code",[s._v("readonly vs const")])]),s._v(" "),n("p",[s._v("最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为"),n("strong",[s._v("变量")]),s._v("使用的话用 "),n("code",[s._v("const")]),s._v("，若做为"),n("strong",[s._v("属性")]),s._v("则使用"),n("code",[s._v("readonly")]),s._v("。")]),s._v(" "),n("h4",{attrs:{id:"额外的属性检查"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#额外的属性检查"}},[s._v("#")]),s._v(" 额外的属性检查")]),s._v(" "),n("p",[s._v("我们在第一个例子里使用了接口，TypeScript让我们传入{ size: number; label: string; }到仅期望得到{ label: string; }的函数里。 我们已经学过了可选属性，并且知道他们在“option bags”模式里很有用。")]),s._v(" "),n("p",[s._v("然而，天真地将这两者结合的话就会像在JavaScript里那样搬起石头砸自己的脚。 比如，拿 "),n("code",[s._v("createSquare")]),s._v("例子来说：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('interface SquareConfig {\n    color?: string;\n    width?: number;\n}\n\nfunction createSquare(config: SquareConfig): { color: string; area: number } {\n    // ...\n}\n\nlet mySquare = createSquare({ colour: "red", width: 100 });\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("注意传入"),n("code",[s._v("createSquare")]),s._v("的参数拼写为"),n("code",[s._v("colour")]),s._v("而不是"),n("code",[s._v("color")]),s._v("。 在JavaScript里，这会默默地失败。")]),s._v(" "),n("p",[s._v("你可能会争辩这个程序已经正确地类型化了，因为width属性是兼容的，不存在"),n("code",[s._v("color")]),s._v("属性，而且额外的"),n("code",[s._v("colour")]),s._v("属性是无意义的。")]),s._v(" "),n("p",[s._v("然而，TypeScript会认为这段代码可能存在bug。 对象字面量会被特殊对待而且会经过 "),n("strong",[s._v("额外属性检查")]),s._v("，当将它们赋值给变量或作为参数传递的时候。 如果一个对象字面量存在任何“目标类型”不包含的属性时，你会得到一个错误。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// error: 'colour' not expected in type 'SquareConfig'\nlet mySquare = createSquare({ colour: \"red\", width: 100 });\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("绕开这些检查非常简单。 最简便的方法是使用类型断言：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let mySquare = createSquare({ width: 100, opacity: 0.5 } as SquareConfig);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("然而，最佳的方式是能够添加一个"),n("strong",[s._v("字符串索引签名")]),s._v("，前提是你能够确定这个对象可能具有某些做为特殊用途使用的额外属性。 如果 "),n("code",[s._v("SquareConfig")]),s._v("带有上面定义的类型的color和width属性，并且还会带有任意数量的其它属性，那么我们可以这样定义它：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("interface SquareConfig {\n    color?: string;\n    width?: number;\n    [propName: string]: any;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("我们稍后会讲到索引签名，但在这我们要表示的是"),n("code",[s._v("SquareConfig")]),s._v("可以有任意数量的属性，并且只要它们不是"),n("code",[s._v("color")]),s._v("和"),n("code",[s._v("width")]),s._v("，那么就无所谓它们的类型是什么。")]),s._v(" "),n("p",[s._v("还有最后一种跳过这些检查的方式，这可能会让你感到惊讶，它就是将这个对象赋值给一个另一个变量： 因为 squareOptions不会经过额外属性检查，所以编译器不会报错。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let squareOptions = { colour: "red", width: 100 };\nlet mySquare = createSquare(squareOptions);\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("要留意，在像上面一样的简单代码里，你可能不应该去绕开这些检查。 对于包含方法和内部状态的复杂对象字面量来讲，你可能需要使用这些技巧，但是大部额外属性检查错误是真正的bug。 就是说你遇到了额外类型检查出的错误，比如“option bags”，你应该去审查一下你的类型声明。 在这里，如果支持传入 "),n("code",[s._v("color")]),s._v("或"),n("code",[s._v("colour")]),s._v("属性到"),n("code",[s._v("createSquare")]),s._v("，你应该修改"),n("code",[s._v("SquareConfig")]),s._v("定义来体现出这一点。")])])}),[],!1,null,null,null);e.default=t.exports}}]);