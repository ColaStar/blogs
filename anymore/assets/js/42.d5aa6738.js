(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{176:function(e,t,o){"use strict";o.r(t);var v=o(0),n=Object(v.a)({},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h2",{attrs:{id:""}},[o("a",{staticClass:"header-anchor",attrs:{href:"#","aria-hidden":"true"}},[e._v("#")])]),e._v(" "),o("blockquote",[o("p",[e._v("CI/CD持续集成/持续部署")])]),e._v(" "),o("ul",[o("li",[e._v("CI")])]),e._v(" "),o("p",[o("code",[e._v("持续集成")]),e._v("  (Continuous integration)是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。")]),e._v(" "),o("ul",[o("li",[e._v("cd")])]),e._v(" "),o("p",[o("code",[e._v("持续部署")]),e._v(" （continuous deployment）是通过自动化的构建、测试和部署循环来快速交付高质量的产品。某种程度上代表了一个开发团队工程化的程度，毕竟快速运转的互联网公司人力成本会高于机器，投资机器优化开发流程化相对也提高了人的效率，让 engineering productivity 最大化。")]),e._v(" "),o("p",[o("code",[e._v("持续交付")]),e._v(" （英语：Continuous delivery，缩写为 CD），是一种软件工程手法，让软件产品的产出过程在一个短周期内完成，以保证软件可以稳定、持续的保持在随时可以释出的状况。它的目标在于让软件的建置、测试与释出变得更快以及更频繁。这种方式可以减少软件开发的成本与时间，减少风险。内网测试与ad测试。")]),e._v(" "),o("blockquote",[o("p",[e._v("与DevOps的关系")])]),e._v(" "),o("p",[e._v("持续交付与DevOps的含义很相似，所以经常被混淆。但是它们是不同的两个概念。DevOps的范围更广，它以文化变迁为中心，特别是软件交付过程所涉及的多个团队之间的合作（开发、运维、QA、管理部门等），并且将软件交付的过程自动化。另壹方面，持续交付是壹种自动化交付的手段，关注点在于将不同的过程集中起来，并且更快、更频繁地执行这些过程。因此，DevOps可以是持续交付的壹个产物，持续交付直接汇入DevOps；")]),e._v(" "),o("blockquote",[o("p",[e._v("与持续部署的关系")])]),e._v(" "),o("p",[e._v("有时候，持续交付也与持续部署混淆。持续部署意味着所有的变更都会被自动部署到生产环境中。持续交付意味着所有的变更都可以被部署到生产环境中，但是出于业务考虑，可以选择不部署。如果要实施持续部署，必须先实施持续交付。")]),e._v(" "),o("blockquote",[o("p",[e._v("自动化工具：devops,jenkins\n持续集成的需求（为什么要持续集成）\nhttps://www.bootschool.net/ascii-art/search?pageNO=4&keyword=%E4%BA%BA")])]),e._v(" "),o("p",[e._v("艺术字体")])])},[],!1,null,null,null);t.default=n.exports}}]);